/*
*SPDX-FileCopyrightText: Copyright 2020 | CSI Piemonte
*SPDX-License-Identifier: EUPL-1.2
*/
-- 05.12.2017 Sofia - SIAC-5630 - INIZIO

CREATE OR REPLACE FUNCTION fnc_fasi_bil_prev_ribaltamento_vincoli (
  p_annobilancio integer,
  p_enteproprietarioid integer,
  p_loginoperazione varchar,
  p_dataelaborazione timestamp,
  out faseBilElabIdRet integer,
  out codicerisultato integer,
  out messaggiorisultato varchar
) returns RECORD
AS
  $body$
  DECLARE
    strmessaggio       			VARCHAR(1500):='';
    strmessaggiofinale 			VARCHAR(1500):='';
    bilelemidret           		INTEGER  :=NULL;
    codresult              		INTEGER  :=NULL;
    datainizioval 				timestamp:=NULL;
    fasebilelabid    			INTEGER  :=NULL;
    categoriacapcode 			VARCHAR  :=NULL;
    bilelemstatoanid 			INTEGER  :=NULL;
    --v_dataprimogiornoanno 		timestamp:=NULL;
    ape_prev_da_gest            CONSTANT VARCHAR:='APE_PREV';
    rec_vincoli_gest  			RECORD;
    rec_capitoli_gest 			RECORD;
    _row_count 					INTEGER;
    v_periodo_id_gest           INTEGER;
    v_periodo_id_prev           INTEGER;
    v_bilancio_id_gest           INTEGER;
    v_bilancio_id_prev           INTEGER;

    v_vincolo_id                INTEGER;
    v_vincolo_tipo_id_prev      INTEGER;
    v_elem_id                   INTEGER;
    v_elem_tipo_code_prev       VARCHAR;
    v_elem_tipo_id_prev         INTEGER;
  BEGIN
    messaggiorisultato:='';
    codicerisultato:=0;
    fasebilelabidret:=0;
    datainizioval:= clock_timestamp();
    --v_dataprimogiornoanno:= (p_annobilancio||'-01-01')::timestamp;
    strmessaggiofinale:='Ribaltamento Vincoli da gestione precedente.';





    strmessaggio:='estraggo il periodo del bilancio di previsione periodo_code = anno'||p_annobilancio||'.';
    begin
      select per.periodo_id,bil.bil_id  into strict v_periodo_id_prev ,v_bilancio_id_prev
      from siac_t_periodo per, siac_t_bil bil
      where  bil.ente_proprietario_id=p_enteproprietarioid
      and    per.periodo_id=bil.periodo_id
      and    per.anno::integer = p_annobilancio;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' periodo inesistente siac_t_periodo ( previsione) anno'||p_annobilancio||'.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' troppi periodi x siac_t_periodo ( previsione) anno'||p_annobilancio||'.';
		 return;
	end;

    strmessaggio:='estraggo il periodo del bilancio di gestione anno prec periodo_code = anno'||p_annobilancio-1||'.';
    begin
      select per.periodo_id,bil.bil_id  into strict v_periodo_id_gest ,v_bilancio_id_gest
      from siac_t_periodo per, siac_t_bil bil
      where  bil.ente_proprietario_id=p_enteproprietarioid
      and    per.periodo_id=bil.periodo_id
      and    per.anno::integer = p_annobilancio-1;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' periodo inesistente siac_t_periodo ( prec gestione) anno'||p_annobilancio-1||'.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' troppi periodi x siac_t_periodo ( prec gestione) anno'||p_annobilancio-1||'.';
		 return;
	end;


    strmessaggio:='vincolo_tipo_id dei vincoli nuovi di previsione .';
	begin
      select siac_d_vincolo_tipo.vincolo_tipo_id
      into  strict v_vincolo_tipo_id_prev
      from  siac_d_vincolo_tipo
      where siac_d_vincolo_tipo.ente_proprietario_id = p_enteproprietarioid
      and   siac_d_vincolo_tipo.vincolo_tipo_code    = 'P'
      and   siac_d_vincolo_tipo.data_cancellazione is null;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' vincolo_tipo_id inesistente con code P.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' vincolo_tipo_id troppi con code P.';
		 return;
	end;

/*    execute 'CREATE TABLE IF NOT EXISTS siac_t_vincolo_tmp(id INTEGER);';

    --cancello l'eventuale ribaltamento fatto precedentemente
    delete from siac_r_vincolo_bil_elem using siac_t_vincolo_tmp 	where  siac_r_vincolo_bil_elem.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_r_vincolo_genere using siac_t_vincolo_tmp 		where  siac_r_vincolo_genere.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_r_vincolo_attr using siac_t_vincolo_tmp 		where  siac_r_vincolo_attr.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_r_vincolo_stato using siac_t_vincolo_tmp 		where  siac_r_vincolo_stato.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_t_vincolo using siac_t_vincolo_tmp 			where  siac_t_vincolo.vincolo_id = siac_t_vincolo_tmp.id ;

    -- pulisco la tabella di bck
    execute 'delete from siac_t_vincolo_tmp;';*/

    -- pulizia dati presenti
    strMessaggio:='Pulizia vincoli di previsione. Cancellazione logica siac_r_vincolo_bil_elem.';
    update siac_r_vincolo_bil_elem r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='P'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id_prev
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

    strMessaggio:='Pulizia vincoli di previsione. Cancellazione logica siac_r_vincolo_attr.';
    update siac_r_vincolo_attr r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='P'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id_prev
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

	strMessaggio:='Pulizia vincoli di previsione. Cancellazione logica siac_r_vincolo_genere.';
    update siac_r_vincolo_genere r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='P'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id_prev
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

    strMessaggio:='Pulizia vincoli di previsione. Cancellazione logica siac_r_vincolo_stato.';
    update siac_r_vincolo_stato r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='P'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id_prev
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

    strMessaggio:='Pulizia vincoli di previsione. Cancellazione logica siac_t_vincolo.';
    update siac_t_vincolo v
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=v.login_operazione||'-'||p_loginoperazione
    from siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='P'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id_prev
    and   v.data_cancellazione is null
    and   v.validita_fine is null;

    strmessaggio:='inizio ciclo sui vincoli di gestione anno precedente';
    FOR rec_vincoli_gest IN(
       select
           siac_t_vincolo.vincolo_id
          ,siac_t_vincolo.vincolo_code
          ,siac_t_vincolo.vincolo_desc
          ,siac_t_vincolo.vincolo_tipo_id
          ,siac_t_vincolo.periodo_id
--          ,siac_d_vincolo_genere.vincolo_gen_id 07.12.2017 Sofia JIRA SIAC-5630
      from
           siac_t_vincolo
          ,siac_d_vincolo_tipo
          ,siac_r_vincolo_stato
          ,siac_d_vincolo_stato
--          ,siac_r_vincolo_genere 07.12.2017 Sofia JIRA SIAC-5630
--          ,siac_d_vincolo_genere 07.12.2017 Sofia JIRA SIAC-5630
      where
            siac_t_vincolo.ente_proprietario_id=p_enteproprietarioid
      and   siac_d_vincolo_tipo.vincolo_tipo_id=siac_t_vincolo.vincolo_tipo_id
      and   siac_t_vincolo.vincolo_id = siac_r_vincolo_stato.vincolo_id
      and   siac_r_vincolo_stato.vincolo_stato_id = siac_d_vincolo_stato.vincolo_stato_id
--     and   siac_t_vincolo.vincolo_id =  siac_r_vincolo_genere.vincolo_id 07.12.2017 Sofia
--     and   siac_r_vincolo_genere.vincolo_gen_id = siac_d_vincolo_genere.vincolo_gen_id 07.12.2017 Sofia
      and   siac_d_vincolo_stato.vincolo_stato_code!='A'
      and   siac_d_vincolo_tipo.vincolo_tipo_code='G'
      and   siac_t_vincolo.periodo_id = v_periodo_id_gest
      and 	siac_r_vincolo_stato.data_cancellazione is null
      and 	siac_r_vincolo_stato.validita_fine is null
      and   siac_t_vincolo.data_cancellazione is null
      and   siac_t_vincolo.validita_fine is null
--      and   siac_r_vincolo_genere.data_cancellazione is null JIRA SIAC-5630

    )LOOP

    	strmessaggio:='inserimento nuovo vincolo su siac_t_vincolo v_vincolo_tipo_id_prev '||v_vincolo_tipo_id_prev||' v_periodo_id_prev '||v_periodo_id_prev||'.';

		insert into siac_t_vincolo (vincolo_code ,vincolo_desc ,vincolo_tipo_id ,periodo_id ,validita_inizio ,validita_fine ,ente_proprietario_id ,data_creazione ,data_modifica ,data_cancellazione ,login_operazione
        )VALUES(
           rec_vincoli_gest.vincolo_code
          ,rec_vincoli_gest.vincolo_desc
          ,v_vincolo_tipo_id_prev
          ,v_periodo_id_prev
          ,now()
          ,null
          ,p_enteproprietarioid
          ,now()
          ,now()
          ,null
          ,p_loginoperazione
        ) returning   vincolo_id INTO v_vincolo_id;

        --mi tengo un bck per sicurezza
        execute 'insert into siac_t_vincolo_tmp (id) values('||v_vincolo_id||');';

	    strmessaggio:='inserimento del genere.';
    	insert into siac_r_vincolo_genere
        (vincolo_id,
         vincolo_gen_id,
         validita_inizio,
         ente_proprietario_id,
         data_creazione,
         login_operazione
        )
        (
        select
           v_vincolo_id
          ,r.vincolo_gen_id
          ,now()
          ,p_enteproprietarioid
          ,now()
          ,p_loginoperazione
        from siac_r_vincolo_genere r
        where r.vincolo_id=rec_vincoli_gest.vincolo_id
        and   r.data_cancellazione is null
        and   r.validita_fine is null
        );

        strmessaggio:='inserimento attributi sul vincolo.';
        insert into siac_r_vincolo_attr (vincolo_id,attr_id,tabella_id,boolean ,percentuale,testo,numerico,validita_inizio ,validita_fine,ente_proprietario_id,data_creazione,data_modifica,data_cancellazione,login_operazione)
        select
           v_vincolo_id
          ,attr_id
          ,tabella_id
          ,boolean
          ,percentuale
          ,testo
          ,numerico
          ,now()
          ,null
          ,p_enteproprietarioid
          ,now()
          ,now()
          ,null
          ,p_loginoperazione
		from
        	siac_r_vincolo_attr
        where
        	siac_r_vincolo_attr.ente_proprietario_id = p_enteproprietarioid
    	and siac_r_vincolo_attr.vincolo_id =  rec_vincoli_gest.vincolo_id
        and siac_r_vincolo_attr.data_cancellazione is null
        and siac_r_vincolo_attr.validita_fine is null;

        strmessaggio:='inserimento dello stato siac_r_vincolo_stato.';
        insert into siac_r_vincolo_stato (vincolo_id,vincolo_stato_id,validita_inizio,validita_fine ,ente_proprietario_id ,data_creazione,data_modifica,data_cancellazione,login_operazione)
        select
           v_vincolo_id
          ,vincolo_stato_id
          ,now()
          ,null
          ,p_enteproprietarioid
          ,now()
          ,now()
          ,null
          ,p_loginoperazione
        from
        siac_r_vincolo_stato
         where
        	siac_r_vincolo_stato.ente_proprietario_id = p_enteproprietarioid
    	and siac_r_vincolo_stato.vincolo_id =  rec_vincoli_gest.vincolo_id
        and siac_r_vincolo_stato.data_cancellazione is null
        and siac_r_vincolo_stato.validita_fine is null;


        strmessaggio:='inserimento capitoli siac_r_vincolo_bil_elem capitoli di gestione vecchi.';
        FOR rec_capitoli_gest IN(
          select siac_t_bil_elem.elem_id,siac_t_bil_elem.elem_code,siac_t_bil_elem.elem_code2,siac_t_bil_elem.elem_code3 ,siac_d_bil_elem_tipo.elem_tipo_code
          from siac_r_vincolo_bil_elem , siac_t_bil_elem ,siac_d_bil_elem_tipo
          where
              siac_r_vincolo_bil_elem.elem_id =  siac_t_bil_elem.elem_id
          and siac_t_bil_elem.elem_tipo_id    =  siac_d_bil_elem_tipo.elem_tipo_id
          and siac_t_bil_elem.bil_id          =  v_bilancio_id_gest
          and siac_r_vincolo_bil_elem.data_cancellazione is null
          and siac_r_vincolo_bil_elem.vincolo_id = rec_vincoli_gest.vincolo_id
          and siac_r_vincolo_bil_elem.ente_proprietario_id = p_enteproprietarioid
          and siac_r_vincolo_bil_elem.data_cancellazione is null
          and siac_r_vincolo_bil_elem.validita_fine is null

        )LOOP

        	strmessaggio:='deduco il codice del capitolo di previsione nuovo.';

			if rec_capitoli_gest.elem_tipo_code = 'CAP-UG' THEN
            	v_elem_tipo_code_prev := 'CAP-UP';
            elseif rec_capitoli_gest.elem_tipo_code = 'CAP-EG' THEN
                v_elem_tipo_code_prev := 'CAP-EP';
        	else
				--messaggiorisultato:=' Errore tipo capitolo '||rec_capitoli_gest.elem_tipo_code||'.';
            	--RAISE EXCEPTION ' Errore tipo capitolo % diverso da CAP-UG e CAP-EG .',rec_capitoli_gest.elem_tipo_code;
                --RETURN;
                continue;
            end if;

        	strmessaggio:='estraggo il tipo nuovo di prev.';
			raise notice 'tipo=% elem_code=% elem_id=%' ,rec_capitoli_gest.elem_tipo_code,rec_capitoli_gest.elem_code,rec_capitoli_gest.elem_id;
            select elem_tipo_id into strict v_elem_tipo_id_prev
            from siac_d_bil_elem_tipo
            where
            ente_proprietario_id = p_enteproprietarioid
            and elem_tipo_code = v_elem_tipo_code_prev ;

    		strmessaggio:='estraggo elem_id v_elem_tipo_id_prev '|| v_elem_tipo_id_prev::varchar||' rec_capitoli_gest.elem_code '||rec_capitoli_gest.elem_code||' rec_capitoli_gest.elem_code2 '||rec_capitoli_gest.elem_code2||' rec_capitoli_gest.elem_code3 '||rec_capitoli_gest.elem_code3||'.';



 --           select siac_t_bil_elem.elem_id into strict v_elem_id
 			v_elem_id:=null;
            select siac_t_bil_elem.elem_id into v_elem_id
            FROM   siac_t_bil_elem,siac_t_bil
            where
                siac_t_bil_elem.bil_id         = siac_t_bil.bil_id
            and siac_t_bil.bil_code            = 'BIL_'||p_annobilancio
            and siac_t_bil_elem.elem_code      = rec_capitoli_gest.elem_code
            and siac_t_bil_elem.elem_code2     = rec_capitoli_gest.elem_code2
            and siac_t_bil_elem.elem_code3     = rec_capitoli_gest.elem_code3
            and siac_t_bil_elem.elem_tipo_id   = v_elem_tipo_id_prev
        	and siac_t_bil_elem.ente_proprietario_id = p_enteproprietarioid;

            if 	v_elem_id is not null then
             strmessaggio:='inizio inserimenti per i capitoli .';
  			 raise notice 'tipo=% elem_code=% elem_id=%' ,v_elem_tipo_code_prev,rec_capitoli_gest.elem_code,v_elem_id;

             insert into siac_r_vincolo_bil_elem ( vincolo_id,elem_id,validita_inizio,validita_fine,ente_proprietario_id,data_creazione,data_modifica,data_cancellazione ,login_operazione
             )values(
				 v_vincolo_id
                ,v_elem_id
                ,now()
                ,null
                ,p_enteproprietarioid
                ,now()
                ,now()
                ,null
                ,p_loginoperazione
             );
           end if;


        end LOOP;
    end LOOP;
    messaggiorisultato := 'vincoli ribaltati correttamente';
    codicerisultato := 0 ;
    RETURN;
  EXCEPTION
  WHEN raise_exception THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 1500);
    messaggiorisultato:=strmessaggiofinale||strmessaggio||'ERRORE: . '||SQLSTATE||' '||substring(upper(SQLERRM) FROM 1 FOR 1500) ;
    codicerisultato:=-1;
    RETURN;
  WHEN no_data_found THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 1500);
    messaggiorisultato:=strmessaggiofinale||strmessaggio||'Nessun elemento trovato. '||SQLSTATE||' '||substring(upper(SQLERRM) FROM 1 FOR 1500) ;
    codicerisultato:=-1;
    RETURN;
  WHEN OTHERS THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 1500);
    messaggiorisultato:=strmessaggiofinale||strmessaggio||'Errore OTHERS DB '||SQLSTATE||' '||substring(upper(SQLERRM) FROM 1 FOR 1500) ;
    codicerisultato:=-1;
    RETURN;
  END;
  $body$ LANGUAGE 'plpgsql' volatile called ON NULL input security invoker cost 100;
  
CREATE OR REPLACE FUNCTION fnc_fasi_bil_prev_apertura_all
(
  annobilancio           integer,
  checkPrev              boolean,
  impostaImporti         boolean,
  stepPartenza           integer,
  enteproprietarioid     integer,
  loginoperazione        varchar,
  dataelaborazione       timestamp,
  out faseBilElabIdRet   integer,
  out codicerisultato    integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio 		VARCHAR(1500):='';
	strMessaggioFinale 	VARCHAR(1500):='';

	codResult         	integer:=null;
    faseBilElabId     	integer:=null;

    prevAggImpRec 		record;
    prevCapRec 			record;
    prevRibVincoli		record;

    CAP_EP_STR          CONSTANT varchar:='CAP-EP';
    CAP_UP_STR          CONSTANT varchar:='CAP-UP';
    CAP_EG_STR          CONSTANT varchar:='CAP-EG';
    CAP_UG_STR          CONSTANT varchar:='CAP-UG';

    U_STR               CONSTANT varchar:='U';
    E_STR               CONSTANT varchar:='E';

BEGIN
	messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;

	strMessaggioFinale:='Apertura bilancio di previsione per Anno bilancio='||annoBilancio::varchar||'.';

    if not (stepPartenza=99 or stepPartenza>=2) then
        strMessaggio:='Step ri-partenza non corretto valori ammessi >=2 99.';
        codiceRisultato:=-1;
    end if;

    -- STEP 1 -- CAPITOLI USCITA
    -- ESEGUITO SOLO SE ESEGUITI TUTTI
    if codiceRisultato=0 and stepPartenza=99 then
  	 strMessaggio:='Capitoli uscita.';

     select * into prevCapRec
     from fnc_fasi_bil_prev_apertura
     (
      annobilancio,
      U_STR,
      CAP_UP_STR,
      CAP_UG_STR,
      true,       -- checkPrev,
      true,       -- impostaImporti,
      enteproprietarioid,
      loginoperazione,
      dataelaborazione
     );

     if prevCapRec.codiceRisultato=0 then
    	faseBilElabId:=prevCapRec.faseBilElabIdRet;
     else
        strMessaggio:=prevCapRec.messaggioRisultato;
        codiceRisultato:=prevCapRec.codiceRisultato;
     end if;
    end if;

    -- STEP 2 -- CAPITOLI DI ENTRATA
    -- STEP DI RIPARTENZA
    if codiceRisultato=0  and stepPartenza>=2 then
		strMessaggio:='Capitoli entrata.';
        select * into prevCapRec
        from fnc_fasi_bil_prev_apertura
		(annobilancio,
		 E_STR,
		 CAP_EP_STR,
		 CAP_EG_STR,
		 true,       ---checkPrev,
		 true,       ---impostaImporti,
		 enteproprietarioid,
		 loginoperazione,
 	     dataelaborazione);
        if prevCapRec.codiceRisultato=0 then
    		faseBilElabId:=prevCapRec.faseBilElabIdRet;
        else
	        strMessaggio:=prevCapRec.messaggioRisultato;
    	    codiceRisultato:=prevCapRec.codiceRisultato;
        end if;
    end if;

	-- STEP 3 -- popolamento dei vincoli di previsione

	if codiceRisultato=0 and stepPartenza>=2 then    -- deve essere stato eseguito sia spesa che entrata
		strMessaggio:='vincoli entrata.';
        select * into prevRibVincoli
		from fnc_fasi_bil_prev_ribaltamento_vincoli (annoBilancio,enteProprietarioId,loginOperazione,dataElaborazione);

		if prevRibVincoli.codiceRisultato=0 then
            -- 05.12.2017 Sofia JIRA  SIAC-5630
    		-- faseBilElabId:=prevRibVincoli.faseBilElabIdRet;
        else
	        strMessaggio:=prevRibVincoli.messaggioRisultato;
    	    codiceRisultato:=prevRibVincoli.codiceRisultato;
        end if;
	end if;

    -- STEP 4 -- popolamento diCuiImpegnato e dati anno prec
    -- rieseguito ogni volta che si richiede esecuzione
    -- spesa-entrata o solo entrata
	if codiceRisultato=0 and stepPartenza>=1 then
		strMessaggio:='Capitoli previsione aggiorna importi e dati prec.';

        select *  into prevAggImpRec
        from  fnc_fasi_bil_aggiorna_importi_bilprev
        (annobilancio,
		 true,   --flagaggimpo boolean,
         true,   --flagdicuiimpe boolean,
	     faseBilElabId,
	     enteProprietarioId,
	     loginOperazione,
	     dataElaborazione
         );

        if prevAggImpRec.codiceRisultato!=0 then
        	strMessaggio:=prevAggImpRec.messaggioRisultato;
            codiceRisultato:=prevAggImpRec.codiceRisultato;
        end if;
    end if;

    if codiceRisultato=0 then
    	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
        faseBilElabIdRet:=faseBilElabId;
    else messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

-- 05.12.2017 Sofia - SIAC-5630 - FINE




-- Allineamento modifiche effettuate da CSI - INIZIO - Maurizio

CREATE OR REPLACE FUNCTION siac.fnc_siac_dwh_contabilita_generale (
  p_anno_bilancio varchar,
  p_ente_proprietario_id integer,
  p_data timestamp
)
RETURNS TABLE (
  esito varchar
) AS
$body$
DECLARE
/*
pdc        record;  

impegni record; 
documenti record; 
liquidazioni_doc record; 
liquidazioni_imp record; 
ordinativi record; 
ordinativi_imp record;

prima_nota record;
movimenti  record;
causale    record;
class      record;*/

BEGIN

IF p_ente_proprietario_id IS NULL THEN
   RAISE EXCEPTION 'Errore: Parametro Ente Propietario nullo';
   RETURN;
END IF;

IF p_anno_bilancio IS NULL THEN
   RAISE EXCEPTION 'Errore: Parametro Anno di bilancio nullo';
   RETURN;
END IF;

IF p_data IS NULL THEN
   --IF p_anno_bilancio::integer < to_char(now(),'YYYY')::integer THEN
      --p_data = to_timestamp('31/12/'||p_anno_bilancio, 'dd/mm/yyyy');
   --ELSE
      p_data := now();
   --END IF;   
END IF;

esito:= 'Inizio funzione carico dati contabilita_generale (FNC_SIAC_DWH_CONTABILITA_GENERALE) - '||clock_timestamp();
RETURN NEXT;

esito:= '  Inizio eliminazione dati pregressi - '||clock_timestamp();
RETURN NEXT;
DELETE FROM siac.siac_dwh_contabilita_generale
WHERE ente_proprietario_id = p_ente_proprietario_id
AND   bil_anno = p_anno_bilancio;
esito:= '  Fine eliminazione dati pregressi - '||clock_timestamp();
RETURN NEXT;

insert into 
siac_dwh_contabilita_generale
select 
tb.ente_proprietario_id,
tb.ente_denominazione,
tb.bil_anno, 
tb.desc_prima_nota,
tb.num_provvisorio_prima_nota,  
tb.num_definitivo_prima_nota,
tb.data_registrazione_prima_nota,
tb.cod_stato_prima_nota,
tb.desc_stato_prima_nota,
tb.cod_mov_ep,
tb.desc_mov_ep,  
tb.cod_mov_ep_dettaglio,
tb.desc_mov_ep_dettaglio,
tb.importo_mov_ep,
tb.segno_mov_ep,
tb.cod_piano_dei_conti,
tb.desc_piano_dei_conti,
tb.livello_piano_dei_conti,
tb.ordine_piano_dei_conti,
tb.cod_pdce_fam,
tb.desc_pdce_fam,
tb.cod_ambito, 
tb.desc_ambito,  
tb.cod_causale,
tb.desc_causale,
tb.cod_tipo_causale,
tb.desc_tipo_causale,
tb.cod_stato_causale,
tb.desc_stato_causale,
tb.cod_evento,
tb.desc_evento,
tb.cod_tipo_mov_finanziario,
tb.desc_tipo_mov_finanziario,
tb.cod_piano_finanziario,
tb.desc_piano_finanziario,
tb.anno_movimento,
tb.numero_movimento,
tb.cod_submovimento,
anno_ordinativo,
num_ordinativo,
num_subordinativo,
anno_liquidazione,
num_liquidazione,
anno_doc,
num_doc,
cod_tipo_doc,
data_emissione_doc,
cod_sogg_doc,
num_subdoc,
modifica_impegno,
entrate_uscite,
tb.cod_bilancio,
p_data data_elaborazione,
numero_ricecon
from (
select tbdoc.* from 
(
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and 
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('SE','SS') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id= p_ente_proprietario_id 
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
  then 'CE' 
  when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
  when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
   when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
  else ''::varchar end as tipo_codifica,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id= p_ente_proprietario_id 
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null
        )
  select aa.*, 
bb.tipo_codifica||'.'||  bb.codice_codifica_albero cod_bilancio
   from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
  doc as (with aa as (
select a.doc_id,
b.subdoc_id, b.subdoc_numero  num_subdoc,
a.doc_anno anno_doc,
a.doc_numero num_doc, 
a.doc_data_emissione data_emissione_doc ,
c.doc_tipo_code cod_tipo_doc
 from siac_t_doc a,siac_t_subdoc b,siac_d_doc_tipo c
where b.doc_id=a.doc_id and a.ente_proprietario_id=p_ente_proprietario_id
and c.doc_tipo_id=a.doc_tipo_id
and a.data_cancellazione is null
and b.data_cancellazione is null
and c.data_cancellazione is NULL)
, bb as (SELECT 
  a.doc_id,
  b.soggetto_code v_soggetto_code
      FROM   siac_r_doc_sog a, siac_t_soggetto b
      WHERE a.soggetto_id = b.soggetto_id
      and a.ente_proprietario_id=p_ente_proprietario_id 
      and a.data_cancellazione is null
and b.data_cancellazione is null
and a.validita_fine is null)
select * From 
aa left join bb ON
aa.doc_id=bb.doc_id),
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario,
   null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
doc.anno_doc,
doc.num_doc,
doc.cod_tipo_doc,
doc.data_emissione_doc,
doc.v_soggetto_code cod_sogg_doc,
doc.num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
    from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
     left join doc
  on movep.campo_pk_id=doc.subdoc_id 
  left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id) as tbdoc 
UNION
select tbimp.* from (
-- imp
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
     i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND  p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('A','I') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) 
  ,imp as (
  select a.movgest_id,a.movgest_anno anno_movimento,a.movgest_numero numero_movimento from siac_t_movgest a where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null)
  , pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.*,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario,
   imp.anno_movimento,imp.numero_movimento,
   null::varchar cod_submovimento 
   ,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
   from 
   movep left join 
  	movepdet on movep.movep_id=movepdet.movep_id
left join imp
  on movep.campo_pk_id=imp.movgest_id  left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id) as tbimp
UNION
--subimp acc  
select tbimp.* from (
-- imp
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND 
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('SA','SI') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) 
  ,subimp as (
  select a.movgest_id,a.movgest_anno anno_movimento,a.movgest_numero numero_movimento,
  b.movgest_ts_id,b.movgest_ts_code cod_submovimento
  from siac_t_movgest a,siac_T_movgest_ts b where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and b.movgest_id=a.movgest_id
  )
  , pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario, subimp.anno_movimento,
   subimp.numero_movimento,
   subimp.cod_submovimento
   ,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
left join subimp
  on movep.campo_pk_id=subimp.movgest_ts_id    left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id ) as tbimp  
union
select tbord.* from (
-- ord
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('OI', 'OP') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as (/* SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*,bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
   ord as (select a.ord_id,a.ord_anno anno_ordinativo,a.ord_numero num_ordinativo
   from siac_t_ordinativo a where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null)
  ,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
/*  ,liq as (select a.liq_id,a.liq_anno anno_liquidazione,a.liq_numero num_liquidazione from siac_t_liquidazione a where a.ente_proprietario_id=3
and a.data_cancellazione is null)  */
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario, 
   null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,ord.anno_ordinativo,
ord.num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
   left join ord
  on movep.campo_pk_id=ord.ord_id
      left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id
  ) as tbord
UNION
-- liq
select tbliq.* from (
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and 
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code ='L'
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,liq as (select a.liq_id,a.liq_anno anno_liquidazione,a.liq_numero num_liquidazione from siac_t_liquidazione a where a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null)
,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario
   , null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
liq.anno_liquidazione,
liq.num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon   
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
  left join liq
  on movep.campo_pk_id=liq.liq_id
      left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id
) as tbliq
union
--richiesta econ
select tbricecon.* from (
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code ='RE'
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
  ricecon as (select a.ricecon_id, a.ricecon_numero numero_ricecon from siac_t_richiesta_econ a where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null
)       ,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario
   , null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
ricecon.numero_ricecon   
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
  left join ricecon 
  on movep.campo_pk_id=ricecon.ricecon_id   left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id) as tbricecon
   union
-- mod
select tbmod.* from (
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('MMGE','MMGS') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( 
/*  
SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
  mod as (
select d.mod_id,
c.movgest_anno v_movgest_anno, c.movgest_numero v_movgest_numero,
b.movgest_ts_code cod_submovimento
          FROM   siac_t_movgest_ts_det_mod a,siac_T_movgest_ts b, siac_t_movgest c,
           siac_t_modifica d, siac_r_modifica_stato e, siac_d_modifica_stato f
          WHERE  a.ente_proprietario_id = p_ente_proprietario_id
and a.mod_stato_r_id=e.mod_stato_r_id
and e.mod_id=d.mod_id
and f.mod_stato_id=e.mod_stato_id
and a.movgest_ts_id=b.movgest_ts_id
and b.movgest_id=c.movgest_id
AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
AND    p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
          AND    a.data_cancellazione IS NULL
          AND    b.data_cancellazione IS NULL
          AND    c.data_cancellazione IS NULL
          AND    d.data_cancellazione IS NULL
          AND    e.data_cancellazione IS NULL
          AND    f.data_cancellazione IS NULL            
UNION
select d.mod_id,
c.movgest_anno v_movgest_anno, c.movgest_numero v_movgest_numero,
b.movgest_ts_code cod_submovimento
          FROM   siac_r_movgest_ts_sog_mod a,siac_T_movgest_ts b, siac_t_movgest c,
           siac_t_modifica d, siac_r_modifica_stato e, siac_d_modifica_stato f
          WHERE  a.ente_proprietario_id = p_ente_proprietario_id
and a.mod_stato_r_id=e.mod_stato_r_id
and e.mod_id=d.mod_id
and f.mod_stato_id=e.mod_stato_id
and a.movgest_ts_id=b.movgest_ts_id
and b.movgest_id=c.movgest_id
AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
AND    p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
          AND    a.data_cancellazione IS NULL
          AND    b.data_cancellazione IS NULL
          AND    c.data_cancellazione IS NULL
          AND    d.data_cancellazione IS NULL
          AND    e.data_cancellazione IS NULL
          AND    f.data_cancellazione IS NULL   )
,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )          
   select movep.*,movepdet.*--, case when mod.mod_id is not null then 'S' else 'N' end modifica_impegno
,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario
   , mod.v_movgest_anno anno_movimento,mod.v_movgest_numero numero_movimento,
   mod.cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
case when mod.mod_id is not null then 'S' else 'N' end modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon   
     from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
  left join mod on 
  movep.campo_pk_id=  mod.mod_id
      left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id
) as tbmod   
--lib
union
select lib.* from (
with movep as (
select distinct 
m.ente_proprietario_id,
p.ente_denominazione,
i.anno AS bil_anno, 
m.pnota_desc desc_prima_nota,  
m.pnota_numero num_provvisorio_prima_nota,  
m.pnota_progressivogiornale num_definitivo_prima_nota,
m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
o.pnota_stato_code cod_stato_prima_nota,
o.pnota_stato_desc desc_stato_prima_nota,
l.movep_id,
l.movep_code cod_mov_ep,
l.movep_desc desc_mov_ep,  
q.causale_ep_code cod_causale,
q.causale_ep_desc desc_causale,
r.causale_ep_tipo_code cod_tipo_causale,
r.causale_ep_tipo_desc desc_tipo_causale,
t.causale_ep_stato_code cod_stato_causale,
t.causale_ep_stato_desc desc_stato_causale,
NULL::varchar cod_evento,
NULL::varchar desc_evento,
NULL::varchar cod_tipo_mov_finanziario,
NULL::varchar desc_tipo_mov_finanziario,
NULL::integer campo_pk_id ,
q.causale_ep_id
FROM 
siac_t_prima_nota m,siac_d_causale_ep_tipo r,
siac_t_bil h,
siac_t_periodo i,
siac_t_mov_ep l,
siac_r_prima_nota_stato n,
siac_d_prima_nota_stato o,
siac_t_ente_proprietario p,
siac_t_causale_ep q,
siac_r_causale_ep_stato s,
siac_d_causale_ep_stato t 
WHERE 
m.ente_proprietario_id=p_ente_proprietario_id 
and r.causale_ep_tipo_code='LIB' and 
i.anno=p_anno_bilancio 
and
h.bil_id = m.bil_id AND
i.periodo_id = h.periodo_id AND
l.regep_id = m.pnota_id AND
m.pnota_id = n.pnota_id AND
o.pnota_stato_id = n.pnota_stato_id AND
--p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
p.ente_proprietario_id=m.ente_proprietario_id and 
q.causale_ep_id=l.causale_ep_id AND 
r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
o.pnota_stato_code <> 'A' and 
h.data_cancellazione IS NULL AND
i.data_cancellazione IS NULL AND
l.data_cancellazione IS NULL AND
m.data_cancellazione IS NULL AND
n.data_cancellazione IS NULL AND
o.data_cancellazione IS NULL AND
p.data_cancellazione IS NULL AND
q.data_cancellazione IS NULL AND
r.data_cancellazione IS NULL AND
s.data_cancellazione IS NULL AND
t.data_cancellazione IS NULL 
)
,
movepdet as (
with aa as 
(
select a.movep_id, b.pdce_conto_id,
a.movep_det_code cod_mov_ep_dettaglio,
a.movep_det_desc desc_mov_ep_dettaglio,
a.movep_det_importo importo_mov_ep,
a.movep_det_segno segno_mov_ep,
b.pdce_conto_code cod_piano_dei_conti,
b.pdce_conto_desc desc_piano_dei_conti,
b.livello livello_piano_dei_conti,
b.ordine ordine_piano_dei_conti,
d.pdce_fam_code cod_pdce_fam,
d.pdce_fam_desc desc_pdce_fam,
e.ambito_code cod_ambito, 
e.ambito_desc desc_ambito
From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
,siac_d_pdce_fam d,siac_d_ambito e
where a.ente_proprietario_id= p_ente_proprietario_id 
and b.pdce_conto_id=a.pdce_conto_id
and c.pdce_fam_tree_id=b.pdce_fam_tree_id
and d.pdce_fam_id=c.pdce_fam_id
and c.validita_fine is null
and e.ambito_id=a.ambito_id
and a.data_cancellazione is null
and b.data_cancellazione is null
and c.data_cancellazione is null
and d.data_cancellazione is null
and e.data_cancellazione is null
)
, 
bb as 
( 
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null
)
select aa.*, 
bb.tipo_codifica||'.'||  bb.codice_codifica_albero cod_bilancio
from aa left join 
bb on aa.pdce_conto_id=bb.pdce_conto_id
) 
select movep.*,movepdet.*,
null::varchar cod_piano_finanziario,
null::varchar desc_piano_finanziario,
null::integer anno_movimento,
null::numeric numero_movimento,
null::varchar cod_submovimento,
null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
null::varchar entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
from movep left join 
movepdet on movep.movep_id=movepdet.movep_id
) as lib
) as tb;
               
esito:= 'Fine funzione carico contabilita_generale (FNC_SIAC_DWH_CONTABILITA_GENERALE) - '||clock_timestamp();
RETURN NEXT;

EXCEPTION
WHEN others THEN
  esito:='Funzione carico contabilita_generale (FNC_SIAC_DWH_CONTABILITA_GENERALE) terminata con errori';
  RAISE EXCEPTION '%-%.',SQLSTATE,SQLERRM;
RETURN;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY DEFINER
COST 100 ROWS 1000;

CREATE OR REPLACE FUNCTION siac.fnc_siac_dwh_documento_spesa (
  p_ente_proprietario_id integer,
  p_data timestamp
)
RETURNS TABLE (
  esito varchar
) AS
$body$
DECLARE

BEGIN

IF p_ente_proprietario_id IS NULL THEN
   RAISE EXCEPTION 'Errore: Parametro Ente Propietario nullo';
   RETURN;
END IF;

IF p_data IS NULL THEN
   p_data := now();
END IF;

esito:= 'Inizio funzione carico documenti spesa (FNC_SIAC_DWH_DOCUMENTO_SPESA) - '||clock_timestamp();
RETURN NEXT;

DELETE FROM siac.siac_dwh_documento_spesa
WHERE ente_proprietario_id = p_ente_proprietario_id;
esito:= '  Fine eliminazione dati pregressi - '||clock_timestamp();
RETURN NEXT;

INSERT INTO 
  siac.siac_dwh_documento_spesa
(
  ente_proprietario_id,
  ente_denominazione,
  anno_atto_amministrativo,
  num_atto_amministrativo,
  oggetto_atto_amministrativo,
  cod_tipo_atto_amministrativo,
  desc_tipo_atto_amministrativo,
  cod_cdr_atto_amministrativo,
  desc_cdr_atto_amministrativo,
  cod_cdc_atto_amministrativo,
  desc_cdc_atto_amministrativo,
  note_atto_amministrativo,
  cod_stato_atto_amministrativo,
  desc_stato_atto_amministrativo,
  causale_atto_allegato,
  altri_allegati_atto_allegato,
  dati_sensibili_atto_allegato,
  data_scadenza_atto_allegato,
  note_atto_allegato,
  annotazioni_atto_allegato,
  pratica_atto_allegato,
  resp_amm_atto_allegato,
  resp_contabile_atto_allegato,
  anno_titolario_atto_allegato,
  num_titolario_atto_allegato,
  vers_invio_firma_atto_allegato,
  cod_stato_atto_allegato,
  desc_stato_atto_allegato,
  sogg_id_atto_allegato,
  cod_sogg_atto_allegato,
  tipo_sogg_atto_allegato,
  stato_sogg_atto_allegato,
  rag_sociale_sogg_atto_allegato,
  p_iva_sogg_atto_allegato,
  cf_sogg_atto_allegato,
  cf_estero_sogg_atto_allegato,
  nome_sogg_atto_allegato,
  cognome_sogg_atto_allegato,
  anno_doc,
  num_doc,
  desc_doc,
  importo_doc,
  beneficiario_multiplo_doc,
  data_emissione_doc,
  data_scadenza_doc,
  codice_bollo_doc,
  desc_codice_bollo_doc,
  collegato_cec_doc,
  cod_pcc_doc,
  desc_pcc_doc,
  cod_ufficio_doc,
  desc_ufficio_doc,
  cod_stato_doc,
  desc_stato_doc,
  anno_elenco_doc,
  num_elenco_doc,
  data_trasmissione_elenco_doc,
  tot_quote_entrate_elenco_doc,
  tot_quote_spese_elenco_doc,
  tot_da_pagare_elenco_doc,
  tot_da_incassare_elenco_doc,
  cod_stato_elenco_doc,
  desc_stato_elenco_doc,
  cod_gruppo_doc,
  desc_famiglia_doc,
  cod_famiglia_doc,
  desc_gruppo_doc,
  cod_tipo_doc,
  desc_tipo_doc,
  sogg_id_doc,
  cod_sogg_doc,
  tipo_sogg_doc,
  stato_sogg_doc,
  rag_sociale_sogg_doc,
  p_iva_sogg_doc,
  cf_sogg_doc,
  cf_estero_sogg_doc,
  nome_sogg_doc,
  cognome_sogg_doc,
  num_subdoc,
  desc_subdoc,
  importo_subdoc,
  num_reg_iva_subdoc,
  data_scadenza_subdoc,
  convalida_manuale_subdoc,
  importo_da_dedurre_subdoc,
  splitreverse_importo_subdoc,
  pagato_cec_subdoc,
  data_pagamento_cec_subdoc,
  note_tesoriere_subdoc,
  cod_distinta_subdoc,
  desc_distinta_subdoc,
  tipo_commissione_subdoc,
  conto_tesoreria_subdoc,
  rilevante_iva,
  ordinativo_singolo,
  ordinativo_manuale,
  esproprio,
  note,
  cig,
  cup,
  causale_sospensione,
  data_sospensione,
  data_riattivazione,
  causale_ordinativo,
  num_mutuo,
  annotazione,
  certificazione,
  data_certificazione,
  note_certificazione,
  num_certificazione,
  data_scadenza_dopo_sospensione,
  data_esecuzione_pagamento,
  avviso,
  cod_tipo_avviso,
  desc_tipo_avviso,
  sogg_id_subdoc,
  cod_sogg_subdoc,
  tipo_sogg_subdoc,
  stato_sogg_subdoc,
  rag_sociale_sogg_subdoc,
  p_iva_sogg_subdoc,
  cf_sogg_subdoc,
  cf_estero_sogg_subdoc,
  nome_sogg_subdoc,
  cognome_sogg_subdoc,
  sede_secondaria_subdoc,
  bil_anno,
  anno_impegno,
  num_impegno,
  cod_impegno,
  desc_impegno,
  cod_subimpegno,
  desc_subimpegno,
  num_liquidazione,
  cod_tipo_accredito,
  desc_tipo_accredito,
  mod_pag_id,
  quietanziante,
  data_nascita_quietanziante,
  luogo_nascita_quietanziante,
  stato_nascita_quietanziante,
  bic,
  contocorrente,
  intestazione_contocorrente,
  iban,
  note_mod_pag,
  data_scadenza_mod_pag,
  sogg_id_mod_pag,
  cod_sogg_mod_pag,
  tipo_sogg_mod_pag,
  stato_sogg_mod_pag,
  rag_sociale_sogg_mod_pag,
  p_iva_sogg_mod_pag,
  cf_sogg_mod_pag,
  cf_estero_sogg_mod_pag,
  nome_sogg_mod_pag,
  cognome_sogg_mod_pag,
  anno_liquidazione,
  bil_anno_ord,
  anno_ord,
  num_ord,
  num_subord,
  registro_repertorio,
  anno_repertorio,
  num_repertorio,
  data_repertorio,
  data_ricezione_portale,
  doc_contabilizza_genpcc,
  rudoc_registrazione_anno,
  rudoc_registrazione_numero,
  rudoc_registrazione_data,
  cod_cdc_doc,
  desc_cdc_doc,
  cod_cdr_doc,
  desc_cdr_doc,
  data_operazione_pagamentoincasso,
  pagataincassata,
  note_pagamentoincasso,
  -- 	SIAC-5229
  arrotondamento,
  cod_tipo_splitrev,
  desc_tipo_splitrev,
  stato_liquidazione,
  sdi_lotto_siope_doc,
  cod_siope_tipo_doc, 
  desc_siope_tipo_doc, 
  desc_siope_tipo_bnkit_doc,
  cod_siope_tipo_analogico_doc,
  desc_siope_tipo_analogico_doc, 
  desc_siope_tipo_ana_bnkit_doc,
  cod_siope_tipo_debito_subdoc, 
  desc_siope_tipo_debito_subdoc, 
  desc_siope_tipo_deb_bnkit_sub,
  cod_siope_ass_motiv_subdoc, 
  desc_siope_ass_motiv_subdoc, 
  desc_siope_ass_motiv_bnkit_sub,
  cod_siope_scad_motiv_subdoc, 
  desc_siope_scad_motiv_subdoc, 
  desc_siope_scad_moti_bnkit_sub) 
select  
tb.v_ente_proprietario_id::INTEGER,
trim(tb.v_ente_denominazione::VARCHAR)::VARCHAR,
trim(tb.v_anno_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_num_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_oggetto_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_cod_tipo_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_desc_tipo_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_cod_cdr_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_desc_cdr_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_cod_cdc_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_desc_cdc_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_note_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_cod_stato_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_desc_stato_atto_amministrativo::VARCHAR)::VARCHAR,
trim(tb.v_causale_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_altri_allegati_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_dati_sensibili_atto_allegato::VARCHAR)::VARCHAR,
tb.v_data_scadenza_atto_allegato::timestamp,
trim(tb.v_note_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_annotazioni_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_pratica_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_resp_amm_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_resp_contabile_atto_allegato::VARCHAR)::VARCHAR,
tb.v_anno_titolario_atto_allegato::INTEGER,
trim(tb.v_num_titolario_atto_allegato::VARCHAR)::VARCHAR,
tb.v_vers_invio_firma_atto_allegato::INTEGER,
trim(tb.v_cod_stato_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_desc_stato_atto_allegato::VARCHAR)::VARCHAR,
tb.v_sogg_id_atto_allegato::INTEGER,
trim(tb.v_cod_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_tipo_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_stato_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_rag_sociale_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_p_iva_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_cf_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_cf_estero_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_nome_sogg_atto_allegato::VARCHAR)::VARCHAR,
trim(tb.v_cognome_sogg_atto_allegato::VARCHAR)::VARCHAR,
tb.v_anno_doc::INTEGER,
trim(tb.v_num_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_doc::VARCHAR)::VARCHAR,
tb.v_importo_doc::NUMERIC,
trim(tb.v_beneficiario_multiplo_doc::VARCHAR)::VARCHAR,
tb.v_data_emissione_doc::TIMESTAMP,
tb.v_data_scadenza_doc::TIMESTAMP,
trim(tb.v_codice_bollo_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_codice_bollo_doc::VARCHAR)::VARCHAR,
tb.v_collegato_cec_doc,
trim(tb.v_cod_pcc_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_pcc_doc::VARCHAR)::VARCHAR,
trim(tb.v_cod_ufficio_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_ufficio_doc::VARCHAR)::VARCHAR,
trim(tb.v_cod_stato_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_stato_doc::VARCHAR)::VARCHAR,
tb.v_anno_elenco_doc::INTEGER,
tb.v_num_elenco_doc::INTEGER,
tb.v_data_trasmissione_elenco_doc::TIMESTAMP,
tb.v_tot_quote_entrate_elenco_doc::NUMERIC,
tb.v_tot_quote_spese_elenco_doc::NUMERIC,
tb.v_tot_da_pagare_elenco_doc::NUMERIC,
tb.v_tot_da_incassare_elenco_doc::NUMERIC,
trim(tb.v_cod_stato_elenco_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_stato_elenco_doc::VARCHAR)::VARCHAR,
trim(tb.v_cod_gruppo_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_famiglia_doc::VARCHAR)::VARCHAR,
trim(tb.v_cod_famiglia_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_gruppo_doc::VARCHAR)::VARCHAR,           
trim(tb.v_cod_tipo_doc::VARCHAR)::VARCHAR,
trim(tb.v_desc_tipo_doc::VARCHAR)::VARCHAR,
tb.v_sogg_id_doc::INTEGER,
trim(tb.v_cod_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_tipo_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_stato_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_rag_sociale_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_p_iva_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_cf_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_cf_estero_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_nome_sogg_doc::VARCHAR)::VARCHAR,
trim(tb.v_cognome_sogg_doc::VARCHAR)::VARCHAR,
tb.v_num_subdoc::INTEGER,
trim(tb.v_desc_subdoc::VARCHAR)::VARCHAR,
tb.v_importo_subdoc::NUMERIC,
trim(tb.v_num_reg_iva_subdoc::VARCHAR)::VARCHAR,
tb.v_data_scadenza_subdoc::TIMESTAMP,
trim(tb.v_convalida_manuale_subdoc::VARCHAR)::VARCHAR,
tb.v_importo_da_dedurre_subdoc::NUMERIC,
tb.v_splitreverse_importo_subdoc::NUMERIC,
tb.v_pagato_cec_subdoc,
tb.v_data_pagamento_cec_subdoc::TIMESTAMP,
trim(tb.v_note_tesoriere_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_cod_distinta_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_desc_distinta_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_tipo_commissione_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_conto_tesoreria_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_rilevante_iva::VARCHAR)::VARCHAR,
trim(tb.v_ordinativo_singolo::VARCHAR)::VARCHAR,
trim(tb.v_ordinativo_manuale::VARCHAR)::VARCHAR,
trim(tb.v_esproprio::VARCHAR)::VARCHAR,
trim(tb.v_note::VARCHAR)::VARCHAR,
trim(tb.v_cig::VARCHAR)::VARCHAR,
trim(tb.v_cup::VARCHAR)::VARCHAR,
trim(tb.v_causale_sospensione::VARCHAR)::VARCHAR,
trim(tb.v_data_sospensione::VARCHAR)::VARCHAR,
trim(tb.v_data_riattivazione::VARCHAR)::VARCHAR,
trim(tb.v_causale_ordinativo::VARCHAR)::VARCHAR,
tb.v_num_mutuo::INTEGER,
trim(tb.v_annotazione::VARCHAR)::VARCHAR,
trim(tb.v_certificazione::VARCHAR)::VARCHAR,
trim(tb.v_data_certificazione::VARCHAR)::VARCHAR,
trim(tb.v_note_certificazione::VARCHAR)::VARCHAR,
trim(tb.v_num_certificazione::VARCHAR)::VARCHAR,
trim(tb.v_data_scadenza_dopo_sospensione::VARCHAR)::VARCHAR,
trim(tb.v_data_esecuzione_pagamento::VARCHAR)::VARCHAR,
trim(tb.v_avviso::VARCHAR)::VARCHAR,
trim(tb.v_cod_tipo_avviso::VARCHAR)::VARCHAR,
trim(tb.v_desc_tipo_avviso::VARCHAR)::VARCHAR,
tb.v_soggetto_id::INTEGER,
trim(tb.v_cod_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_tipo_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_stato_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_rag_sociale_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_p_iva_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_cf_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_cf_estero_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_nome_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_cognome_sogg_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_sede_secondaria_subdoc::VARCHAR)::VARCHAR,
trim(tb.v_bil_anno::VARCHAR)::VARCHAR,
tb.v_anno_impegno::INTEGER,
tb.v_num_impegno::NUMERIC,
trim(tb.v_cod_impegno::VARCHAR)::VARCHAR,
trim(tb.v_desc_impegno::VARCHAR)::VARCHAR,
trim(tb.v_cod_subimpegno::VARCHAR)::VARCHAR,
trim(tb.v_desc_subimpegno::VARCHAR)::VARCHAR,
tb.v_num_liquidazione::NUMERIC,
trim(tb.v_cod_tipo_accredito::VARCHAR)::VARCHAR,
trim(tb.v_desc_tipo_accredito::VARCHAR)::VARCHAR,
tb.v_mod_pag_id::INTEGER,
trim(tb.v_quietanziante::VARCHAR)::VARCHAR,
tb.v_data_nasciata_quietanziante::TIMESTAMP,
trim(tb.v_luogo_nascita_quietanziante::VARCHAR)::VARCHAR,
trim(tb.v_stato_nascita_quietanziante::VARCHAR)::VARCHAR,
trim(tb.v_bic::VARCHAR)::VARCHAR,
trim(tb.v_contocorrente::VARCHAR)::VARCHAR,
trim(tb.v_intestazione_contocorrente::VARCHAR)::VARCHAR,
trim(tb.v_iban::VARCHAR)::VARCHAR,
trim(tb.v_note_mod_pag::VARCHAR)::VARCHAR,
tb.v_data_scadenza_mod_pag::TIMESTAMP,
tb.v_soggetto_id_modpag::INTEGER,
trim(tb.v_cod_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_tipo_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_stato_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_rag_sociale_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_p_iva_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_cf_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_cf_estero_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_nome_sogg_mod_pag::VARCHAR)::VARCHAR,
trim(tb.v_cognome_sogg_mod_pag::VARCHAR)::VARCHAR,
tb.v_anno_liquidazione::INTEGER,
trim(tb.v_bil_anno_ord::VARCHAR)::VARCHAR,
tb.v_anno_ord::INTEGER, 
tb.v_num_ord::NUMERIC, 
trim(tb.v_num_subord::VARCHAR)::VARCHAR,
--nuova sezione coge 26-09-2016
trim(tb.v_registro_repertorio::VARCHAR)::VARCHAR,
trim(tb.v_anno_repertorio::VARCHAR)::VARCHAR,
trim(tb.v_num_repertorio::VARCHAR)::VARCHAR,
trim(tb.v_data_repertorio::VARCHAR)::VARCHAR,
trim(tb.v_data_ricezione_portale::VARCHAR)::VARCHAR,
trim(tb.v_doc_contabilizza_genpcc::VARCHAR)::VARCHAR,
-- CR 854
tb.rudoc_registrazione_anno::INTEGER,
tb.rudoc_registrazione_numero::INTEGER,
tb.rudoc_registrazione_data::TIMESTAMP,
trim(tb.cdc_code::VARCHAR)::VARCHAR,
trim(tb.cdc_desc::VARCHAR)::VARCHAR,
trim(tb.cdr_code::VARCHAR)::VARCHAR,
trim(tb.cdr_desc::VARCHAR)::VARCHAR,
trim(tb.v_dataOperazionePagamentoIncasso::VARCHAR)::VARCHAR,
trim(tb.v_flagPagataIncassata::VARCHAR)::VARCHAR,
trim(tb.v_notePagamentoIncasso::VARCHAR)::VARCHAR,
---- SIAC-5229
tb.v_arrotondamento,
-------------
trim(tb.v_cod_tipo_splitrev::VARCHAR)::VARCHAR,
trim(tb.v_desc_tipo_splitrev::VARCHAR)::VARCHAR,
trim(tb.v_liq_stato_desc::VARCHAR)::VARCHAR,
tb.doc_sdi_lotto_siope,
tb.siope_documento_tipo_code, 
tb.siope_documento_tipo_desc, 
tb.siope_documento_tipo_desc_bnkit,
tb.siope_documento_tipo_analogico_code, 
tb.siope_documento_tipo_analogico_desc, 
tb.siope_documento_tipo_analogico_desc_bnkit,
tb.siope_tipo_debito_code, 
tb.siope_tipo_debito_desc, 
tb.siope_tipo_debito_desc_bnkit,
tb.siope_assenza_motivazione_code, 
tb.siope_assenza_motivazione_desc, 
tb.siope_assenza_motivazione_desc_bnkit,
tb.siope_scadenza_motivo_code, 
tb.siope_scadenza_motivo_desc, 
tb.siope_scadenza_motivo_desc_bnkit            
from (
with doc as (
  with doc1 as (
select distinct
  --h.subdoc_id,a.doc_id,b.doc_tipo_id,c.doc_fam_tipo_id,d.doc_gruppo_tipo_id,e.doc_stato_r_id,f.doc_stato_id,
  b.doc_gruppo_tipo_id,
  g.ente_proprietario_id, g.ente_denominazione,
  a.doc_anno, a.doc_numero, a.doc_desc, a.doc_importo, 
  case when a.doc_beneficiariomult= false then 'F' else 'T' end doc_beneficiariomult,
  a.doc_data_emissione, a.doc_data_scadenza, 
  case when a.doc_collegato_cec = false then 'F' else 'T' end doc_collegato_cec,
  f.doc_stato_code, f.doc_stato_desc, 
  c.doc_fam_tipo_code, c.doc_fam_tipo_desc, b.doc_tipo_code, b.doc_tipo_desc,
  a.doc_id, a.pcccod_id, a.pccuff_id,
  case when a.doc_contabilizza_genpcc= false then 'F' else 'T' end doc_contabilizza_genpcc,
  h.subdoc_numero, h.subdoc_desc, h.subdoc_importo, h.subdoc_nreg_iva, h.subdoc_data_scadenza,
  h.subdoc_convalida_manuale, h.subdoc_importo_da_dedurre, h.subdoc_splitreverse_importo,
  case when h.subdoc_pagato_cec = false then 'F' else 'T' end subdoc_pagato_cec,
  h.subdoc_data_pagamento_cec,
  a.codbollo_id, h.subdoc_id,h.comm_tipo_id,
  h.notetes_id,h.dist_id,h.contotes_id,
  a.doc_sdi_lotto_siope,
  n.siope_documento_tipo_code, n.siope_documento_tipo_desc, n.siope_documento_tipo_desc_bnkit,
  o.siope_documento_tipo_analogico_code, o.siope_documento_tipo_analogico_desc, o.siope_documento_tipo_analogico_desc_bnkit,
  i.siope_tipo_debito_code, i.siope_tipo_debito_desc, i.siope_tipo_debito_desc_bnkit,
  l.siope_assenza_motivazione_code, l.siope_assenza_motivazione_desc, l.siope_assenza_motivazione_desc_bnkit,
  m.siope_scadenza_motivo_code, m.siope_scadenza_motivo_desc, m.siope_scadenza_motivo_desc_bnkit
  from siac_t_doc a
  left join siac_d_siope_documento_tipo n on n.siope_documento_tipo_id = a.siope_documento_tipo_id
                                     and n.data_cancellazione is null
                                     and n.validita_fine is null
  left join siac_d_siope_documento_tipo_analogico o on o.siope_documento_tipo_analogico_id = a.siope_documento_tipo_analogico_id
                                             and o.data_cancellazione is null
                                             and o.validita_fine is null
  ,siac_d_doc_tipo b,siac_d_doc_fam_tipo c,
  --siac_d_doc_gruppo d,
  siac_r_doc_stato e,
  siac_d_doc_stato f,
  siac_t_ente_proprietario g,
  siac_t_subdoc h
  left join siac_d_siope_tipo_debito i on i.siope_tipo_debito_id = h.siope_tipo_debito_id
                                     and i.data_cancellazione is null
                                     and i.validita_fine is null
  left join siac_d_siope_assenza_motivazione l on l.siope_assenza_motivazione_id = h.siope_assenza_motivazione_id
                                             and l.data_cancellazione is null
                                             and l.validita_fine is null
  left join siac_d_siope_scadenza_motivo m on m.siope_scadenza_motivo_id = h.siope_scadenza_motivo_id
                                             and m.data_cancellazione is null
                                             and m.validita_fine is null                                             
  where b.doc_tipo_id=a.doc_tipo_id
  and c.doc_fam_tipo_id=b.doc_fam_tipo_id
  --and b.doc_gruppo_tipo_id=d.doc_gruppo_tipo_id
  and e.doc_id=a.doc_id
  and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
  and f.doc_stato_id=e.doc_stato_id
  and g.ente_proprietario_id=a.ente_proprietario_id
  and g.ente_proprietario_id=p_ente_proprietario_id--p_ente_proprietario_id
  AND c.doc_fam_tipo_code in ('S','IS')
  and h.doc_id=a.doc_id
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
  AND c.data_cancellazione IS NULL
  AND e.data_cancellazione IS NULL
  AND f.data_cancellazione IS NULL
  AND g.data_cancellazione IS NULL
  AND h.data_cancellazione IS NULL
)
, docgru as  (
select a.doc_gruppo_tipo_id, a.doc_gruppo_tipo_code, a.doc_gruppo_tipo_desc
 from siac_d_doc_gruppo a where a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null)
select doc1.*, docgru.* from doc1 left join docgru on 
docgru.doc_gruppo_tipo_id = doc1.doc_gruppo_tipo_id
  )
  ,bollo as (
  select a.codbollo_id,a.codbollo_code, a.codbollo_desc from siac_d_codicebollo a 
  where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null)
  ,sogg as (
  with sogg1 as (
  select distinct a.doc_id,b.soggetto_code, 
  --d.soggetto_tipo_desc, 
  f.soggetto_stato_desc,
  b.partita_iva, b.codice_fiscale, b.codice_fiscale_estero, 
   b.soggetto_id
   from 
  siac_r_doc_sog a, siac_t_soggetto b ,/*siac_r_soggetto_tipo c,
  siac_d_soggetto_tipo d,*/siac_r_soggetto_stato e ,siac_d_soggetto_stato f
  where 
  a.ente_proprietario_id=p_ente_proprietario_id 
  and a.soggetto_id=b.soggetto_id
 /* and c.soggetto_id=b.soggetto_id
  and d.soggetto_tipo_id=c.soggetto_tipo_id*/
  and e.soggetto_id=b.soggetto_id
  and f.soggetto_stato_id=e.soggetto_stato_id
  /*and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)*/
  and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
/*  AND c.data_cancellazione IS NULL
  AND d.data_cancellazione IS NULL*/
  AND e.data_cancellazione IS NULL
  AND f.data_cancellazione IS NULL
  --and b.soggetto_id=1862
  ),
  sogg2 as (
  select g.soggetto_id, g.ragione_sociale from  siac_t_persona_giuridica g 
  where g.ente_proprietario_id=p_ente_proprietario_id and g.data_cancellazione is null)
  ,sogg3 as (
  select h.soggetto_id,h.nome, h.cognome from siac_t_persona_fisica h
  where h.ente_proprietario_id=p_ente_proprietario_id and h.data_cancellazione is null
  ),
  sogg5 as (select 
c.soggetto_id,d.soggetto_tipo_desc 
 from siac_r_soggetto_tipo c,
  siac_d_soggetto_tipo d where c.ente_proprietario_id=p_ente_proprietario_id and 
  d.soggetto_tipo_id=c.soggetto_tipo_id
  and c.data_cancellazione is null 
  and d.data_cancellazione is NULL
  AND p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data) 
  )    
  select sogg1.*, sogg2.ragione_sociale,sogg3.nome, sogg3.cognome, sogg5.soggetto_tipo_desc
  from sogg1 left join sogg2 on sogg1.soggetto_id=sogg2.soggetto_id
  left join sogg3 on sogg1.soggetto_id=sogg3.soggetto_id
  left join sogg5 on sogg1.soggetto_id=sogg5.soggetto_id
  )
  , reguni as (select a.doc_id,a.rudoc_registrazione_anno,
  a.rudoc_registrazione_numero,a.rudoc_registrazione_data 
  from siac_t_registrounico_doc a where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null)
  , cdr as (
  select a.doc_id, b.classif_code doc_cdr_cdr_code, b.classif_desc doc_cdr_cdr_desc ,
  null   doc_cdr_cdc_code, null  doc_cdr_cdc_desc
  from siac_r_doc_class a, siac_t_class b, siac_d_class_tipo c
  where a.classif_id=b.classif_id
  and b.classif_tipo_id=c.classif_tipo_id
  and c.classif_tipo_code='CDR' 
  and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
  AND c.data_cancellazione IS NULL
  ),
  cdc as (
  select a.doc_id, b.classif_code doc_cdc_cdc_code, b.classif_desc doc_cdc_cdc_desc,   
  d.classif_code doc_cdc_cdr_code, d.classif_desc doc_cdc_cdr_desc  
  from siac_r_doc_class a, siac_t_class b, siac_d_class_tipo c, siac_t_class d,siac_r_class_fam_tree e
  where a.classif_id=b.classif_id
  and b.classif_tipo_id=c.classif_tipo_id
  and c.classif_tipo_code='CDC' 
  and b.classif_id=e.classif_id
  and d.classif_id=e.classif_id_padre
  and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
  and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
  AND c.data_cancellazione IS NULL
  AND d.data_cancellazione IS NULL
  AND e.data_cancellazione IS NULL)
  ,pcccod as (select a.pcccod_id,a.pcccod_code,a.pcccod_desc from 
  siac_d_pcc_codice  a where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null)
  , pccuff as (
  select a.pccuff_id,a.pccuff_code,a.pccuff_desc from
  siac_d_pcc_ufficio  a where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null)
  , attoamm as (
  with attoamm1 as (
  select 
  b.attoamm_id,
  a.subdoc_id,  b.attoamm_anno, b.attoamm_numero, b.attoamm_oggetto, b.attoamm_note,
  d.attoamm_stato_code, d.attoamm_stato_desc,
  e.attoamm_tipo_code, e.attoamm_tipo_desc
  from 
  siac_r_subdoc_atto_amm a ,siac_t_atto_amm b ,siac_r_atto_amm_stato c ,siac_d_atto_amm_stato d,
  siac_d_atto_amm_tipo e
  where 
  a.ente_proprietario_id=p_ente_proprietario_id and 
  a.attoamm_id=b.attoamm_id and c.attoamm_id=b.attoamm_id
  and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)
  and d.attoamm_stato_id=c.attoamm_stato_id
  and e.attoamm_tipo_id=b.attoamm_tipo_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null
  ),
cdr as (
  select a.attoamm_id, b.classif_code attoamm_cdr_cdr_code, b.classif_desc attoamm_cdr_cdr_desc ,
  null::varchar  attoamm_cdr_cdc_code, null::varchar attoamm_cdr_cdc_desc
  from siac_r_atto_amm_class a, siac_t_class b, siac_d_class_tipo c
  where a.classif_id=b.classif_id
  and b.classif_tipo_id=c.classif_tipo_id
  and c.classif_tipo_code='CDR' 
  -- and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data) -- SIAC-5494
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
  AND c.data_cancellazione IS NULL
  ),
  cdc as (
  select a.attoamm_id, b.classif_code attoamm_cdc_cdc_code, b.classif_desc attoamm_cdc_cdc_desc,   
  d.classif_code attoamm_cdc_cdr_code, d.classif_desc attoamm_cdc_cdr_desc  
  from siac_r_atto_amm_class a, siac_t_class b, siac_d_class_tipo c, siac_t_class d,siac_r_class_fam_tree e
  where a.classif_id=b.classif_id
  and b.classif_tipo_id=c.classif_tipo_id
  and c.classif_tipo_code='CDC' 
  and b.classif_id=e.classif_id
  and d.classif_id=e.classif_id_padre
  -- and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data) -- SIAC-5494
  -- and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data) -- SIAC-5494
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
  AND c.data_cancellazione IS NULL
  AND d.data_cancellazione IS NULL
  AND e.data_cancellazione IS NULL
  )
  select   attoamm1.*,
  case when cdr.attoamm_cdr_cdr_code is null then cdc.attoamm_cdc_cdc_code::varchar else null::varchar end attoamm_cdc_code,
  case when cdr.attoamm_cdr_cdr_code is null then cdc.attoamm_cdc_cdc_desc::varchar else null::varchar end attoamm_cdc_desc,
  case when cdr.attoamm_cdr_cdr_code is null then cdc.attoamm_cdc_cdr_code::varchar else cdr.attoamm_cdr_cdr_code::varchar end attoamm_cdr_code,
  case when cdr.attoamm_cdr_cdr_code is null then cdc.attoamm_cdc_cdr_desc::varchar else cdr.attoamm_cdr_cdr_desc::varchar end attoamm_cdr_desc
  from attoamm1   
  left join cdc on attoamm1.attoamm_id=cdc.attoamm_id
  left join cdr on attoamm1.attoamm_id=cdr.attoamm_id
  ),
  commt as (select a.comm_tipo_id,a.comm_tipo_code,a.comm_tipo_desc
   from siac_d_commissione_tipo a where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null)
  , 
  eldocattall as (
  with eldoc as (
  select a.subdoc_id,a.eldoc_id,
  b.eldoc_anno, b.eldoc_numero, b.eldoc_data_trasmissione, b.eldoc_tot_quoteentrate,
  b.eldoc_tot_quotespese, b.eldoc_tot_dapagare, b.eldoc_tot_daincassare,
  d.eldoc_stato_code, d.eldoc_stato_desc
   from 
  siac_r_elenco_doc_subdoc a,siac_t_elenco_doc b, siac_r_elenco_doc_stato c, 
  siac_d_elenco_doc_stato d
  where 
  a.ente_proprietario_id=p_ente_proprietario_id and
  b.eldoc_id=a.eldoc_id
  and c.eldoc_id=b.eldoc_id
  and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data) 
  and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)
  and d.eldoc_stato_id=c.eldoc_stato_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  ),
  attoal as (with attoall as (
select distinct
  a.eldoc_id,b.attoal_id,
  b.attoal_causale, b.attoal_altriallegati, b.attoal_dati_sensibili,
         b.attoal_data_scadenza, b.attoal_note, b.attoal_annotazioni, b.attoal_pratica,
         b.attoal_responsabile_amm, b.attoal_responsabile_con, b.attoal_titolario_anno,
         b.attoal_titolario_numero, b.attoal_versione_invio_firma,
         d.attoal_stato_code, d.attoal_stato_desc
   from
  siac_r_atto_allegato_elenco_doc a, siac_t_atto_allegato b,
  siac_r_atto_allegato_stato c ,siac_d_atto_allegato_stato d
  where a.ente_proprietario_id=p_ente_proprietario_id and
  a.attoal_id=b.attoal_id
  and c.attoal_id=b.attoal_id 
  and d.attoal_stato_id=c.attoal_stato_id
  and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)
  and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data) 
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  ),
  soggattoall as (
  with sogg1 as (
  select distinct a.attoal_id,b.soggetto_code soggetto_code_atto_allegato, 
  /*d.soggetto_tipo_desc soggetto_tipo_desc_atto_allegato, */
  f.soggetto_stato_desc soggetto_stato_desc_atto_allegato,
  b.partita_iva partita_iva_atto_allegato, b.codice_fiscale codice_fiscale_atto_allegato, 
  b.codice_fiscale_estero codice_fiscale_estero_atto_allegato, 
   b.soggetto_id soggetto_id_atto_allegato
   from 
  siac_r_atto_allegato_sog a, siac_t_soggetto b ,/*siac_r_soggetto_tipo c,
  siac_d_soggetto_tipo d,*/siac_r_soggetto_stato e ,siac_d_soggetto_stato f
  where 
  a.ente_proprietario_id=p_ente_proprietario_id 
  and a.soggetto_id=b.soggetto_id
  /*and c.soggetto_id=b.soggetto_id
  and d.soggetto_tipo_id=c.soggetto_tipo_id*/
  and e.soggetto_id=b.soggetto_id
  and f.soggetto_stato_id=e.soggetto_stato_id
  /*and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)*/
  and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
/*  AND c.data_cancellazione IS NULL
  AND d.data_cancellazione IS NULL*/
  AND e.data_cancellazione IS NULL
  AND f.data_cancellazione IS NULL
  --and b.soggetto_id=1862
  ),
  sogg2 as (
  select g.soggetto_id, g.ragione_sociale  from  siac_t_persona_giuridica g 
  where g.ente_proprietario_id=p_ente_proprietario_id and g.data_cancellazione is null)
  ,sogg3 as (
  select h.soggetto_id,h.nome, h.cognome from siac_t_persona_fisica h
  where h.ente_proprietario_id=p_ente_proprietario_id and h.data_cancellazione is null
  ),
  sogg5 as (select 
	c.soggetto_id,d.soggetto_tipo_desc 
 from siac_r_soggetto_tipo c,
  siac_d_soggetto_tipo d where c.ente_proprietario_id=p_ente_proprietario_id and 
  d.soggetto_tipo_id=c.soggetto_tipo_id
  and c.data_cancellazione is null 
  and d.data_cancellazione is NULL
  AND p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data) 
  )    
  select sogg1.*, sogg2.ragione_sociale ragione_sociale_atto_allegato,sogg3.nome nome_atto_allegato, 
  sogg3.cognome cognome_atto_allegato, sogg5.soggetto_tipo_desc soggetto_tipo_desc_atto_allegato
  from sogg1 left join sogg2 on sogg1.soggetto_id_atto_allegato=sogg2.soggetto_id
  left join sogg3 on sogg1.soggetto_id_atto_allegato=sogg3.soggetto_id
  left join sogg5 on sogg1.soggetto_id_atto_allegato=sogg5.soggetto_id
  ) 
  select attoall.*,soggattoall.ragione_sociale_atto_allegato,soggattoall.nome_atto_allegato,
  soggattoall.cognome_atto_allegato,   soggattoall.soggetto_code_atto_allegato, 
  soggattoall.soggetto_tipo_desc_atto_allegato, 
  soggattoall.soggetto_stato_desc_atto_allegato,
  soggattoall.partita_iva_atto_allegato, soggattoall.codice_fiscale_atto_allegato, 
  soggattoall.codice_fiscale_estero_atto_allegato, 
  soggattoall.soggetto_id_atto_allegato from attoall left join soggattoall
  on attoall.attoal_id=soggattoall.attoal_id
  )
  select distinct eldoc.*,
  attoal.attoal_id,
  attoal.attoal_causale, attoal.attoal_altriallegati, attoal.attoal_dati_sensibili,
         attoal.attoal_data_scadenza, attoal.attoal_note, attoal.attoal_annotazioni, attoal.attoal_pratica,
         attoal.attoal_responsabile_amm, attoal.attoal_responsabile_con, attoal.attoal_titolario_anno,
         attoal.attoal_titolario_numero, attoal.attoal_versione_invio_firma,
         attoal.attoal_stato_code, attoal.attoal_stato_desc,
   attoal.ragione_sociale_atto_allegato,attoal.nome_atto_allegato,attoal.cognome_atto_allegato,
   attoal.soggetto_code_atto_allegato, 
  attoal.soggetto_tipo_desc_atto_allegato, 
  attoal.soggetto_stato_desc_atto_allegato,
  attoal.partita_iva_atto_allegato, attoal.codice_fiscale_atto_allegato, 
  attoal.codice_fiscale_estero_atto_allegato, 
  attoal.soggetto_id_atto_allegato
   from eldoc left join attoal
  on eldoc.eldoc_id=attoal.eldoc_id
  ),
  notes as (
  select a.notetes_id,a.notetes_desc from 
  siac.siac_d_note_tesoriere a
  where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null)
  , dist as (
  select a.dist_id,a.dist_code, a.dist_desc from siac_d_distinta a
  where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null)
  , contes as (
  select a.contotes_id,a.contotes_desc from siac_d_contotesoreria  a
  where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null),
  split as (select 
  a.subdoc_id,b.sriva_tipo_code , b.sriva_tipo_desc from  siac_r_subdoc_splitreverse_iva_tipo a,
  siac_d_splitreverse_iva_tipo b
  where a.ente_proprietario_id=p_ente_proprietario_id and a.data_cancellazione is null
  and b.sriva_tipo_id=a.sriva_tipo_id
  and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data) 
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
  , liq as (  select  a.subdoc_id,b.liq_anno,b.liq_numero ,d.liq_stato_desc
  from siac.siac_r_subdoc_liquidazione a ,siac_t_liquidazione b,siac_r_liquidazione_stato c ,
  siac_d_liquidazione_stato d
  where a.ente_proprietario_id=p_ente_proprietario_id 
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and b.liq_id=a.liq_id
  and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
  and c.liq_id=b.liq_id
  and d.liq_stato_id=c.liq_stato_id
  --and d.liq_stato_code<>'A'
  and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)
),
subcltipoavviso as (select a.subdoc_id,b.classif_code cod_tipo_avviso,b.classif_desc desc_tipo_avviso
 from siac_r_subdoc_class a, siac_t_class b,siac_d_class_tipo c
where a.ente_proprietario_id=p_ente_proprietario_id and b.classif_id=a.classif_id
and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data) 
and c.classif_tipo_id=b.classif_tipo_id
and c.classif_tipo_code='TIPO_AVVISO'
and a.data_cancellazione is null
and b.data_cancellazione is null
and c.data_cancellazione is null
),
docattr1 as (
SELECT distinct a.doc_id, 
a.testo v_registro_repertorio
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'registro_repertorio' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr2 as (
SELECT distinct a.doc_id, 
a.numerico v_anno_repertorio
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'anno_repertorio' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr3 as (
SELECT distinct a.doc_id, 
a.testo v_num_repertorio
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'num_repertorio' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr4 as (
SELECT distinct a.doc_id, 
a.testo v_data_repertorio
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'data_repertorio' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr5 as (
SELECT distinct a.doc_id, 
a.testo v_data_ricezione_portale
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'dataRicezionePortale' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr6 as (
SELECT distinct a.doc_id, 
a.testo v_dataOperazionePagamentoIncasso
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'dataOperazionePagamentoIncasso' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr7 as (
SELECT distinct a.doc_id, 
a."boolean" v_flagPagataIncassata
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagPagataIncassata' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr8 as (
SELECT distinct a.doc_id, 
a.testo v_notePagamentoIncasso
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'notePagamentoIncasso' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),
docattr9 as (
SELECT distinct a.doc_id, 
a.numerico v_arrotondamento
 FROM   siac.siac_r_doc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'arrotondamento' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)

,subdocattr1 as (
SELECT distinct a.subdoc_id,
a."boolean" v_rilevante_iva
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagRilevanteIVA' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr2 as (
SELECT a.subdoc_id, a.subdoc_attr_id,
a."boolean" v_ordinativo_singolo
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagOrdinativoSingolo' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)

,subdocattr3 as (
SELECT distinct a.subdoc_id,
a."boolean" v_esproprio
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagEsproprio' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr4 as (
SELECT distinct a.subdoc_id,
a."boolean" v_certificazione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagCertificazione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr5 as (
SELECT distinct a.subdoc_id,
a."boolean" v_ordinativo_manuale
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagOrdinativoManuale' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr6 as (
SELECT distinct a.subdoc_id,
a."boolean" v_avviso
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'flagAvviso' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr7 as (
SELECT distinct a.subdoc_id,
a.numerico v_num_mutuo
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'numeroMutuo' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr8 as (
SELECT distinct a.subdoc_id,
a.testo v_cup
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'cup' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr9 as (
SELECT distinct a.subdoc_id,
a.testo v_cig
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'cig' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr10 as (
SELECT distinct a.subdoc_id,
a.testo v_note_certificazione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'noteCertificazione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
)
,subdocattr11 as (
/*SELECT distinct a.subdoc_id,
a.testo v_data_sospensione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'data_sospensione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)*/
select a.subdoc_id,to_char(a.subdoc_sosp_data,'dd/mm/yyyy') v_data_sospensione from 
siac_t_subdoc_sospensione a where a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null
and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)    
),subdocattr12 as (
SELECT distinct a.subdoc_id,
a.testo v_data_esecuzione_pagamento
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'dataEsecuzionePagamento' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr13 as (
SELECT distinct a.subdoc_id,
a.testo v_annotazione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'annotazione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr14 as (
SELECT distinct a.subdoc_id,
a.testo v_num_certificazione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'numeroCertificazione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr15 as (
SELECT distinct a.subdoc_id,
a.testo v_data_scadenza_dopo_sospensione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'dataScadenzaDopoSospensione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr16 as (
/*SELECT distinct a.subdoc_id,
a.testo v_data_riattivazione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'data_riattivazione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)*/
select a.subdoc_id,to_char(a.subdoc_sosp_data_riattivazione,'dd/mm/yyyy')  v_data_riattivazione
from 
siac_t_subdoc_sospensione a where a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null
and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)    
),subdocattr17 as (
SELECT distinct a.subdoc_id,
a.testo v_causale_ordinativo
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'causaleOrdinativo' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr18 as (
SELECT distinct a.subdoc_id,
a.testo v_note
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'Note' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr19 as (
SELECT distinct a.subdoc_id,
a.testo v_data_certificazione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'dataCertificazione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
),subdocattr20 as (
/*SELECT distinct a.subdoc_id,
a.testo v_causale_sospensione
 FROM   siac.siac_r_subdoc_attr a, siac.siac_t_attr b, siac.siac_d_attr_tipo c
    WHERE  
    a.ente_proprietario_id=p_ente_proprietario_id and b.attr_code = 'causale_sospensione' and  
    a.attr_id = b.attr_id
    AND    b.attr_tipo_id = c.attr_tipo_id
    AND    a.data_cancellazione IS NULL
    AND    b.data_cancellazione IS NULL
    AND    c.data_cancellazione IS NULL
    AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)*/
select a.subdoc_id,a.subdoc_sosp_causale v_causale_sospensione from 
siac_t_subdoc_sospensione a where a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null
and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)    
)
,soggsub as (
  with sogg1 as (
  select distinct a.subdoc_id,b.soggetto_code soggetto_code_subdoc, 
  f.soggetto_stato_desc soggetto_stato_desc_subdoc,
  b.partita_iva partita_iva_subdoc, b.codice_fiscale codice_fiscale_subdoc, 
  b.codice_fiscale_estero codice_fiscale_estero_subdoc, 
   b.soggetto_id soggetto_id_subdoc
   from 
  siac_r_subdoc_sog a, siac_t_soggetto b ,siac_r_soggetto_stato e ,siac_d_soggetto_stato f
  where 
  a.ente_proprietario_id=p_ente_proprietario_id 
  and a.soggetto_id=b.soggetto_id
  and e.soggetto_id=b.soggetto_id
  and f.soggetto_stato_id=e.soggetto_stato_id
  and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
  AND a.data_cancellazione IS NULL
  AND b.data_cancellazione IS NULL
    AND e.data_cancellazione IS NULL
  AND f.data_cancellazione IS NULL
  --and b.soggetto_id=1862
  ),
  sogg2 as (
  select g.soggetto_id, g.ragione_sociale ragione_sociale_subdoc  from  siac_t_persona_giuridica g 
  where g.ente_proprietario_id=p_ente_proprietario_id and g.data_cancellazione is null)
  ,sogg3 as (
  select h.soggetto_id,h.nome nome_subdoc, h.cognome cognome_subdoc from siac_t_persona_fisica h
  where h.ente_proprietario_id=p_ente_proprietario_id and h.data_cancellazione is null
  ),
  sogg4 as (
  SELECT a.soggetto_id_da, a.soggetto_id_a
    FROM siac.siac_r_soggetto_relaz a, siac.siac_d_relaz_tipo b
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and 
    a.relaz_tipo_id = b.relaz_tipo_id
    AND   b.relaz_tipo_code  = 'SEDE_SECONDARIA'
    AND   p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
    AND   p_data BETWEEN b.validita_inizio AND COALESCE(b.validita_fine, p_data)
    AND   a.data_cancellazione IS NULL
    AND   b.data_cancellazione IS NULL)
    ,
sogg5 as (select 
c.soggetto_id,d.soggetto_tipo_desc soggetto_tipo_desc_subdoc
 from siac_r_soggetto_tipo c,
  siac_d_soggetto_tipo d where c.ente_proprietario_id=p_ente_proprietario_id and 
  d.soggetto_tipo_id=c.soggetto_tipo_id
  and c.data_cancellazione is null 
  and d.data_cancellazione is NULL
  AND p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data) 
  )    
  select sogg1.*, sogg2.ragione_sociale_subdoc,sogg3.nome_subdoc, sogg3.cognome_subdoc,
  case when sogg4.soggetto_id_da is not null then 'S' else NULL::varchar end v_sede_secondaria_subdoc
  , sogg5.soggetto_tipo_desc_subdoc
  from sogg1 left join sogg2 on sogg1.soggetto_id_subdoc=sogg2.soggetto_id
  left join sogg3 on sogg1.soggetto_id_subdoc=sogg3.soggetto_id
  left join sogg4 on sogg1.soggetto_id_subdoc=sogg4.soggetto_id_a
  left join sogg5 on sogg1.soggetto_id_subdoc=sogg5.soggetto_id
  ),
  imp as (select distinct 
  c.movgest_id,b.movgest_ts_id,
a.subdoc_id,
case when g.movgest_ts_tipo_code ='T' then b.movgest_ts_code else NULL::varchar end v_cod_impegno, 
case when g.movgest_ts_tipo_code ='T' then c.movgest_desc else NULL::varchar end v_desc_impegno, 
case when g.movgest_ts_tipo_code ='S' then b.movgest_ts_code else NULL::varchar end v_cod_subimpegno, 
case when g.movgest_ts_tipo_code ='S' then b.movgest_ts_desc else NULL::varchar end v_desc_subimpegno, 
e.anno v_bil_anno,
c.movgest_anno v_anno_impegno,
c.movgest_numero v_num_impegno,
g.movgest_ts_tipo_code
from 
siac_r_subdoc_movgest_ts a, siac_t_movgest_ts b, siac_t_movgest c, siac_t_bil d,
siac_t_periodo e, siac_d_movgest_tipo f, siac_d_movgest_ts_tipo g
where b.movgest_ts_id=A.movgest_ts_id
and p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
and c.movgest_id=b.movgest_id
and d.bil_id=c.bil_id
and e.periodo_id=d.periodo_id
and f.movgest_tipo_id=c.movgest_tipo_id
and g.movgest_ts_tipo_id=b.movgest_ts_tipo_id
and f.movgest_tipo_code = 'I'
and a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null
and b.data_cancellazione is null
and c.data_cancellazione is null
and d.data_cancellazione is null
and e.data_cancellazione is null
and f.data_cancellazione is null
and g.data_cancellazione is null),
modpag as (
with modpag0 as (
with modpag1 as (
SELECT 
a.subdoc_id,b.quietanziante, b.quietanzante_nascita_data, b.quietanziante_nascita_luogo, b.quietanziante_nascita_stato,
b.bic, b.contocorrente ,b.contocorrente_intestazione,b.iban , b.note , b.data_scadenza,b.accredito_tipo_id,
 b.soggetto_id,a.soggrelmpag_id, b.modpag_id 
FROM siac.siac_r_subdoc_modpag a, siac.siac_t_modpag b where 
a.ente_proprietario_id=p_ente_proprietario_id and 
b.modpag_id = a.modpag_id
AND p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
and a.data_cancellazione is NULL
and b.data_cancellazione is NULL
)
,actipo as (
select a.accredito_tipo_id,
a.accredito_tipo_code , 
a.accredito_tipo_desc
 from siac.siac_d_accredito_tipo a where a.ente_proprietario_id=p_ente_proprietario_id and 
a.data_cancellazione is NULL),
relmodpag as ( SELECT 
 a.soggrelmpag_id,
b.soggetto_id_a v_soggetto_id_modpag_cess
 FROM  siac.siac_r_soggrel_modpag a, siac.siac_r_soggetto_relaz b
 WHERE
a.ente_proprietario_id=p_ente_proprietario_id and
a.soggetto_relaz_id = b.soggetto_relaz_id
 AND   p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
 AND   a.data_cancellazione IS NULL
 AND   p_data BETWEEN b.validita_inizio AND COALESCE(b.validita_fine, p_data)
 AND   b.data_cancellazione IS NULL
 )
 select 
modpag1.subdoc_id, 
modpag1.quietanziante v_quietanziante, 
modpag1.quietanzante_nascita_data v_data_nasciata_quietanziante, 
modpag1.quietanziante_nascita_luogo v_luogo_nascita_quietanziante, 
modpag1.quietanziante_nascita_stato v_stato_nascita_quietanziante,
modpag1.bic v_bic, modpag1.contocorrente v_contocorrente, 
modpag1.contocorrente_intestazione v_intestazione_contocorrente,
modpag1.iban v_iban, modpag1.note v_note_mod_pag, modpag1.data_scadenza v_data_scadenza_mod_pag,
modpag1.accredito_tipo_id,
 modpag1.soggetto_id v_soggetto_id_modpag_nocess, 
modpag1.soggrelmpag_id v_soggrelmpag_id, modpag1.modpag_id v_mod_pag_id,
actipo.accredito_tipo_code v_cod_tipo_accredito, 
actipo.accredito_tipo_desc v_desc_tipo_accredito,
case when modpag1.soggrelmpag_id IS NULL THEN modpag1.soggetto_id else relmodpag.v_soggetto_id_modpag_cess
 end v_soggetto_id_modpag
 from modpag1 left join actipo
on modpag1.accredito_tipo_id=actipo.accredito_tipo_id
left join relmodpag on relmodpag.soggrelmpag_id=modpag1.soggrelmpag_id
) 
,
 soggmodpag as (
  with sogg1 as (
  select distinct b.soggetto_code, d.soggetto_tipo_desc, f.soggetto_stato_desc,
  b.partita_iva, b.codice_fiscale, b.codice_fiscale_estero, 
   b.soggetto_id
   from 
  siac_t_soggetto b ,siac_r_soggetto_tipo c,
  siac_d_soggetto_tipo d,siac_r_soggetto_stato e ,siac_d_soggetto_stato f
  where 
  b.ente_proprietario_id=p_ente_proprietario_id 
  and c.soggetto_id=b.soggetto_id
  and d.soggetto_tipo_id=c.soggetto_tipo_id
  and e.soggetto_id=b.soggetto_id
  and f.soggetto_stato_id=e.soggetto_stato_id
  and p_data BETWEEN c.validita_inizio AND COALESCE(c.validita_fine, p_data)
  and p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
  AND b.data_cancellazione IS NULL
  AND c.data_cancellazione IS NULL
  AND d.data_cancellazione IS NULL
  AND e.data_cancellazione IS NULL
  AND f.data_cancellazione IS NULL
  --and b.soggetto_id=1862
  ),
  sogg2 as (
  select g.soggetto_id, g.ragione_sociale from  siac_t_persona_giuridica g 
  where g.ente_proprietario_id=p_ente_proprietario_id and g.data_cancellazione is null)
  ,sogg3 as (
  select h.soggetto_id,h.nome, h.cognome from siac_t_persona_fisica h
  where h.ente_proprietario_id=p_ente_proprietario_id and h.data_cancellazione is null
  )
  select sogg1.*, sogg2.ragione_sociale,sogg3.nome, sogg3.cognome
  from sogg1 left join sogg2 on sogg1.soggetto_id=sogg2.soggetto_id
  left join sogg3 on sogg1.soggetto_id=sogg3.soggetto_id
  )
select modpag0.*,soggmodpag.soggetto_code v_cod_sogg_mod_pag, soggmodpag.soggetto_tipo_desc v_tipo_sogg_mod_pag, 
soggmodpag.soggetto_stato_desc v_stato_sogg_mod_pag, soggmodpag.ragione_sociale v_rag_sociale_sogg_mod_pag,
soggmodpag.partita_iva v_p_iva_sogg_mod_pag, soggmodpag.codice_fiscale v_cf_sogg_mod_pag, 
soggmodpag.codice_fiscale_estero v_cf_estero_sogg_mod_pag,
soggmodpag.nome v_nome_sogg_mod_pag, soggmodpag.cognome v_cognome_sogg_mod_pag
 from modpag0
left join soggmodpag on soggmodpag.soggetto_id=modpag0.v_soggetto_id_modpag
),
ord as (
SELECT 
a.subdoc_id,
c.ord_anno, c.ord_numero, b.ord_ts_code, g.anno
    FROM  siac_r_subdoc_ordinativo_ts a, siac_t_ordinativo_ts b, siac_t_ordinativo c,
          siac_r_ordinativo_stato d, siac_d_ordinativo_stato e,
          siac.siac_t_bil f, siac.siac_t_periodo g 
    WHERE b.ord_ts_id = a.ord_ts_id
    AND   c.ord_id = b.ord_id
    AND   d.ord_id = c.ord_id
    AND   d.ord_stato_id = e.ord_stato_id
    AND   c.bil_id = f.bil_id 
    AND   g.periodo_id = f.periodo_id 
    AND   e.ord_stato_code <> 'A'
    AND   a.data_cancellazione IS NULL
    AND   b.data_cancellazione IS NULL
    AND   c.data_cancellazione IS NULL
    AND   d.data_cancellazione IS NULL
    AND   e.data_cancellazione IS NULL
    AND   f.data_cancellazione IS NULL
    AND   g.data_cancellazione IS NULL
    AND   p_data between a.validita_inizio and COALESCE(a.validita_fine,p_data)
    AND   p_data between d.validita_inizio and COALESCE(d.validita_fine,p_data)
    )
  select doc.ente_proprietario_id v_ente_proprietario_id,
  doc.ente_denominazione v_ente_denominazione,
  doc.subdoc_id, 
  doc.doc_anno v_anno_doc, doc.doc_numero v_num_doc, 
  doc.doc_desc v_desc_doc,
  doc.doc_importo v_importo_doc,
  doc.doc_beneficiariomult v_beneficiario_multiplo_doc,
  doc.doc_data_emissione v_data_emissione_doc,
  doc.doc_data_scadenza v_data_scadenza_doc,
  bollo.codbollo_code v_codice_bollo_doc, bollo.codbollo_desc v_desc_codice_bollo_doc,
 doc.doc_collegato_cec v_collegato_cec_doc,
  pcccod.pcccod_code v_cod_pcc_doc,pcccod.pcccod_desc v_desc_pcc_doc
  ,pccuff.pccuff_code v_cod_ufficio_doc,pccuff.pccuff_desc v_desc_ufficio_doc,
  doc.doc_stato_code v_cod_stato_doc, doc.doc_stato_desc v_desc_stato_doc, 
   doc.doc_fam_tipo_code v_cod_famiglia_doc, doc.doc_fam_tipo_desc v_desc_famiglia_doc, 
doc.doc_tipo_code v_cod_tipo_doc, doc.doc_tipo_desc v_desc_tipo_doc,
doc.subdoc_numero v_num_subdoc, doc.subdoc_desc v_desc_subdoc,doc.subdoc_importo v_importo_subdoc,
doc.subdoc_nreg_iva v_num_reg_iva_subdoc, doc.subdoc_data_scadenza v_data_scadenza_subdoc,
doc.subdoc_convalida_manuale v_convalida_manuale_subdoc, doc.subdoc_importo_da_dedurre v_importo_da_dedurre_subdoc,
doc.subdoc_splitreverse_importo v_splitreverse_importo_subdoc,
doc.subdoc_pagato_cec v_pagato_cec_subdoc,
doc.subdoc_data_pagamento_cec v_data_pagamento_cec_subdoc,
doc.doc_contabilizza_genpcc v_doc_contabilizza_genpcc,
sogg.soggetto_id v_sogg_id_doc,sogg.soggetto_code v_cod_sogg_doc, sogg.soggetto_tipo_desc v_tipo_sogg_doc, 
sogg.soggetto_stato_desc v_stato_sogg_doc,sogg.ragione_sociale v_rag_sociale_sogg_doc,
sogg.partita_iva v_p_iva_sogg_doc, 
sogg.codice_fiscale v_cf_sogg_doc, 
sogg.codice_fiscale_estero v_cf_estero_sogg_doc, 
sogg.nome v_nome_sogg_doc, sogg.cognome v_cognome_sogg_doc, 
reguni.rudoc_registrazione_anno,reguni.rudoc_registrazione_numero,reguni.rudoc_registrazione_data,
case when cdr.doc_cdr_cdr_code is not null then null::varchar else cdc.doc_cdc_cdc_code::varchar end cdc_code,
case when cdr.doc_cdr_cdr_code is not null then null::varchar else cdc.doc_cdc_cdc_desc::varchar end cdc_desc,
case when cdr.doc_cdr_cdr_code is not null then cdr.doc_cdr_cdr_code::varchar else cdc.doc_cdc_cdr_code::varchar end cdr_code,
case when cdr.doc_cdr_cdr_code is not null then cdc.doc_cdc_cdr_code::varchar else cdc.doc_cdc_cdr_desc::varchar end cdr_desc,
attoamm.attoamm_anno v_anno_atto_amministrativo, attoamm.attoamm_numero v_num_atto_amministrativo, 
attoamm.attoamm_oggetto v_oggetto_atto_amministrativo, attoamm.attoamm_note v_note_atto_amministrativo,
attoamm.attoamm_stato_code v_cod_stato_atto_amministrativo, attoamm.attoamm_stato_desc v_desc_stato_atto_amministrativo,
attoamm.attoamm_tipo_code v_cod_tipo_atto_amministrativo, attoamm.attoamm_tipo_desc v_desc_tipo_atto_amministrativo,
attoamm.attoamm_cdc_code v_cod_cdc_atto_amministrativo,attoamm.attoamm_cdc_desc v_desc_cdc_atto_amministrativo,
attoamm.attoamm_cdr_code v_cod_cdr_atto_amministrativo,attoamm.attoamm_cdr_desc v_desc_cdr_atto_amministrativo,
commt.comm_tipo_code,commt.comm_tipo_desc v_tipo_commissione_subdoc,
eldocattall.subdoc_id,eldocattall.eldoc_id,
eldocattall.eldoc_anno v_anno_elenco_doc, 
eldocattall.eldoc_numero v_num_elenco_doc, 
eldocattall.eldoc_data_trasmissione v_data_trasmissione_elenco_doc, 
eldocattall.eldoc_tot_quoteentrate v_tot_quote_entrate_elenco_doc,
eldocattall.eldoc_tot_quotespese v_tot_quote_spese_elenco_doc, 
eldocattall.eldoc_tot_dapagare v_tot_da_pagare_elenco_doc, 
eldocattall.eldoc_tot_daincassare v_tot_da_incassare_elenco_doc,
eldocattall.eldoc_stato_code v_cod_stato_elenco_doc, 
eldocattall.eldoc_stato_desc v_desc_stato_elenco_doc,
eldocattall.attoal_id,
eldocattall.attoal_causale v_causale_atto_allegato, 
eldocattall.attoal_altriallegati v_altri_allegati_atto_allegato, eldocattall.attoal_dati_sensibili v_dati_sensibili_atto_allegato,
eldocattall.attoal_data_scadenza v_data_scadenza_atto_allegato, eldocattall.attoal_note v_note_atto_allegato, 
eldocattall.attoal_annotazioni v_annotazioni_atto_allegato, eldocattall.attoal_pratica v_pratica_atto_allegato,
eldocattall.attoal_responsabile_amm v_resp_amm_atto_allegato, eldocattall.attoal_responsabile_con v_resp_contabile_atto_allegato,
eldocattall.attoal_titolario_anno v_anno_titolario_atto_allegato,
eldocattall.attoal_titolario_numero v_num_titolario_atto_allegato, eldocattall.attoal_versione_invio_firma v_vers_invio_firma_atto_allegato,
eldocattall.attoal_stato_code v_cod_stato_atto_allegato, eldocattall.attoal_stato_desc v_desc_stato_atto_allegato,
eldocattall.ragione_sociale_atto_allegato v_rag_sociale_sogg_atto_allegato,
eldocattall.nome_atto_allegato v_nome_sogg_atto_allegato,
eldocattall.cognome_atto_allegato v_cognome_sogg_atto_allegato,
eldocattall.soggetto_code_atto_allegato v_cod_sogg_atto_allegato, 
eldocattall.soggetto_tipo_desc_atto_allegato v_tipo_sogg_atto_allegato, 
eldocattall.soggetto_stato_desc_atto_allegato v_stato_sogg_atto_allegato,
eldocattall.partita_iva_atto_allegato v_p_iva_sogg_atto_allegato, 
eldocattall.codice_fiscale_atto_allegato v_cf_sogg_atto_allegato, 
eldocattall.codice_fiscale_estero_atto_allegato v_cf_estero_sogg_atto_allegato, 
eldocattall.soggetto_id_atto_allegato v_sogg_id_atto_allegato,
doc.doc_gruppo_tipo_code v_cod_gruppo_doc, doc.doc_gruppo_tipo_desc v_desc_gruppo_doc,
notes.notetes_desc v_note_tesoriere_subdoc, 
dist.dist_code v_cod_distinta_subdoc, dist.dist_desc v_desc_distinta_subdoc,
contes.contotes_desc v_conto_tesoreria_subdoc,
split.sriva_tipo_code v_cod_tipo_splitrev , split.sriva_tipo_desc v_desc_tipo_splitrev,
liq.liq_anno v_anno_liquidazione,liq.liq_numero v_num_liquidazione,liq.liq_stato_desc v_liq_stato_desc,
subcltipoavviso.cod_tipo_avviso v_cod_tipo_avviso,subcltipoavviso.desc_tipo_avviso v_desc_tipo_avviso,
docattr1.v_registro_repertorio,
docattr2.v_anno_repertorio,
docattr3.v_num_repertorio,
docattr4.v_data_repertorio,
docattr5.v_data_ricezione_portale,
docattr6.v_dataOperazionePagamentoIncasso,
docattr7.v_flagPagataIncassata,
docattr8.v_notePagamentoIncasso,
-- 	SIAC-5229
docattr9.v_arrotondamento,
--
subdocattr1.v_rilevante_iva,
subdocattr2.v_ordinativo_singolo,
subdocattr3.v_esproprio,
subdocattr4.v_certificazione,
subdocattr5.v_ordinativo_manuale,
subdocattr6.v_avviso,
subdocattr7.v_num_mutuo,
subdocattr8.v_cup,
subdocattr9.v_cig,
subdocattr10.v_note_certificazione,
subdocattr11.v_data_sospensione,
subdocattr12.v_data_esecuzione_pagamento,
subdocattr13.v_annotazione,
subdocattr14.v_num_certificazione,
subdocattr15.v_data_scadenza_dopo_sospensione,
subdocattr16.v_data_riattivazione,
subdocattr17.v_causale_ordinativo,
subdocattr18.v_note,
subdocattr19.v_data_certificazione,
subdocattr20.v_causale_sospensione,
soggsub.soggetto_code_subdoc v_cod_sogg_subdoc, 
soggsub.soggetto_tipo_desc_subdoc v_tipo_sogg_subdoc, 
soggsub.soggetto_stato_desc_subdoc v_stato_sogg_subdoc,
soggsub.partita_iva_subdoc v_p_iva_sogg_subdoc, 
soggsub.codice_fiscale_subdoc v_cf_sogg_subdoc, 
soggsub.codice_fiscale_estero_subdoc v_cf_estero_sogg_subdoc, 
soggsub.soggetto_id_subdoc v_soggetto_id,
soggsub.nome_subdoc v_nome_sogg_subdoc, 
soggsub.cognome_subdoc v_cognome_sogg_subdoc, soggsub.ragione_sociale_subdoc v_rag_sociale_sogg_subdoc,
soggsub.v_sede_secondaria_subdoc v_sede_secondaria_subdoc,
imp.v_cod_impegno v_cod_impegno, 
imp.v_desc_impegno v_desc_impegno, 
imp.v_cod_subimpegno v_cod_subimpegno, 
imp.v_desc_subimpegno v_desc_subimpegno, 
imp.v_bil_anno v_bil_anno,
imp.v_anno_impegno v_anno_impegno,
imp.v_num_impegno v_num_impegno,
imp.movgest_ts_tipo_code,
modpag.v_quietanziante v_quietanziante, 
modpag.v_data_nasciata_quietanziante, 
modpag.v_luogo_nascita_quietanziante, 
modpag.v_stato_nascita_quietanziante,
modpag.v_bic, modpag.v_contocorrente, 
modpag.v_intestazione_contocorrente,
modpag.v_iban, modpag.v_note_mod_pag, modpag.v_data_scadenza_mod_pag,
modpag.accredito_tipo_id,
modpag.v_soggetto_id_modpag_nocess, 
modpag.v_soggrelmpag_id, modpag.v_mod_pag_id,
modpag.v_cod_tipo_accredito v_cod_tipo_accredito, 
modpag.v_desc_tipo_accredito v_desc_tipo_accredito,
modpag.v_soggetto_id_modpag,
modpag.v_cod_sogg_mod_pag, modpag.v_tipo_sogg_mod_pag, 
modpag.v_stato_sogg_mod_pag, modpag.v_rag_sociale_sogg_mod_pag,
modpag.v_p_iva_sogg_mod_pag, modpag.v_cf_sogg_mod_pag, 
modpag.v_cf_estero_sogg_mod_pag,
modpag.v_nome_sogg_mod_pag, modpag.v_cognome_sogg_mod_pag,
ord.subdoc_id,
ord.ord_anno v_anno_ord, ord.ord_numero v_num_ord, ord.ord_ts_code v_num_subord, ord.anno v_bil_anno_ord,
doc.doc_sdi_lotto_siope,
doc.siope_documento_tipo_code, doc.siope_documento_tipo_desc, doc.siope_documento_tipo_desc_bnkit,
doc.siope_documento_tipo_analogico_code, doc.siope_documento_tipo_analogico_desc, doc.siope_documento_tipo_analogico_desc_bnkit,
doc.siope_tipo_debito_code, doc.siope_tipo_debito_desc, doc.siope_tipo_debito_desc_bnkit,
doc.siope_assenza_motivazione_code, doc.siope_assenza_motivazione_desc, doc.siope_assenza_motivazione_desc_bnkit,
doc.siope_scadenza_motivo_code, doc.siope_scadenza_motivo_desc, doc.siope_scadenza_motivo_desc_bnkit
from doc 
left join bollo on doc.codbollo_id=bollo.codbollo_id
left join sogg on doc.doc_id=sogg.doc_id
left join reguni on doc.doc_id=reguni.doc_id
left join cdc on doc.doc_id=cdc.doc_id
left join cdr on doc.doc_id=cdr.doc_id
left join pcccod on doc.pcccod_id=pcccod.pcccod_id
left join pccuff on doc.pccuff_id=pccuff.pccuff_id
left join attoamm on doc.subdoc_id=attoamm.subdoc_id
left join commt on doc.comm_tipo_id=commt.comm_tipo_id
left join eldocattall on doc.subdoc_id=eldocattall.subdoc_id
left join notes on doc.notetes_id=notes.notetes_id
left join dist  on doc.dist_id=dist.dist_id
left join contes on doc.contotes_id=contes.contotes_id
left join split on doc.subdoc_id=split.subdoc_id
left join liq on doc.subdoc_id=liq.subdoc_id --origina multipli
left join  subcltipoavviso on doc.subdoc_id=subcltipoavviso.subdoc_id
left join docattr1 on doc.doc_id=docattr1.doc_id
left join docattr2 on doc.doc_id=docattr2.doc_id
left join docattr3 on doc.doc_id=docattr3.doc_id
left join docattr4 on doc.doc_id=docattr4.doc_id
left join docattr5 on doc.doc_id=docattr5.doc_id
left join docattr6 on doc.doc_id=docattr6.doc_id
left join docattr7 on doc.doc_id=docattr7.doc_id
left join docattr8 on doc.doc_id=docattr8.doc_id
left join docattr9 on doc.doc_id=docattr9.doc_id
left join subdocattr1 on doc.subdoc_id=subdocattr1.subdoc_id
left join subdocattr2 on doc.subdoc_id=subdocattr2.subdoc_id
left join subdocattr3 on doc.subdoc_id=subdocattr3.subdoc_id
left join subdocattr4 on doc.subdoc_id=subdocattr4.subdoc_id
left join subdocattr5 on doc.subdoc_id=subdocattr5.subdoc_id
left join subdocattr6 on doc.subdoc_id=subdocattr6.subdoc_id
left join subdocattr7 on doc.subdoc_id=subdocattr7.subdoc_id
left join subdocattr8 on doc.subdoc_id=subdocattr8.subdoc_id
left join subdocattr9 on doc.subdoc_id=subdocattr9.subdoc_id
left join subdocattr10 on doc.subdoc_id=subdocattr10.subdoc_id
left join subdocattr11 on doc.subdoc_id=subdocattr11.subdoc_id
left join subdocattr12 on doc.subdoc_id=subdocattr12.subdoc_id
left join subdocattr13 on doc.subdoc_id=subdocattr13.subdoc_id
left join subdocattr14 on doc.subdoc_id=subdocattr14.subdoc_id
left join subdocattr15 on doc.subdoc_id=subdocattr15.subdoc_id
left join subdocattr16 on doc.subdoc_id=subdocattr16.subdoc_id
left join subdocattr17 on doc.subdoc_id=subdocattr17.subdoc_id
left join subdocattr18 on doc.subdoc_id=subdocattr18.subdoc_id
left join subdocattr19 on doc.subdoc_id=subdocattr19.subdoc_id
left join subdocattr20 on doc.subdoc_id=subdocattr20.subdoc_id
left join soggsub on soggsub.subdoc_id = doc.subdoc_id
left join imp on imp.subdoc_id=doc.subdoc_id 
left join modpag on modpag.subdoc_id=doc.subdoc_id
left join ord on ord.subdoc_id = doc.subdoc_id
) as tb;


esito:= 'Fine funzione carico documenti spesa (FNC_SIAC_DWH_DOCUMENTO_SPESA) - '||clock_timestamp();
RETURN NEXT;

EXCEPTION
WHEN others THEN
  esito:='Funzione carico documenti spesa (FNC_SIAC_DWH_DOCUMENTO_SPESA) terminata con errori';
  RAISE EXCEPTION '%-%.',SQLSTATE,SQLERRM;
RETURN;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY DEFINER
COST 100 ROWS 1000;


-- Allineamento modifiche effettuate da CSI - FINE - Maurizio


-- 12.12.2017 Sofia - SIOPE+ - INIZIO

CREATE TABLE if not exists siac.mif_t_giornalecassa_totali (
  mif_t_giornalecassa_totali_id SERIAL,
  flusso_elab_mif_id INTEGER,
  codice_abi_bt VARCHAR,
  identificativo_flusso VARCHAR,
  data_ora_creazione_flusso VARCHAR,
  data_inizio_periodo_riferimento VARCHAR,
  data_fine_periodo_riferimento VARCHAR,
  codice_ente VARCHAR,
  descrizione_ente VARCHAR,
  codice_ente_bt VARCHAR,
  esercizio INTEGER,
  saldo_complessivo_finale NUMERIC,
  saldo_complessivo_precedente NUMERIC,
  totale_complessivo_entrate NUMERIC,
  totale_complessivo_uscite NUMERIC,
  anticipazione_accordata NUMERIC,
  anticipazione_utilizzata NUMERIC,
  disponibilita NUMERIC,
  saldo_conti_bi NUMERIC,
  saldo_conti_correnti NUMERIC,
  svincoli_conti_bi NUMERIC,
  svincoli_conti_correnti NUMERIC,
  totale_conti NUMERIC,
  totale_somme_bloccate_riservate NUMERIC,
  totale_svincoli NUMERIC,
  totale_vincoli NUMERIC,
  vincoli_conti_bi NUMERIC,
  vincoli_conti_correnti NUMERIC,
  deficit_di_cassa NUMERIC,
  fondo_di_cassa NUMERIC,
  saldo_esercizio NUMERIC,
  totale_entrate NUMERIC,
  totale_mandati_pagati NUMERIC,
  totale_reversali_riscosse NUMERIC,
  totale_sospesi_entrata NUMERIC,
  totale_sospesi_uscita NUMERIC,
  totale_uscite NUMERIC,
  validita_inizio TIMESTAMP WITHOUT TIME ZONE,
  validita_fine TIMESTAMP WITHOUT TIME ZONE,
  data_creazione TIMESTAMP WITHOUT TIME ZONE,
  data_cancellazione TIMESTAMP WITHOUT TIME ZONE,
  login_operazione VARCHAR(200),
  ente_proprietario_id INTEGER
)
WITH (oids = false);


CREATE OR REPLACE FUNCTION fnc_mif_t_flusso_elaborato_getidelab (
  enteproprietarioid integer,
  nomeente varchar,
  tipoflussomif varchar,
  nomefilemif varchar,
  loginoperazione varchar,
  dataelaborazione timestamp,
  out flussoelabmifid integer,
  out codicerisultato integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE

	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';
	codResult integer:=null;

    ELAB_MIF_ESITO_IN       CONSTANT  varchar :='IN';


    -- costante tipo flusso presenti nei flussi non servono qui
    QUIET_MIF_FLUSSO_TIPO   CONSTANT  varchar :='R';    -- quietanze e storni
    FIRME_MIF_FLUSSO_TIPO   CONSTANT  varchar :='S';    -- firme
    PROVC_MIF_FLUSSO_TIPO   CONSTANT  varchar :='P';    -- provvisori

    -- costante tipo flusso presenti nella mif_d_flusso_elaborato_tipo
    -- valori di parametro tipoFlussoMif devono essere presenti in mif_d_flusso_elaborato_tipo
    QUIET_MIF_ELAB_FLUSSO_TIPO   CONSTANT  varchar :='RICQUMIF';    -- quietanze e storni
    FIRME_MIF_ELAB_FLUSSO_TIPO   CONSTANT  varchar :='RICFIMIF';    -- firme
    PROVC_MIF_ELAB_FLUSSO_TIPO   CONSTANT  varchar :='RICPCMIF';    -- provvisori di cassa
    GIOCASSA_MIF_ELAB_FLUSSO_TIPO CONSTANT  varchar :='GIOCASSA';    -- giornale di cassa

	flussoMifTipoId integer:=null;
    flussoElabMifLogId integer :=null;

BEGIN

	strMessaggioFinale:='Calcolo identificativo flusso elaborazione tipo flusso='||tipoFlussoMif||'.';

   	flussoElabMifId:=null;
    codiceRisultato:=0;
    messaggioRisultato:='';


	strMessaggio:='Lettura identificativo tipo flusso.';
    select tipo.flusso_elab_mif_tipo_id into strict flussoMifTipoId
    from mif_d_flusso_elaborato_tipo tipo
    where tipo.flusso_elab_mif_tipo_code=tipoFlussoMif
    and   tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.data_cancellazione is null
    and   tipo.validita_fine is null
    and   tipoFlussoMif in (QUIET_MIF_ELAB_FLUSSO_TIPO,FIRME_MIF_ELAB_FLUSSO_TIPO,PROVC_MIF_ELAB_FLUSSO_TIPO,GIOCASSA_MIF_ELAB_FLUSSO_TIPO);

    -- verifica di elaborazioni pendendenti per il tipo flusso
    -- sulla mif_t_flusso_elaborato
    strMessaggio:='Verifica esistenza elaborazioni in corso [mif_t_flusso_elaborato].';
	codResult:=null;
    select distinct 1 into codResult
    from mif_t_flusso_elaborato elab
    where  elab.flusso_elab_mif_tipo_id=flussoMifTipoId
    and    elab.flusso_elab_mif_esito=ELAB_MIF_ESITO_IN
    and    elab.data_cancellazione is null
    and    elab.validita_fine is null;

    if codResult is not null then
    	RAISE EXCEPTION 'Verificare situazioni esistenti.';
    end if;

    -- verifica di elaborazioni pendendenti per il tipo flusso
    -- sulla mif_t_oil_ricevuta

    strMessaggio:='Verifica esistenza elaborazioni in corso [mif_t_flusso_elaborato].';
	codResult:=null;
    /*select distinct 1 into codResult
    from mif_t_oil_ricevuta ric, mif_t_flusso_elaborato elab
    where  elab.flusso_elab_mif_id=ric.flusso_elab_mif_id
    and    elab.flusso_elab_mif_tipo_id=flussoMifTipoId
    and    elab.flusso_elab_mif_esito=ELAB_MIF_ESITO_IN
    and    ric.data_cancellazione is null
    and    ric.validita_fine is null
    and    elab.data_cancellazione is null
    and    elab.validita_fine is null;*/

    select distinct 1 into codResult
    from mif_t_oil_ricevuta ric
    where    ric.data_cancellazione is null
    and    ric.validita_fine is null;

    if codResult is not null then
    	RAISE EXCEPTION 'Verificare situazioni esistenti.';
    end if;

    -- inserimento mif_t_flusso_elaborato
	strMessaggio:='Inserimento mif_t_flusso_elaborato.';
	insert into mif_t_flusso_elaborato
    (flusso_elab_mif_data ,
     flusso_elab_mif_esito,
     flusso_elab_mif_esito_msg,
     flusso_elab_mif_file_nome,
     flusso_elab_mif_tipo_id,
     validita_inizio,
     ente_proprietario_id,
     login_operazione)
     values
     (dataElaborazione,
      ELAB_MIF_ESITO_IN,
      'Elaborazione in corso per tipo flusso '||tipoFlussoMif,
      nomeFileMif,
      flussoMifTipoId,
 	  dataElaborazione,
      enteProprietarioId,
      loginOperazione
     )
     returning flusso_elab_mif_id into flussoElabMifLogId; -- valore da restituire

     raise notice 'flussoElabMifLogId %',flussoElabMifLogId;

     if flussoElabMifLogId is null then
       RAISE EXCEPTION ' Errore generico in inserimento %.',tipoFlussoMif;
     end if;


     flussoElabMifId:=flussoElabMifLogId;
     return;


exception
    when RAISE_EXCEPTION THEN
        messaggioRisultato:=
        	coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||'ERRORE:  '||' '||coalesce(substring(upper(SQLERRM) from 1 for 500),'') ;
       	  codiceRisultato:=-1;

		messaggioRisultato:=upper(messaggioRisultato);
       	flussoElabMifId:=null;

        return;
     when NO_DATA_FOUND THEN
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||' Nessun dato presente in archivio.';
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);
       	flussoElabMifId:=null;

        return;
     when TOO_MANY_ROWS THEN
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||' Diverse righe presenti in archivio.';
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);
      	flussoElabMifId:=null;

        return;
	when others  THEN
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'ERRORE DB:'||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);
       	flussoElabMifId:=null;
        return;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

drop FUNCTION  if exists fnc_mif_tipo_pagamento_splus( ordinativoId integer,
												   codicePaese varchar,
                                                   codiceItalia varchar,
                                                   codiceAreaSepa varchar,
                                                   codiceAreaExtraSepa varchar,
                                                   accreditoCodeCB varchar,
                                                   accreditoCodeREG varchar,
                                                   tipoPagamCompensa varchar,
 												   accreditoTipoId INTEGER,
                                                   accreditoGruppoCode varchar,
                                                   importoOrd       numeric,
                                                   dataElaborazione timestamp,
                                                   dataFineVal timestamp,
                                                   enteProprietarioId integer,
												   out codeTipoPagamento varchar,
                                                   out descTipoPagamento varchar,
                                                   out defRifDocEsterno boolean);
												   
drop FUNCTION IF EXISTS fnc_mif_tipo_pagamento_splus  (  ordinativoId integer,
												   codicePaese varchar,
                                                   codiceItalia varchar,
                                                   codiceAreaSepa varchar,
                                                   codiceAreaExtraSepa varchar,
                                                   accreditoCodeCB varchar,
                                                   accreditoCodeREG varchar,
                                                   tipoPagamCompensa varchar,
 												   accreditoTipoId INTEGER,
                                                   accreditoGruppoCode varchar,
                                                   importoOrd       numeric,
                                                   pagamentoGFB     boolean,
                                                   dataElaborazione timestamp,
                                                   dataFineVal timestamp,
                                                   enteProprietarioId integer,
												   out codeTipoPagamento varchar,
                                                   out descTipoPagamento varchar,
                                                   out defRifDocEsterno boolean); CREATE OR REPLACE FUNCTION fnc_mif_tipo_pagamento_splus( ordinativoId integer,
												   codicePaese varchar,
                                                   codiceItalia varchar,
                                                   codiceAreaSepa varchar,
                                                   codiceAreaExtraSepa varchar,
                                                   accreditoCodeCB varchar,
                                                   accreditoCodeREG varchar,
                                                   tipoPagamCompensa varchar,
 												   accreditoTipoId INTEGER,
                                                   accreditoGruppoCode varchar,
                                                   importoOrd       numeric,
                                                   pagamentoGFB     boolean,
                                                   dataElaborazione timestamp,
                                                   dataFineVal timestamp,
                                                   enteProprietarioId integer,
												   out codeTipoPagamento varchar,
                                                   out descTipoPagamento varchar,
                                                   out defRifDocEsterno boolean)
RETURNS record AS
$body$
DECLARE

strMessaggio varchar(1500):=null;

isSepa boolean:=false;
isProvvisori boolean :=false;
isAllegatoCartaceo boolean :=false;
isCompensa boolean:=false;
codAreaSepa VARCHAR(50):=null;
accreditoTipoCode varchar(50):=null;
checkDati integer:=null;
accreditoCodeTes varchar(50):=null;
accreditoTipoOilId integer :=null;
accreditoCodePag varchar(50):=null;
accreditoDescPag varchar(200):=null;

ALLEG_CART_ATTR CONSTANT VARCHAR:='flagAllegatoCartaceo';

BEGIN

 codeTipoPagamento:=null;
 descTipoPagamento:=null;
 defRifDocEsterno:=false;



 -- codiceItalia valore presente in param
 -- codicePaese valorizzato se presente Iban
 -- codiceAreaSepa letto in param
 -- codiceAreaExtraSepa letto in param

-- raise notice 'ordinativoId=% ',ordinativoId;
-- raise notice 'codicePaese=% ',codicePaese;
-- raise notice 'codiceItalia=% ',codiceItalia;
-- raise notice 'codiceAreaSepa=% ',codiceAreaSepa;
-- raise notice 'codiceAreaExtraSepa=% ',codiceAreaExtraSepa;

 checkDati:=null;
 strMessaggio:='Lettura tipo pagamento ordinativo [siac_r_ordinativo_prov_cassa].';
 select distinct 1 into checkDati
 from siac_r_ordinativo_prov_cassa prov
 where prov.ord_id=ordinativoId
 and   prov.data_cancellazione is null
 and   prov.validita_fine is null;

 if checkDati is not null then
    	isProvvisori  :=true;
 end if;

 if isProvvisori = false then
  checkDati:=null;
  strMessaggio:='Verifica ordinativo compensazione.';
  select 1 into checkDati
  from siac_r_ordinativo rOrd, siac_t_ordinativo ord,siac_d_ordinativo_tipo tipo,
       siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato,
       siac_t_ordinativo_ts ts, siac_t_ordinativo_ts_det det, siac_d_ordinativo_ts_det_tipo tipod,
       siac_d_relaz_tipo tiporel
  where rord.ord_id_da=ordinativoId
  and   ord.ord_id=rord.ord_id_a
  and   tipo.ord_tipo_id=ord.ord_tipo_id
  and   tipo.ord_tipo_code='I'
  and   rstato.ord_id=ord.ord_id
  and   stato.ord_stato_id=rstato.ord_stato_id
  and   stato.ord_stato_code!='A'
  and   ts.ord_id=ord.ord_id
  and   det.ord_ts_id=ts.ord_ts_id
  and   tipod.ord_ts_det_tipo_id=det.ord_ts_det_tipo_id
  and   tipod.ord_ts_det_tipo_code='A'
  and   tiporel.relaz_tipo_id=rOrd.relaz_tipo_id
  and   rord.data_cancellazione is null
  and   rord.validita_fine is null
  and   ord.data_cancellazione is null
  and   ord.validita_fine is null
  and   rstato.data_cancellazione is null
  and   rstato.validita_fine is null
  and   ts.data_cancellazione is null
  and   ts.validita_fine is null
  and   det.data_cancellazione is null
  and   det.validita_fine is null
  group by ord.ord_id
  having coalesce(sum(det.ord_ts_det_importo),0)=importoOrd
  limit 1;

  if checkDati is not null then
    strMessaggio:='Lettura tipo pamento compensazione.';
  	select oil.accredito_tipo_oil_code ,oil.accredito_tipo_oil_desc
           into accreditoCodePag,accreditoDescPag
    from siac_d_accredito_tipo_oil oil
    where oil.ente_proprietario_id=enteProprietarioId
    and   oil.accredito_tipo_oil_desc=tipoPagamCompensa
    and   oil.data_cancellazione is null
    and   oil.validita_fine is null;
    if accreditoCodePag is not null  then
    	isCompensa:=true;
    end if;
  end if;
 end if;

 if isProvvisori = false and isCompensa=false then
 	if codicePaese='' or codicePaese is null then

 	 -- se il codice paese='' or codicepaese is null
 	 -- cerco il gruppo da accredito_tipo_id
	 -- se e' CB allora forzo paese=' '
     if accreditoGruppoCode=accreditoCodeCB then
     	codicePaese=' '; -- forzato per cercare CB extrasepa
     end if;

    end if;
 end if;


 if isProvvisori=false and  isCompensa=false and
    codicePaese is not null and codicePaese!=codiceItalia then
    strMessaggio:='Lettura tipo pagamento ordinativo [siac_t_sepa].';
 	select distinct 1 into checkDati
    from siac_t_sepa sepa
    where sepa.sepa_iso_code=codicePaese
    and   sepa.ente_proprietario_id=enteProprietarioId
    and   sepa.data_cancellazione is null
 	and   date_trunc('day',dataElaborazione)>=date_trunc('day',sepa.validita_inizio)
 	and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(sepa.validita_fine,dataElaborazione));

    if checkDati is not null then
    	isSepa:=true;
    end if;
 end if;

 if isProvvisori=true THEN
 	-- lettura tabella di decodifica REG ( valore presente in param )
    accreditoCodeTes:=accreditoCodeREG;
 end if;


 checkDati:=null;
 strMessaggio:='Lettura tipo pagamento ordinativo [siac_r_ordinativo_attr].';
 select 1 into checkDati
 from siac_r_ordinativo_attr rattr, siac_t_attr attr
 where rattr.ord_id=ordinativoId
 and   rattr.boolean='S'
 and   rattr.data_cancellazione is null
 and   rattr.validita_fine is null
 and   attr.attr_id=rattr.attr_id
 and   attr.attr_code=ALLEG_CART_ATTR
 and   attr.data_cancellazione is null
 and   attr.validita_fine is null;

 if checkDati is not null then
  	isAllegatoCartaceo  :=true;
 end if;

 strMessaggio:='Lettura tipo pagamento ordinativo.';
 -- raise notice 'isProvvisori=% ',isProvvisori;
 -- raise notice 'isSepa=% ',isSepa;


 if isProvvisori=false and isCompensa=false  and
    codicePaese is not  null and  codicePaese!=codiceItalia  then
    accreditoCodeTes:=accreditoCodeCB;
 	if isSepa=true then
	 	-- lettura tabella di decodifica con CB ( valore presente in param), oil_area=SEPA
    	codAreaSepa:=codiceAreaSepa;
    else
	 	-- lettura tabella di decodifica con CB ( valore presente in param), oil_area=EXTRASEPA
	    codAreaSepa:=codiceAreaExtraSepa;
        isAllegatoCartaceo  :=true; -- bonifico estero extra-sepa forzato a true
    end if;

 end if;

 if  isCompensa=false  then

  if isProvvisori=false and -- 13.12.2017 Sofia siac-5654
     (accreditoCodeTes is null or  pagamentoGFB = true ) then
     accreditoTipoOilId:=accreditoTipoId;
     if pagamentoGFB=true then
    	codAreaSepa:=null;
     end if;
  else
    -- lettura di accredito_tipo_id per lettura in accredito_tipo
	strMessaggio:='Lettura tipo pagamento ordinativo [siac_d_accredito_tipo] accredito_tipo_code='||accreditoCodeTes||'.';

	select tipo.accredito_tipo_id into accreditoTipoOilId
	from siac_d_accredito_tipo tipo
	where tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.accredito_tipo_code=accreditoCodeTes
	and   tipo.data_cancellazione is null
	and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
	and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));

	 if accreditoTipoOilId is null then
 		RAISE EXCEPTION ' Accredito tipo non trovato.';
	 end if;
  end if;

 end if;

 if  isCompensa=false  then

  -- lettura di accredito_tipo_id per lettura in accredito_tipo_oil
  strMessaggio:='Lettura tipo pagamento ordinativo [siac_d_accredito_tipo_oil].';
  select oil.accredito_tipo_oil_code,oil.accredito_tipo_oil_desc into accreditoCodePag,accreditoDescPag
  from siac_d_accredito_tipo_oil oil, siac_r_accredito_tipo_oil raccre
  where raccre.accredito_tipo_id=accreditoTipoOilId
  and   raccre.data_cancellazione is null
  and   raccre.validita_fine is null
  and   oil.accredito_tipo_oil_id=raccre.accredito_tipo_oil_id
  and   coalesce(oil.accredito_tipo_oil_area,'IT')=coalesce(codAreaSepa,'IT')
  and   oil.data_cancellazione is null
  and   date_trunc('day',dataElaborazione)>=date_trunc('day',oil.validita_inizio)
  and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(oil.validita_fine,dataElaborazione));
 end if;



 codeTipoPagamento:=accreditoCodePag;
 descTipoPagamento:=accreditoDescPag;
 defRifDocEsterno:= isAllegatoCartaceo;
--  raise notice 'accreditoCodePag=% ',accreditoCodePag;
--  raise notice 'descTipoPagamento=% ',accreditoDescPag;


 return;

exception
    when RAISE_EXCEPTION THEN
        RAISE EXCEPTION '%',coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 1000),'');
        return;
    when TOO_MANY_ROWS THEN
        RAISE EXCEPTION '% Diverse righe lette.',coalesce(strMessaggio,'');
        return;
   when no_data_found then
	    RAISE EXCEPTION '% Non presente in archivio.',coalesce(strMessaggio,'');
        return;
	when others  THEN
 		RAISE EXCEPTION '% Errore DB % %',coalesce(strMessaggio,''),SQLSTATE,substring(SQLERRM from 1 for 1000);
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_mif_tipo_incasso_splus( ordinativoId integer,
  											           ordinativoImporto numeric,
                                                       ritRelCode varchar,
                                                       splitRelCode varchar,
                                                       subRelCode varchar,
                                                       tipoOnere varchar,
 												       tipoIncassoCodeId INTEGER,
                                                       tipoIncassoCompensazione varchar,
                                                       tipoIncassoRegolarizza varchar,
                                                       tipoIncassoCassa  varchar,
                                                       dataElaborazione timestamp,
                                                       dataFineVal timestamp,
                                                       enteProprietarioId integer)
RETURNS varchar AS
$body$
DECLARE

strMessaggio varchar(1500):=null;

isProvvisori boolean :=false;
checkDati integer:=null;
tipoIncasso varchar(150):=null;
tipoIncassoToRel varchar(150):=null;

tipoOnereOk integer:=null;

ordId integer:=null;
relazTipoCode varchar:=null;
ordImporto numeric:=null;
tipoOnereCode1 varchar:=null;
tipoOnereCode2 varchar:=null;
tipoOnereCode3 varchar:=null;
BEGIN


 strMessaggio:='Lettura tipoIncasso per ordinativoId='||ordinativoId::varchar||'.';

 strMessaggio:=strMessaggio||' Lettura classificatore [siac_r_ordinativo_class].';
 select c.classif_desc into tipoIncasso
 from siac_r_ordinativo_class r, siac_t_class c
 where r.ord_id=OrdinativoId
 and   c.classif_id=r.classif_id
 and   c.classif_tipo_id=tipoIncassoCodeId
 and   r.data_cancellazione is null
 and   r.validita_fine is null
 and   c.data_cancellazione is null
 order  by r.ord_classif_id limit 1;

 strMessaggio:='Lettura tipoIncasso per ordinativoId='||ordinativoId::varchar||' .Verifica provvisori di cassa.';

 -- se Ordinativo a copertura
 select distinct 1 into checkDati
 from siac_r_ordinativo_prov_cassa rprov
 where rprov.ord_id=OrdinativoId
 and   rprov.data_cancellazione is null
 and   rprov.validita_fine is null;

 if checkDati is not null then
    -- se esiste collegamento con siac_d_accretipo_tipo_oil
    -- tipoIncassoToRel --> accredito_tipo_oil_desc_incasso
    -- altrimenti REGOLARIZZAZIONE
    if tipoIncasso is not null then
     strMessaggio:='Lettura tipoIncasso per ordinativoId='||ordinativoId::varchar||'.Ordinativo a copertura.Verifica tipo incasso collegato [siac_r_accredito_tipo_plus].';

 	 select r.accredito_tipo_oil_desc_incasso into tipoIncassoToRel
     from siac_r_accredito_tipo_plus r ,siac_d_accredito_tipo_oil oil
     where oil.ente_proprietario_id=enteProprietarioId
     and   oil.accredito_tipo_oil_desc=tipoIncasso
     and   r.accredito_tipo_oil_id=oil.accredito_tipo_oil_id
     and   r.data_cancellazione is null
     and   r.validita_fine is null
     and   oil.data_cancellazione is null
     and   oil.validita_fine is null
     limit 1;
    end if;

    if tipoIncassoToRel is null then
    	tipoIncassoToRel:=tipoIncassoRegolarizza;
    end if;

 end if;

 -- se non a copertura
 if tipoIncassoToRel is null then
  -- se Ordinativo collegato ad ordinativo di spesa, di pari importo
  -- COMPENSAZIONE
  strMessaggio:='Lettura tipoIncasso per ordinativoId='||ordinativoId::varchar||'.Ordinativo non a copertura.'||
                'Verifica ordinativo di pagamento collegato.';

  select ord.ord_id , tiporel.relaz_tipo_code, coalesce(sum(det.ord_ts_det_importo),0)
         into ordId, relazTipoCode, ordImporto
  from siac_r_ordinativo rOrd, siac_t_ordinativo ord,siac_d_ordinativo_tipo tipo,
       siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato,
       siac_t_ordinativo_ts ts, siac_t_ordinativo_ts_det det, siac_d_ordinativo_ts_det_tipo tipod,
       siac_d_relaz_tipo tiporel
  where rord.ord_id_a=ordinativoId
  and   ord.ord_id=rord.ord_id_da
  and   tipo.ord_tipo_id=ord.ord_tipo_id
  and   tipo.ord_tipo_code='P'
  and   rstato.ord_id=ord.ord_id
  and   stato.ord_stato_id=rstato.ord_stato_id
  and   stato.ord_stato_code!='A'
  and   ts.ord_id=ord.ord_id
  and   det.ord_ts_id=ts.ord_ts_id
  and   tipod.ord_ts_det_tipo_id=det.ord_ts_det_tipo_id
  and   tipod.ord_ts_det_tipo_code='A'
  and   tiporel.relaz_tipo_id=rOrd.relaz_tipo_id
  and   rord.data_cancellazione is null
  and   rord.validita_fine is null
  and   ord.data_cancellazione is null
  and   ord.validita_fine is null
  and   rstato.data_cancellazione is null
  and   rstato.validita_fine is null
  and   ts.data_cancellazione is null
  and   ts.validita_fine is null
  and   det.data_cancellazione is null
  and   det.validita_fine is null
  group by ord.ord_id,tiporel.relaz_tipo_code;

  if ordId is not null and
    coalesce(ordImporto,0)!=0 and coalesce(ordImporto,0)=ordinativoImporto
    then
 	tipoIncassoToRel:=tipoIncassoCompensazione;
  --  raise notice 'Importo uguale tipoIncassoToRel=%',tipoIncassoToRel;
  end if;
 end if;

 -- se non a copertura e non compensazione
 -- se ordinativo di tipo ritenuta
 -- quindi collegato ad ordinativo di spesa
 -- con relazione RIT_ORD
 -- e ordinativo di spesa collegato a documenti
 -- con oneri IRPEF,INPS, IRPEG
 -- COMPENSAZIONE
 if tipoIncassoToRel is null and
    ordId is not null and
    relazTipoCode in
    (ritRelCode,splitRelCode,subRelCode) then

	tipoIncassoToRel:=tipoIncassoCompensazione;
    raise notice 'relazTipoCode=% tipoIncassoToRel=%',relazTipoCode,tipoIncassoToRel;

	if relazTIpoCode=ritRelCode then
     strMessaggio:='Lettura tipoIncasso per ordinativoId='||ordinativoId::varchar||'.Ordinativo non a copertura.'||
                   'Verifica ordinativo di pagamento collegato con ritenuta.';
   --  raise notice 'strMessaggio=% ',strMessaggio;
   --  raise notice 'tipoOnere=% ordId=%',tipoOnere,ordId;
     tipoOnereCode1:=trim (both ' ' from split_part(tipoOnere,',',1));
     tipoOnereCode2:=trim (both ' ' from split_part(tipoOnere,',',2));
     tipoOnereCode3:=trim (both ' ' from split_part(tipoOnere,',',3));
    -- raise notice 'tipoOnereCode1=% ordId=%',tipoOnereCode1,ordId;
   --  raise notice 'tipoOnereCode2=% ordId=%',tipoOnereCode2,ordId;
    -- raise notice 'tipoOnereCode3=% ordId=%',tipoOnereCode3,ordId;

	 select distinct 1 into tipoOnereOk
	 from siac_d_onere onere, siac_d_onere_tipo tipo,
          siac_t_ordinativo_ts ordts, siac_r_doc_onere  rdoc, siac_t_subdoc doc, siac_r_subdoc_ordinativo_ts ts
	 where onere.ente_proprietario_id=enteProprietarioId
     and   tipo.onere_tipo_id=onere.onere_tipo_id
	 and   tipo.onere_tipo_code in (tipoOnereCode1,tipoOnereCode2,tipoOnereCode3)
	 and   ordts.ord_id=ordId
	 and   ts.ord_ts_id=ordts.ord_ts_id
	 and   doc.subdoc_id=ts.subdoc_id
	 and   rdoc.doc_id=doc.doc_id
	 and   rdoc.onere_id=onere.onere_id
  	 and   onere.data_cancellazione is null
     and   onere.validita_fine is null
	 and   ordts.data_cancellazione is null
	 and   ordts.validita_fine is null
	 and   ts.data_cancellazione is null
	 and   ts.validita_fine is null
	 and   doc.data_cancellazione is null
 	 and   doc.validita_fine is null
	 and   rdoc.data_cancellazione is null
	 and   rdoc.validita_fine is null;

     raise notice 'tipoOnereOk=%',tipoOnereOk;
     if tipoOnereOk is  null then
    	tipoIncassoToRel:=null;
     end if;
    end if;


 end if;

 -- se nessuna delle condizion sopra allora vale il tipo presente sul classificatore
 if tipoIncassoToRel is null then
 	tipoIncassoToRel:=tipoIncasso;
 end if;
 -- se nessun valore --> allora CASSA
 if tipoIncassoToRel is null then
 	tipoIncassoToRel:=tipoIncassoCassa;
 end if;

 raise notice 'tipoIncassoToRel=% ',tipoIncassoToRel;



 return tipoIncassoToRel;

exception
    when RAISE_EXCEPTION THEN
        RAISE EXCEPTION '%',coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 1000),'');
        return tipoIncassoToRel;
    when TOO_MANY_ROWS THEN
        RAISE EXCEPTION '% Diverse righe lette.',coalesce(strMessaggio,'');
        return tipoIncassoToRel;
   when no_data_found then
	    RAISE EXCEPTION '% Non presente in archivio.',coalesce(strMessaggio,'');
        return tipoIncassoToRel;
	when others  THEN
 		RAISE EXCEPTION '% Errore DB % %',coalesce(strMessaggio,''),SQLSTATE,substring(SQLERRM from 1 for 1000);
        return tipoIncassoToRel;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_piazzatura_splus(accreditoTipoId integer,
                                                         codiceFunzione varchar,
														 paramPiazzatura varchar,
                                                         tipoPagamento varchar,
                                                         dataElaborazione timestamp,
                                                         dataFineVal timestamp,
                                                         enteProprietarioId integer)
RETURNS boolean AS
$body$
DECLARE

strMessaggio varchar(1500):=null;


SEPARATORE  CONSTANT VARCHAR:='|';

flagPiazzatura boolean:=false;
numeroMDPPiazzatura integer:=0;
countPiazzatura integer:=1;
numeroFunzioneStr VARCHAR(10):=null;
MDPPiazzatura varchar(150):=null;
piazzaturaOK integer:=null;

funzione varchar(15):=null;
regPar varchar(50):=null;

numeroFunzione integer:=0;

BEGIN

 -- piazzatura da valorizzare se
 -- 1. accreditoTipoId in una di quelle passate in paramPiazzatura
 -- 2. and codiceFunzione in uno di quelli passati in paramPiazzatura
 -- 3. and tipoPamento non regolarizzazione ( provvisori di cassa )

 strMessaggio:='Verifica ordinativo con piazzatura.';

 -- 1.
 if paramPiazzatura is not null then
 	strMessaggio:='Verifica ordinativo con piazzatura per accredito tipo.';
    numeroMDPPiazzatura:=trim (both ' ' from split_part(paramPiazzatura,SEPARATORE,1))::integer;
    if numeroMDPPiazzatura>0 then
     loop
	    MDPPiazzatura:=trim (both ' ' from split_part(paramPiazzatura,SEPARATORE,countPiazzatura+1));
        if MDPPiazzatura is not null then
        	 select 1 into piazzaturaOK
             from siac_d_accredito_tipo tipo, siac_d_accredito_gruppo gruppo
             where tipo.accredito_tipo_id=accreditoTipoId
             and   tipo.data_cancellazione is null
	       	 and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
-- 		     and   date_trunc('day',dataFineVal)<=date_trunc('day',coalesce(tipo.validita_fine,dataFineVal)) 19.01.2017
 		     and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione))
             and   gruppo.accredito_gruppo_id=tipo.accredito_gruppo_id
             and   gruppo.accredito_gruppo_code=MDPPiazzatura
             and   gruppo.data_cancellazione is null
         	 and   date_trunc('day',dataElaborazione)>=date_trunc('day',gruppo.validita_inizio)
-- 		  	 and   date_trunc('day',dataFineVal)<=date_trunc('day',coalesce(gruppo.validita_fine,dataFineVal)); 19.01.2017
 		  	 and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(gruppo.validita_fine,dataElaborazione));

        else countPiazzatura:=numeroMDPPiazzatura+1;
        end if;
        countPiazzatura:=countPiazzatura+1;
      exit when (countPiazzatura>numeroMDPPiazzatura or piazzaturaOK is not null);
     end loop;
    end if;

    if piazzaturaOK is not null then
     	-- 2.
       	strMessaggio:='Verifica ordinativo con piazzatura per codice funzione.';
		numeroFunzione:=trim (both ' ' from split_part(paramPiazzatura,SEPARATORE,numeroMDPPiazzatura+2));
        if numeroFunzione>0 then
        	countPiazzatura:=1;
            piazzaturaOK:=null;
    		loop
            	funzione:=trim (both ' ' from split_part(paramPiazzatura,SEPARATORE,countPiazzatura+numeroMDPPiazzatura+2));
                if funzione is not null and funzione=codiceFunzione then
                	piazzaturaOK:=1;
                elsif funzione is  null then
                	countPiazzatura:=numeroFunzione+1;
                end if;
                countPiazzatura:=countPiazzatura+1;
                exit when (countPiazzatura>numeroFunzione or piazzaturaOK is not null);
            end loop;
        end if;
    end if;

    -- 17.10.2017 Sofia - SIOPE+
	-- se REGOLARIZZAZIONE la piazzatura non deve essere esposta
    -- 3.
    if piazzaturaOK is not null then
       	strMessaggio:='Verifica ordinativo REGOLARIZZAZIONE.';
    	regPar:=trim (both ' ' from split_part(paramPiazzatura,'@',2));
        if regPar is not null and
           tipoPagamento is not null and
           regPar=tipoPagamento then
           piazzaturaOK:=null;
        end if;
    end if;
    -- 17.10.2017 Sofia - SIOPE+

    -- 04.12.2017 Sofia - SIOPE+
	-- se COMPENSAZIONE la piazzatura non deve essere esposta
    -- 3.
    if piazzaturaOK is not null then
       	strMessaggio:='Verifica ordinativo COMPENSAZIONE.';
    	regPar:=trim (both ' ' from split_part(paramPiazzatura,'@',3));
        if regPar is not null and
           tipoPagamento is not null and
           regPar=tipoPagamento then
           piazzaturaOK:=null;
        end if;
    end if;
    -- 04.12.2017 Sofia - SIOPE+

 end if;

 if piazzaturaOK is not null then
 	flagPiazzatura:=true;
 end if;


 return flagPiazzatura;


exception
    when RAISE_EXCEPTION THEN
        RAISE EXCEPTION '%',coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 1000),'');
        return flagPiazzatura;
    when TOO_MANY_ROWS THEN
        RAISE EXCEPTION '% Diverse righe lette.',coalesce(strMessaggio,'');
        return flagPiazzatura;
   when no_data_found then
	    RAISE EXCEPTION '% Non presente in archivio.',coalesce(strMessaggio,'');
        return flagPiazzatura;
	when others  THEN
 		RAISE EXCEPTION '% Errore DB % %',coalesce(strMessaggio,''),SQLSTATE,substring(SQLERRM from 1 for 1000);
        return flagPiazzatura;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;





CREATE OR REPLACE FUNCTION fnc_mif_isDocumentoCommerciale_splus( docId integer,
                                                                 fprTipoCode varchar,
                                                                 fatGruppoCode varchar,
                                                                 ncdGruppoCode varchar)
RETURNS boolean AS
$body$
DECLARE

strMessaggio varchar(1500):=null;

isCommerciale boolean:=false;
docGruppoTipoId integer :=null;

docTipoCode  varchar(100):=null;
docGruppoTipoCode varchar(100):=null;
BEGIN


 select tipo.doc_tipo_code, tipo.doc_gruppo_tipo_id
        into docTipoCode , docGruppoTipoId
 from siac_t_doc doc,  siac_d_doc_tipo tipo
 where doc.doc_id=docId
 and   tipo.doc_tipo_id=doc.doc_tipo_id;

 if docGruppoTipoId is null
    and docTipoCode is not null
    and docTipoCode=fprTipoCode then
    isCommerciale:=true;
 end if;

 if isCommerciale=false
    and docGruppoTipoId is not null then
    select gruppo.doc_gruppo_tipo_code into docGruppoTipoCode
    from siac_d_doc_gruppo gruppo
    where gruppo.doc_gruppo_tipo_id=docGruppoTipoId;

    if docGruppoTipoCode is not null
       and docGruppoTipoCode in (fatGruppoCode,ncdGruppoCode) then
       isCommerciale:=true;
    end if;
 end if;

 return isCommerciale;




exception
    when RAISE_EXCEPTION THEN
        RAISE EXCEPTION '%',coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 1000),'');
        return isCommerciale;
    when TOO_MANY_ROWS THEN
        RAISE EXCEPTION '% Diverse righe lette.',coalesce(strMessaggio,'');
        return isCommerciale;
   when no_data_found then
	    RAISE EXCEPTION '% Non presente in archivio.',coalesce(strMessaggio,'');
        return isCommerciale;
	when others  THEN
 		RAISE EXCEPTION '% Errore DB % %',coalesce(strMessaggio,''),SQLSTATE,substring(SQLERRM from 1 for 1000);
        return isCommerciale;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_documenti_splus( ordinativoId integer,
 													           numeroDocumenti integer,
                                                               tipiDocumento   varchar,
                                                               docAnalogico    varchar,
                                                               attrCodeDataScad varchar,
                                                               titoloCap        varchar,
                                                               codicePccUfficio varchar,
                                                   	           enteProprietarioId integer,
                                                               dataElaborazione timestamp,
                                                               dataFineVal timestamp)
RETURNS TABLE
(
    codice_ipa_ente_siope           varchar,
    tipo_documento_siope            varchar,
    tipo_documento_siope_a           varchar,
    identificativo_lotto_sdi_siope  varchar,
    tipo_documento_analogico_siope  varchar,
    codice_fiscale_emittente_siope  varchar,
    anno_emissione_fattura_siope    varchar,
    numero_fattura_siope  	        varchar,
    importo_siope                   varchar,
    data_scadenza_pagam_siope       varchar,
    motivo_scadenza_siope           varchar,
    natura_spesa_siope              varchar

 ) AS
$body$
DECLARE

strMessaggio varchar(1500):=null;
documentiRec record;


motivoScadenza    varchar(500):=null;
dataScadDopoSosp  varchar(500):=null;
tipoDocAnalogico  varchar(500):=null;
codFiscElettronico varchar(100):=null;

DOC_TIPO_ALG      CONSTANT varchar:='ALG';

numeroDocs integer:=1;

tipoDocFPR   varchar(10):=null;
tipoGruppoDocFAT   varchar(10):=null;
tipoGruppoDocNCD   varchar(10):=null;

docPrincId integer:=null;
countNcdCalc integer:=0;
importoNcd numeric:=0;
importoDoc numeric:=0;
importoNcdRipart numeric:=0;
BEGIN

 strMessaggio:='Lettura documenti collegati.';

 codice_ipa_ente_siope:=null;
 tipo_documento_siope:=null;
 tipo_documento_siope_a:=null;

 identificativo_lotto_sdi_siope:=null;
 tipo_documento_analogico_siope:=null;
 codice_fiscale_emittente_siope:=null;
 anno_emissione_fattura_siope:=null;
 numero_fattura_siope:=null;
 importo_siope:=null;
 data_scadenza_pagam_siope:=null;
 motivo_scadenza_siope:=null;
 natura_spesa_siope:=null;


 strMessaggio:='Lettura documenti collegati.Inizio ciclo lettura.';
-- raise notice 'strMessaggio =%',strMessaggio;

 tipoDocFPR:=trim (both ' ' from split_part(tipiDocumento,'|',1));

 tipoGruppoDocFAT:=trim (both ' ' from split_part(tipiDocumento,'|',2));
 tipoGruppoDocFAT:=trim (both ' ' from split_part(tipoGruppoDocFAT,',',1));


 tipoGruppoDocNCD:=trim (both ' ' from split_part(tipiDocumento,'|',2));
 tipoGruppoDocNCD:=trim (both ' ' from split_part(tipoGruppoDocNCD,',',2));

 --raise notice 'tipoDocFPR =%',tipoDocFPR;
--  raise notice 'tipoGruppoDocFAT =%',tipoGruppoDocFAT;
--   raise notice 'tipoGruppoDocNCD =%',tipoGruppoDocNCD;

/* for documentiRec in
 ( select doc.doc_anno annoDoc, doc.doc_numero numeroDoc, tipo.doc_tipo_code tipoDoc,
          lpad(extract('day' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
          lpad(extract('month' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
          extract('year' from doc.doc_data_emissione) dataDoc,
          sog.codice_fiscale codfiscDoc, sog.partita_iva partivaDoc,
          doc.doc_id docId,
          doc.pccuff_id pccuffId,
          subdoc.subdoc_data_scadenza datascadDoc,
          doc.siope_documento_tipo_id siopeDocTipoId,
          doc.doc_sdi_lotto_siope  siopeSdiLotto,
          doc.siope_documento_tipo_analogico_id siopeDocAnTipoId,
          sum(subdoc.subdoc_importo) importoDoc
   from siac_t_doc doc, siac_t_subdoc subdoc, siac_r_subdoc_ordinativo_ts subdocTs,
        siac_t_ordinativo_ts ordts, siac_d_doc_tipo tipo,
        siac_r_doc_sog rsog, siac_t_soggetto sog
   where ordts.ord_id=ordinativoId
   and   subdocts.ord_ts_id=ordts.ord_ts_id
   and   subdoc.subdoc_id=subdocts.subdoc_id
   and   doc.doc_id=subdoc.doc_id
   and   tipo.doc_tipo_id=doc.doc_tipo_id
--   and   fnc.isCommerciale=true
   and   fnc_mif_isDocumentoCommerciale_splus(doc.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true -- 'FPR','FAT','NCD')=true
   and   tipo.doc_tipo_code!=DOC_TIPO_ALG
   and   rsog.doc_id=doc.doc_id
   and   sog.soggetto_id=rsog.soggetto_id
   and   ordts.data_cancellazione is null and ordts.validita_fine is null
   and   subdocts.data_cancellazione is null AND subdocts.validita_fine is null
   and   subdoc.data_cancellazione is null and subdoc.validita_fine is null
   and   doc.data_cancellazione is null and doc.validita_fine is null
   and   tipo.data_cancellazione is null
   and   rsog.data_cancellazione is null and rsog.validita_fine is null
   and   sog.data_cancellazione is null
   and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
   and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione))
   group by doc.doc_anno , doc.doc_numero , tipo.doc_tipo_code,
          lpad(extract('day' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
          lpad(extract('month' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
          extract('year' from doc.doc_data_emissione),
          sog.codice_fiscale, sog.partita_iva, doc.doc_id,doc.pccuff_id,subdoc.subdoc_data_scadenza,
          doc.siope_documento_tipo_id, doc.doc_sdi_lotto_siope,doc.siope_documento_tipo_analogico_id
   union
   select docNcd.doc_anno annoDoc, docNcd.doc_numero numeroDoc, tipoNcd.doc_tipo_code tipoDoc,
          lpad(extract('day' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
          lpad(extract('month' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
          extract('year' from docNcd.doc_data_emissione) dataDoc,
          sog.codice_fiscale codfiscDoc, sog.partita_iva partivaDoc,
          docNcd.doc_id docId,
          docNcd.pccuff_id pccuffId,
          subNcd.subdoc_data_scadenza datascadDoc,
          docNcd.siope_documento_tipo_id siopeDocTipoId,
          docNcd.doc_sdi_lotto_siope  siopeSdiLotto,
          docNcd.siope_documento_tipo_analogico_id siopeDocAnTipoId,
          sum(subdoc.subdoc_importo_da_dedurre) importoDoc -- somm subdoc_importo_da_dedurre / numero di note collegate
   from siac_t_doc doc, siac_t_subdoc subdoc, siac_r_subdoc_ordinativo_ts subdocTs,
        siac_t_ordinativo_ts ordts, siac_d_doc_tipo tipo,
        siac_r_doc rdoc, siac_d_relaz_tipo tipoRel,
        siac_t_doc docNcd, siac_t_subdoc subNcd, siac_d_doc_tipo tipoNcd,
        siac_r_doc_sog rsog, siac_t_soggetto sog
   where ordts.ord_id=ordinativoId
   and   subdocts.ord_ts_id=ordts.ord_ts_id
   and   subdoc.subdoc_id=subdocts.subdoc_id
   and   doc.doc_id=subdoc.doc_id
   and   tipo.doc_tipo_id=doc.doc_tipo_id
   and   fnc_mif_isDocumentoCommerciale_splus(doc.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
   and   tipo.doc_tipo_code!=DOC_TIPO_ALG
   and   rdoc.doc_id_da=doc.doc_id
   and   docncd.doc_id=rdoc.doc_id_a
   and   tipoRel.relaz_tipo_id=rdoc.relaz_tipo_id
   and   tipoRel.relaz_tipo_code=tipoGruppoDocNCD
   and   fnc_mif_isDocumentoCommerciale_splus(docNcd.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
   and   subNcd.doc_id=docNcd.doc_id
   and   tipoNcd.doc_tipo_id=docNcd.doc_tipo_id
   and   rsog.doc_id=docNcd.doc_id
   and   sog.soggetto_id=rsog.soggetto_id
   and   ordts.data_cancellazione is null and ordts.validita_fine is null
   and   subdocts.data_cancellazione is null AND subdocts.validita_fine is null
   and   subdoc.data_cancellazione is null and subdoc.validita_fine is null
   and   doc.data_cancellazione is null and doc.validita_fine is null
   and   subNcd.data_cancellazione is null and subNcd.validita_fine is null
   and   docNcd.data_cancellazione is null and docNcd.validita_fine is null
   and   rsog.data_cancellazione is null and rsog.validita_fine is null
   and   rdoc.data_cancellazione is null and rdoc.validita_fine is null
   and   sog.data_cancellazione is null
   group by docNcd.doc_anno , docNcd.doc_numero , tipoNcd.doc_tipo_code,
          lpad(extract('day' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
          lpad(extract('month' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
          extract('year' from docNcd.doc_data_emissione),
          sog.codice_fiscale, sog.partita_iva, docNcd.doc_id,docNcd.pccuff_id,subNcd.subdoc_data_scadenza,
          docNcd.siope_documento_tipo_id, docNcd.doc_sdi_lotto_siope,docNcd.siope_documento_tipo_analogico_id
   order by 3, 1,2
 )*/
 for documentiRec in
 (
  select doc.doc_anno annoDoc, doc.doc_numero numeroDoc, tipo.doc_tipo_code tipoDoc,
        'P'::varchar tipoColl,doc.doc_id docPrincId,
        null annoDocNcd, null numeroDocNcd, null tipoDocNcd,
        lpad(extract('day' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
        lpad(extract('month' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
        extract('year' from doc.doc_data_emissione) dataDoc,
        sog.codice_fiscale codfiscDoc, sog.partita_iva partivaDoc,
        doc.doc_id docId,
        doc.pccuff_id pccuffId,
        subdoc.subdoc_data_scadenza datascadDoc,
        doc.siope_documento_tipo_id siopeDocTipoId,
        doc.doc_sdi_lotto_siope  siopeSdiLotto,
        doc.siope_documento_tipo_analogico_id siopeDocAnTipoId,
        sum(subdoc.subdoc_importo) importoDoc,
        null importoNcd,null numeroNcd,
        null importoRipartNcd
  from siac_t_doc doc, siac_t_subdoc subdoc, siac_r_subdoc_ordinativo_ts subdocTs,
       siac_t_ordinativo_ts ordts, siac_d_doc_tipo tipo,
       siac_r_doc_sog rsog, siac_t_soggetto sog
  where ordts.ord_id=ordinativoId
  and   subdocts.ord_ts_id=ordts.ord_ts_id
  and   subdoc.subdoc_id=subdocts.subdoc_id
  and   doc.doc_id=subdoc.doc_id
  and   tipo.doc_tipo_id=doc.doc_tipo_id
  and   fnc_mif_isDocumentoCommerciale_splus(doc.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
  and   tipo.doc_tipo_code!=DOC_TIPO_ALG
  and   rsog.doc_id=doc.doc_id
  and   sog.soggetto_id=rsog.soggetto_id
  and   ordts.data_cancellazione is null and ordts.validita_fine is null
  and   subdocts.data_cancellazione is null AND subdocts.validita_fine is null
  and   subdoc.data_cancellazione is null and subdoc.validita_fine is null
  and   doc.data_cancellazione is null and doc.validita_fine is null
  and   tipo.data_cancellazione is null
  and   rsog.data_cancellazione is null and rsog.validita_fine is null
  and   sog.data_cancellazione is null
  and   date_trunc('day',now()::timestamp)>=date_trunc('day',tipo.validita_inizio)
  and   date_trunc('day',now()::timestamp)<=date_trunc('day',coalesce(tipo.validita_fine,now()::timestamp))
  group by doc.doc_anno , doc.doc_numero , tipo.doc_tipo_code,
           lpad(extract('day' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
           lpad(extract('month' from doc.doc_data_emissione)::varchar,2,'0')||'/'||
           extract('year' from doc.doc_data_emissione),
           sog.codice_fiscale, sog.partita_iva, doc.doc_id,doc.pccuff_id,subdoc.subdoc_data_scadenza,
           doc.siope_documento_tipo_id, doc.doc_sdi_lotto_siope,doc.siope_documento_tipo_analogico_id
  union
  (
   with
   docS as
   (
    select doc.doc_anno annoDoc, doc.doc_numero numeroDoc, tipo.doc_tipo_code tipoDoc,
           'S'::varchar tipoColl,doc.doc_id docPrincId,
           docNcd.doc_anno annoDocNcd, docNcd.doc_numero numeroDocNcd, tipoNcd.doc_tipo_code tipoDocNcd,
           lpad(extract('day' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
           lpad(extract('month' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
           extract('year' from docNcd.doc_data_emissione) dataDoc,
           sog.codice_fiscale codfiscDoc, sog.partita_iva partivaDoc,
           docNcd.doc_id docId,
           docNcd.pccuff_id pccuffId,
           subNcd.subdoc_data_scadenza datascadDoc,
           docNcd.siope_documento_tipo_id siopeDocTipoId,
           docNcd.doc_sdi_lotto_siope  siopeSdiLotto,
           docNcd.siope_documento_tipo_analogico_id siopeDocAnTipoId,
           sum(subdoc.subdoc_importo) importoDoc,
           sum(subdoc.subdoc_importo_da_dedurre) importoNcd
    from siac_t_doc doc, siac_t_subdoc subdoc, siac_r_subdoc_ordinativo_ts subdocTs,
         siac_t_ordinativo_ts ordts, siac_d_doc_tipo tipo,
         siac_r_doc rdoc, siac_d_relaz_tipo tipoRel,
         siac_t_doc docNcd, siac_t_subdoc subNcd, siac_d_doc_tipo tipoNcd,
         siac_r_doc_sog rsog, siac_t_soggetto sog
    where ordts.ord_id=ordinativoId
    and   subdocts.ord_ts_id=ordts.ord_ts_id
    and   subdoc.subdoc_id=subdocts.subdoc_id
    and   doc.doc_id=subdoc.doc_id
    and   tipo.doc_tipo_id=doc.doc_tipo_id
    and   fnc_mif_isDocumentoCommerciale_splus(doc.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
    and   tipo.doc_tipo_code!=DOC_TIPO_ALG
    and   rdoc.doc_id_da=doc.doc_id
    and   docncd.doc_id=rdoc.doc_id_a
    and   tipoRel.relaz_tipo_id=rdoc.relaz_tipo_id
    and   tipoRel.relaz_tipo_code=tipoGruppoDocNCD
    and   fnc_mif_isDocumentoCommerciale_splus(docNcd.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
    and   subNcd.doc_id=docNcd.doc_id
    and   tipoNcd.doc_tipo_id=docNcd.doc_tipo_id
    and   rsog.doc_id=docNcd.doc_id
    and   sog.soggetto_id=rsog.soggetto_id
    and   ordts.data_cancellazione is null and ordts.validita_fine is null
    and   subdocts.data_cancellazione is null AND subdocts.validita_fine is null
    and   subdoc.data_cancellazione is null and subdoc.validita_fine is null
    and   doc.data_cancellazione is null and doc.validita_fine is null
    and   subNcd.data_cancellazione is null and subNcd.validita_fine is null
    and   docNcd.data_cancellazione is null and docNcd.validita_fine is null
    and   rsog.data_cancellazione is null and rsog.validita_fine is null
    and   rdoc.data_cancellazione is null and rdoc.validita_fine is null
    and   sog.data_cancellazione is null
    group by  doc.doc_anno , doc.doc_numero , tipo.doc_tipo_code,doc.doc_id,
              docNcd.doc_anno , docNcd.doc_numero , tipoNcd.doc_tipo_code,
              lpad(extract('day' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
              lpad(extract('month' from docNcd.doc_data_emissione)::varchar,2,'0')||'/'||
              extract('year' from docNcd.doc_data_emissione),
              sog.codice_fiscale, sog.partita_iva, docNcd.doc_id,docNcd.pccuff_id,subNcd.subdoc_data_scadenza,
              docNcd.siope_documento_tipo_id, docNcd.doc_sdi_lotto_siope,docNcd.siope_documento_tipo_analogico_id
   ),
   docCountNcd as
   (
    select doc.doc_anno annoDoc, doc.doc_numero numeroDoc, tipo.doc_tipo_code tipoDoc,
           'S'::varchar tipoColl,doc.doc_id docPrincId,
           count(*) numeroNcd
    from siac_t_doc doc, siac_t_subdoc subdoc, siac_r_subdoc_ordinativo_ts subdocTs,
         siac_t_ordinativo_ts ordts, siac_d_doc_tipo tipo,
         siac_r_doc rdoc, siac_d_relaz_tipo tipoRel,
         siac_t_doc docNcd, siac_t_subdoc subNcd, siac_d_doc_tipo tipoNcd
    where ordts.ord_id=ordinativoId
    and   subdocts.ord_ts_id=ordts.ord_ts_id
    and   subdoc.subdoc_id=subdocts.subdoc_id
    and   doc.doc_id=subdoc.doc_id
    and   tipo.doc_tipo_id=doc.doc_tipo_id
    and   fnc_mif_isDocumentoCommerciale_splus(doc.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
    and   tipo.doc_tipo_code!=DOC_TIPO_ALG
    and   rdoc.doc_id_da=doc.doc_id
    and   docncd.doc_id=rdoc.doc_id_a
    and   tipoRel.relaz_tipo_id=rdoc.relaz_tipo_id
    and   tipoRel.relaz_tipo_code=tipoGruppoDocNCD
    and   fnc_mif_isDocumentoCommerciale_splus(docNcd.doc_id,tipoDocFPR,tipoGruppoDocFAT,tipoGruppoDocNCD)=true
    and   subNcd.doc_id=docNcd.doc_id
    and   tipoNcd.doc_tipo_id=docNcd.doc_tipo_id
    and   ordts.data_cancellazione is null and ordts.validita_fine is null
    and   subdocts.data_cancellazione is null AND subdocts.validita_fine is null
    and   subdoc.data_cancellazione is null and subdoc.validita_fine is null
    and   doc.data_cancellazione is null and doc.validita_fine is null
    and   subNcd.data_cancellazione is null and subNcd.validita_fine is null
    and   docNcd.data_cancellazione is null and docNcd.validita_fine is null
    and   rdoc.data_cancellazione is null and rdoc.validita_fine is null
    group by doc.doc_anno , doc.doc_numero, tipo.doc_tipo_code ,doc.doc_id
   )
   select docS.*,
          docCountNcd.numeroNcd, round(docS.importoNcd/docCountNcd.numeroNcd,2) importoRipartNcd
   from docS, docCountNcd
   where docS.docPrincId=docCountNcd.docPrincId
  )
  order by 1,2,3,4,6,7,8
 )
 loop

    strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.';
   -- raise notice 'strMessaggio =%',strMessaggio;

    codice_ipa_ente_siope:=null;          -- ok siac_t_doc.pccuff_id
    tipo_documento_siope:=null;           -- ok siac_t_doc.siope_documento_tipo_id
    tipo_documento_siope_a:=null;         -- ok siac_t_doc.siope_documento_tipo_id
    identificativo_lotto_sdi_siope:=null; -- ok siac_t_doc.doc_sdi_lotto_siope
    tipo_documento_analogico_siope:=null; -- ok solo per doc ANALOGICO doc.siope_documento_tipo_analogico_id
    codice_fiscale_emittente_siope:=null; -- ok
    anno_emissione_fattura_siope:=null;   -- ok
    numero_fattura_siope:=null;           -- ok
    importo_siope:=null;                  -- ok
    data_scadenza_pagam_siope:=null;      -- dataScadenzaDopoSospensione ok
    motivo_scadenza_siope:=null;          -- ok siac_t_subdoc.siope_scadenza_motivo_id
    natura_spesa_siope:=null;             -- CORRENTE/CAPITALE da capitolo

	motivoScadenza:=null;
    dataScadDopoSosp:=null;
    tipoDocAnalogico:=null;
    codFiscElettronico:=null;

--    raise notice 'strMessaggio =%',strMessaggio;


    if documentiRec.pccuffId is not null then
        strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.'||' Lettura codice ufficio [siac_d_pcc_ufficio].';

--		 raise notice 'strMessaggio 2 =%',strMessaggio;

    	select pcc.pccuff_code into codice_ipa_ente_siope
        from siac_d_pcc_ufficio pcc
        where pcc.pccuff_id=documentiRec.pccuffId;
    else
        if codicePccUfficio is not null then
        	codice_ipa_ente_siope:=codicePccUfficio;
        end if;
    end if;

    if documentiRec.siopeDocTipoId is not null then
    	strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.'||' Lettura tipo documento siope [siac_d_siope_documento_tipo].';

        select upper(tipo.siope_documento_tipo_desc_bnkit) into tipoDocAnalogico
        from siac_d_siope_documento_tipo tipo
        where tipo.siope_documento_tipo_id=documentiRec.siopeDocTipoId;

        if tipoDocAnalogico is not null   then
         if tipoDocAnalogico=docAnalogico then
        	  tipo_documento_siope_a:=tipoDocAnalogico; -- ANALOGICO
         else
              tipo_documento_siope:=tipoDocAnalogico;   -- ELETTRONCIO

              if documentiRec.siopeSdiLotto is not null then
	              identificativo_lotto_sdi_siope:=documentiRec.siopeSdiLotto;
              end if;

         end if;
        end if;
    end if;

    -- se documento analogico
    if tipo_documento_siope_a is not null and
       documentiRec.siopeDocAnTipoId is not null then

       strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.'||' Lettura tipo documento analogico siope [siac_d_siope_documento_tipo_analogico].';
       select upper(tipo.siope_documento_tipo_analogico_desc_bnkit) into tipo_documento_analogico_siope
       from siac_d_siope_documento_tipo_analogico tipo
       where tipo.siope_documento_tipo_analogico_id=documentiRec.siopeDocAnTipoId;

	  codice_fiscale_emittente_siope:=documentiRec.codfiscDoc;
      if documentiRec.tipoColl='P' then
	     anno_emissione_fattura_siope:=documentiRec.annoDoc::varchar;
      else
         anno_emissione_fattura_siope:=documentiRec.annoDocNcd::varchar;
      end if;
    end if;


   	if documentiRec.docPrincId!=coalesce(docPrincId,-1) then
		docPrincId:=documentiRec.docPrincId;
        importoDoc:=documentiRec.importoDoc;
        countNcdCalc:=1;
    end if;
 /*   raise notice 'docPrincId=%',docPrincId;
    raise notice 'importoNcd=%',importoNcd;
    raise notice 'countNcdCalc=%',countNcdCalc;
    raise notice 'tipoColl=%',documentiRec.tipoColl;
    raise notice 'importoNcdRipart=%',importoNcdRipart;
    raise notice 'documentiRec.importoRipartNcd=%',documentiRec.importoRipartNcd;*/

    if documentiRec.tipoColl='S' then
        importoNcd:=documentiRec.importoNcd;
        importoNcdRipart:=importoNcdRipart+documentiRec.importoRipartNcd;
		countNcdCalc:=countNcdCalc+1;
        if countNcdCalc>documentiRec.numeroNcd then
        	if importoNcdRipart!=importoNcd then
				documentiRec.importoRipartNcd:=documentiRec.importoRipartNcd+(importoNcd-importoNcdRipart);
            end if;
        end if;
    end if;



    if documentiRec.tipoColl='P' then
        numero_fattura_siope:=documentiRec.numeroDoc;
	    importo_siope:=documentiRec.importoDoc::varchar;
    else
        numero_fattura_siope:=documentiRec.numeroDocNcd;
    	importo_siope:=documentiRec.importoRipartNcd::varchar;
    end if;

    -- se importo=0  non resistuisco dati
    if importo_siope::numeric =0 then
    	continue;
    end if;
--    		 raise notice 'strMessaggio 3 =%',strMessaggio;


    -- se documento elettronico vado a cercare il codice fiscale del documento FEL
/*    if tipo_documento_siope is not null then

        strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.'||' Lettura tipo documento analogico siope [siac_d_siope_documento_tipo_analogico].';

        select presta.codice_prestatore into codFiscElettronico
	    from siac_r_doc_sirfel rs,
	         sirfel_t_fattura fel,sirfel_t_prestatore presta
		where rs.doc_id=documentiRec.docId
		and   fel.id_fattura=rs.id_fattura
	    and   presta.id_prestatore=fel.id_prestatore
		and   rs.data_cancellazione is null
		and   rs.validita_fine is null;

        if codFiscElettronico is not null and
           codFiscElettronico!=codice_fiscale_emittente_siope then
           codice_fiscale_emittente_siope:=codFiscElettronico;
        end if;
    end if;
*/

--		 raise notice 'strMessaggio 4 =%',strMessaggio;

    strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.'||' Lettura motivo scadenza.';
-- raise notice 'strMessaggio =%',strMessaggio;

	select  distinct upper(mot.siope_scadenza_motivo_desc_bnkit)  into motivoScadenza
    from siac_t_subdoc sub, siac_d_siope_scadenza_motivo mot
	where sub.doc_id=documentiRec.docId
    and   sub.siope_scadenza_motivo_id is not null
    and   mot.siope_scadenza_motivo_id=sub.siope_scadenza_motivo_id
	and   sub.data_cancellazione is null
	and   sub.validita_fine is null
    limit 1;

    if coalesce(motivoScadenza,'')!='' then
    	motivo_scadenza_siope:=motivoScadenza;
    end if;

    strMessaggio:='Lettura dati documento doc_id='||documentiRec.docId||'.'||' Lettura data scadenza dopo sospensione.';
	select rattr.testo data_scadenza_dopo_sosp into dataScadDopoSosp
	from siac_t_subdoc sub ,siac_r_subdoc_ordinativo_ts rord,siac_t_ordinativo_ts ord,
	     siac_r_subdoc_attr rattr, siac_t_attr attr
	where sub.doc_id=documentiRec.docId
	and   rord.subdoc_id=sub.subdoc_id
	and   ord.ord_ts_id=rord.ord_ts_id
	and   ord.ord_id=ordinativoId
	and   rattr.subdoc_id=sub.subdoc_id
	and   attr.attr_id=rattr.attr_id
	and   attr.attr_code=attrCodeDataScad
	and   rattr.testo is not null
	and   sub.data_cancellazione is null
	and   sub.validita_fine is null
	and   rord.data_cancellazione is null
	and   rord.validita_fine  is null
	and   ord.data_cancellazione is null
	and   ord.validita_fine is null
	and   rattr.data_cancellazione  is null
	and   rattr.validita_fine is null
    limit 1;

    if coalesce(dataScadDopoSosp,'')!='' then
    	data_scadenza_pagam_siope:=substring(dataScadDopoSosp,7,4)||'-'||
        						   substring(dataScadDopoSosp,4,2)||'-'||
                                   substring(dataScadDopoSosp,1,2);
    else
    	if documentiRec.datascadDoc is not null  then
        	data_scadenza_pagam_siope:=extract('year' from documentiRec.datascadDoc)::varchar||'-'||
            					       lpad(extract('month' from documentiRec.datascadDoc)::varchar,2,'0')||'-'||
					                   lpad(extract('day' from documentiRec.datascadDoc)::varchar,2,'0');
        end if;
    end if;
    natura_spesa_siope:=titoloCap;


    exit when numeroDocs>numeroDocumenti;

	return next;

    numeroDocs:=numeroDocs+1;
 end loop;

 --raise notice 'numeroDocs %',numeroDocs;

 return;


exception
    when RAISE_EXCEPTION THEN
        RAISE EXCEPTION '%',coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 1000),'');
        return;
    when TOO_MANY_ROWS THEN
        RAISE EXCEPTION '% Diverse righe lette.',coalesce(strMessaggio,'');
        return;
   when no_data_found then
	    RAISE EXCEPTION '% Non presente in archivio.',coalesce(strMessaggio,'');
        return;
	when others  THEN
 		RAISE EXCEPTION '% Errore DB % %',coalesce(strMessaggio,''),SQLSTATE,substring(SQLERRM from 1 for 1000);
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_spesa_splus (
  enteproprietarioid integer,
  nomeente varchar,
  annobilancio varchar,
  loginoperazione varchar,
  dataelaborazione timestamp,
  mifordritrasmelabid integer,
  out flussoelabmifdistoilid integer,
  out flussoelabmifid integer,
  out numeroordinativitrasm integer,
  out nomefilemif varchar,
  out codicerisultato integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE


 strMessaggio VARCHAR(1500):='';
 strMessaggioFinale VARCHAR(1500):='';
 strMessaggioScarto VARCHAR(1500):='';
 strExecSql VARCHAR(1500):='';

 mifOrdinativoIdRec record;

 mifFlussoOrdinativoRec  mif_t_ordinativo_spesa%rowtype;


 mifFlussoElabMifArr flussoElabMifRecType[];


 mifCountRec integer:=1;
 mifCountTmpRec integer:=1;
 mifAFlussoElabTypeRec  flussoElabMifRecType;
 flussoElabMifElabRec  flussoElabMifRecType;
 mifElabRec record;

 attoAmmRec record;
 enteOilRec record;
 enteProprietarioRec record;
 soggettoRec record;
 soggettoSedeRec record;
 soggettoQuietRec record;
 soggettoQuietRifRec record;
 MDPRec record;
 codAccreRec record;
 bilElemRec record;
 indirizzoRec record;
 ordSostRec record;


 tipoPagamRec record;
 ritenutaRec record;
 ricevutaRec record;
 quoteOrdinativoRec record;
 ordRec record;


 isIndirizzoBenef boolean:=false;
 isIndirizzoBenQuiet boolean:=false;

 flussoElabMifValore varchar (1000):=null;
 flussoElabMifValoreDesc varchar (1000):=null;

 ordNumero numeric:=null;
 ordAnno  integer:=null;
 attoAmmTipoSpr varchar(50):=null;
 attoAmmTipoAll varchar(50):=null;
 attoAmmTipoAllAll varchar(50):=null;

 attoAmmStrTipoRag  varchar(50):=null;
 attoAmmTipoAllRag varchar(50):=null;


 tipoMDPCbi varchar(50):=null;
 tipoMDPCsi varchar(50):=null;
 tipoMDPCo  varchar(50):=null;
 tipoMDPCCP varchar(50):=null;
 tipoMDPCB  varchar(50):=null;
 tipoPaeseCB varchar(50):=null;
 avvisoTipoMDPCo varchar(50):=null;
 codiceCge  varchar(50):=null;
 siopeDef   varchar(50):=null;
 codResult   integer:=null;

 indirizzoEnte varchar(500):=null;
 localitaEnte varchar(500):=null;
 soggettoEnteId INTEGER:=null;
 soggettoRifId integer:=null;
 soggettoSedeSecId integer:=null;
 soggettoQuietId integer:=null;
 soggettoQuietRifId integer:=null;
 accreditoGruppoCode varchar(15):=null;




 flussoElabMifLogId  integer :=null;
 flussoElabMifTipoId integer :=null;
 flussoElabMifTipoNomeFile varchar(500):=null;
 flussoElabMifTipoDec BOOLEAN:=false;
 flussoElabMifOilId integer :=null;
 flussoElabMifDistOilRetId integer:=null;
 mifOrdSpesaId integer:=null;

 dataInizioVal timestamp :=annoBilancio||'-01-01';
 dataFineVal timestamp :=annoBilancio||'-12-31';


 ordImporto numeric :=0;


 ordTipoCodeId integer :=null;
 ordStatoCodeIId  integer :=null;
 ordStatoCodeAId  integer :=null;

 classCdrTipoId INTEGER:=null;
 classCdcTipoId INTEGER:=null;
 ordDetTsTipoId integer :=null;

 ordSedeSecRelazTipoId integer:=null;
 ordRelazCodeTipoId integer :=null;
 ordCsiRelazTipoId  integer:=null;

 noteOrdAttrId integer:=null;

 movgestTsTipoSubId integer:=null;


 famTitSpeMacroAggrCodeId integer:=null;
 titoloUscitaCodeTipoId integer :=null;
 programmaCodeTipoId integer :=null;
 programmaCodeTipo varchar(50):=null;
 famMissProgrCode VARCHAR(50):=null;
 famMissProgrCodeId integer:=null;
 programmaId integer :=null;
 titoloUscitaId integer:=null;



 isPaeseSepa integer:=null;
 ordCodiceBollo  varchar(10):=null;
 ordCodiceBolloDesc varchar(500):=null;
 ordDataScadenza timestamp:=null;

 ordCsiRelazTipo varchar(20):=null;
 ordCsiCOTipo varchar(50):=null;


 ambitoFinId integer:=null;
 anagraficaBenefCBI varchar(500):=null;

 isDefAnnoRedisuo  varchar(5):=null;


 -- ritenute
 tipoRelazRitOrd varchar(10):=null;
 tipoRelazSprOrd varchar(10):=null;
 tipoRelazSubOrd varchar(10):=null;
 tipoRitenuta varchar(10):='R';
 progrRitenuta  varchar(10):=null;
 isRitenutaAttivo boolean:=false;
 tipoOnereIrpefId integer:=null;
 tipoOnereInpsId integer:=null;
 tipoOnereIrpef varchar(10):=null;
 tipoOnereInps varchar(10):=null;

 tipoOnereIrpegId integer:=null;
 tipoOnereIrpeg varchar(10):=null;

 codiceUECodeTipo VARCHAR(50):=null;
 codiceUECodeTipoId integer:=null;
 codiceCofogCodeTipo  VARCHAR(50):=null;
 codiceCofogCodeTipoId integer:=null;
 siopeCodeTipo varchar(50):=null;
 siopeCodeTipoId integer :=null;
 eventoTipoCodeId integer:=null;
 collEventoCodeId integer:=null;

 classifTipoCodeFraz    varchar(50):=null;
 classifTipoCodeFrazVal varchar(50):=null;
 classifTipoCodeFrazId   integer:=null;

 tipoClassFruttifero varchar(100):=null;
 valFruttifero varchar(100):=null;
 valFruttiferoStr varchar(100):=null;
 valFruttiferoStrAltro varchar(100):=null;
 tipoClassFruttiferoId integer:=null;
 valFruttiferoId  integer:=null;

 classVincolatoCode   varchar(100):=null;
 classVincolatoCodeId INTEGER:=null;
 valFruttiferoClassCode   varchar(100):=null;
 valFruttiferoClassCodeId INTEGER:=null;
 valFruttiferoClassCodeSI varchar(100):=null;
 valFruttiferoCodeSI varchar(100):=null;
 valFruttiferoClassCodeNO varchar(100):=null;
 valFruttiferoCodeNO varchar(100):=null;

 cigCausAttrId INTEGER:=null;
 cupCausAttrId INTEGER:=null;
 cigCausAttr   varchar(10):=null;
 cupCausAttr   varchar(10):=null;


 codicePaeseIT varchar(50):=null;
 codiceAccreCB varchar(50):=null;
 codiceAccreCO varchar(50):=null;
 codiceAccreREG varchar(50):=null;
 codiceSepa     varchar(50):=null;
 codiceExtraSepa varchar(50):=null;
 codiceGFB  varchar(50):=null;

 sepaCreditTransfer boolean:=false;
 accreditoGruppoSepaTr varchar(10):=null;
 SepaTr varchar(10):=null;
 paeseSepaTr varchar(10):=null;


 numeroDocs varchar(10):=null;
 tipoDocs varchar(50):=null;
 tipoGruppoDocs varchar(50):=null;

 tipoEsercizio varchar(50):=null;
 statoBeneficiario boolean :=false;
 bavvioFrazAttr boolean :=false;
 dataAvvioFrazAttr timestamp:=null;
 attrfrazionabile VARCHAR(50):=null;

 dataAvvioSiopeNew VARCHAR(50):=null;
 bAvvioSiopeNew   boolean:=false;


 tipoPagamPostA VARCHAR(100):=null;
 tipoPagamPostB VARCHAR(100):=null;

 cupAttrCodeId INTEGER:=null;
 cupAttrCode   varchar(10):=null;
 cigAttrCodeId INTEGER:=null;
 cigAttrCode   varchar(10):=null;
 ricorrenteCodeTipo varchar(50):=null;
 ricorrenteCodeTipoId integer:=null;

 codiceBolloPlusEsente boolean:=false;
 codiceBolloPlusDesc   varchar(100):=null;

 statoDelegatoCredEff boolean :=false;

 comPccAttrId integer:=null;
 pccOperazTipoId integer:=null;


 -- Transazione elementare
 programmaTbr varchar(50):=null;
 codiceFinVTbr varchar(50):=null;
 codiceEconPatTbr varchar(50):=null;
 cofogTbr varchar(50):=null;
 transazioneUeTbr varchar(50):=null;
 siopeTbr varchar(50):=null;
 cupTbr varchar(50):=null;
 ricorrenteTbr varchar(50):=null;
 aslTbr varchar(50):=null;
 progrRegUnitTbr varchar(50):=null;

 codiceFinVTipoTbrId integer:=null;
 cupAttrId integer:=null;
 ricorrenteTipoTbrId integer:=null;
 aslTipoTbrId integer:=null;
 progrRegUnitTipoTbrId integer:=null;

 codiceFinVCodeTbr varchar(50):=null;
 contoEconCodeTbr varchar(50):=null;
 cofogCodeTbr varchar(50):=null;
 codiceUeCodeTbr varchar(50):=null;
 siopeCodeTbr varchar(50):=null;
 cupAttrTbr varchar(50):=null;
 ricorrenteCodeTbr varchar(50):=null;
 aslCodeTbr  varchar(50):=null;
 progrRegUnitCodeTbr varchar(50):=null;



 isGestioneQuoteOK boolean:=false;
 isGestioneFatture boolean:=false;
 isRicevutaAttivo boolean:=false;
 isTransElemAttiva boolean:=false;
 isMDPCo boolean:=false;
 isOrdPiazzatura boolean:=false;

 docAnalogico    varchar(100):=null;
 titoloCorrente   varchar(100):=null;
 descriTitoloCorrente varchar(100):=null;
 titoloCapitale   varchar(100):=null;
 descriTitoloCapitale varchar(100):=null;
 attrCodeDataScad varchar(100):=null;
 titoloCap  varchar(100):=null;

 isOrdCommerciale boolean:=false;

 NVL_STR               CONSTANT VARCHAR:='';


 ORD_TIPO_CODE_P  CONSTANT  varchar :='P';
 ORD_STATO_CODE_I CONSTANT  varchar :='I';
 ORD_STATO_CODE_A CONSTANT  varchar :='A';
 ORD_RELAZ_CODE_SOS  CONSTANT  varchar :='SOS_ORD';
 ORD_TIPO_A CONSTANT  varchar :='A';

 ORD_RELAZ_SEDE_SEC CONSTANT  varchar :='SEDE_SECONDARIA';
 AMBITO_FIN CONSTANT  varchar :='AMBITO_FIN';

 NOTE_ORD_ATTR CONSTANT  varchar :='NOTE_ORDINATIVO';

 CDC CONSTANT varchar:='CDC';
 CDR CONSTANT varchar:='CDR';


 PROGRAMMA               CONSTANT varchar:='PROGRAMMA';
 TITOLO_SPESA            CONSTANT varchar:='TITOLO_SPESA';
 FAM_TIT_SPE_MACROAGGREG CONSTANT varchar:='Spesa - TitoliMacroaggregati';

 FUNZIONE_CODE_I CONSTANT  varchar :='INSERIMENTO'; -- inserimenti
 FUNZIONE_CODE_S CONSTANT  varchar :='SOSTITUZIONE'; -- sostituzioni senza trasmissione
 FUNZIONE_CODE_N CONSTANT  varchar :='ANNULLO'; -- annullamenti prima di trasmissione

 FUNZIONE_CODE_A CONSTANT  varchar :='ANNULLO'; -- annullamenti dopo trasmissione
 FUNZIONE_CODE_VB CONSTANT  varchar :='VARIAZIONE'; -- spostamenti dopo trasmissione


 ORD_TS_DET_TIPO_A CONSTANT varchar:='A';
 MOVGEST_TS_TIPO_S  CONSTANT varchar:='S';

 SPACE_ASCII CONSTANT integer:=32;
 VT_ASCII CONSTANT integer:=13;
 BS_ASCII CONSTANT integer:=10;

 NUM_SETTE CONSTANT integer:=7;
 NUM_DODICI CONSTANT integer:=12;
 ZERO_PAD CONSTANT  varchar :='0';

 ELAB_MIF_ESITO_IN CONSTANT  varchar :='IN';
 MANDMIF_TIPO  CONSTANT  varchar :='MANDMIF_SPLUS';


 COM_PCC_ATTR  CONSTANT  varchar :='flagComunicaPCC';
 PCC_OPERAZ_CPAG  CONSTANT varchar:='CP';

 SEPARATORE     CONSTANT  varchar :='|';



 FLUSSO_MIF_ELAB_TEST_COD_ABI_BT      CONSTANT integer:=1;  -- codice_ABI_BT
 FLUSSO_MIF_ELAB_TEST_COD_ENTE_IPA    CONSTANT integer:=4;  -- codice_ente
 FLUSSO_MIF_ELAB_TEST_DESC_ENTE       CONSTANT integer:=5;  -- descrizione_ente
 FLUSSO_MIF_ELAB_TEST_COD_ISTAT_ENTE  CONSTANT integer:=6;  -- codice_istat_ente
 FLUSSO_MIF_ELAB_TEST_CODFISC_ENTE    CONSTANT integer:=7;  -- codice_fiscale_ente
 FLUSSO_MIF_ELAB_TEST_CODTRAMITE_ENTE CONSTANT integer:=8;  -- codice_tramite_ente
 FLUSSO_MIF_ELAB_TEST_CODTRAMITE_BT   CONSTANT integer:=9;  -- codice_tramite_bt
 FLUSSO_MIF_ELAB_TEST_COD_ENTE_BT     CONSTANT integer:=10; -- codice_ente_bt
 FLUSSO_MIF_ELAB_TEST_RIFERIMENTO_ENTE CONSTANT integer:=11; -- riferimento_ente
 FLUSSO_MIF_ELAB_TEST_ESERCIZIO       CONSTANT integer:=12; -- riferimento_ente

 FLUSSO_MIF_ELAB_INIZIO_ORD     CONSTANT integer:=13;  -- tipo_operazione

 FLUSSO_MIF_ELAB_FATTURE        CONSTANT integer:=53;  -- fattura_siope_codice_ipa_ente_siope
 FLUSSO_MIF_ELAB_FATT_CODFISC   CONSTANT integer:=58;  -- fattura_siope_codice_fiscale_emittente_siope
 FLUSSO_MIF_ELAB_FATT_DATASCAD_PAG CONSTANT integer:=62; -- data_scadenza_pagam_siope
 FLUSSO_MIF_ELAB_FATT_NATURA_PAG CONSTANT integer:=64; -- natura_spesa_siope
 FLUSSO_MIF_ELAB_NUM_SOSPESO    CONSTANT integer:=122; -- numero_provvisorio
 FLUSSO_MIF_ELAB_RITENUTA       CONSTANT integer:=124; -- importo_ritenuta
 FLUSSO_MIF_ELAB_RITENUTA_PRG   CONSTANT integer:=126; -- progressivo_versante


 REGMOVFIN_STATO_A              CONSTANT varchar:='A';
 SEGNO_ECONOMICO				CONSTANT varchar:='Dare';



BEGIN

	numeroOrdinativiTrasm:=0;
    codiceRisultato:=0;
    messaggioRisultato:='';
	flussoElabMifId:=null;
    nomeFileMif:=null;

    flussoElabMifDistOilId:=null;

	strMessaggioFinale:='Invio ordinativi di spesa SIOPE PLUS.';


    -- enteOilRec
    strMessaggio:='Lettura dati ente OIL  per flusso MIF tipo '||MANDMIF_TIPO||'.';
    select * into strict enteOilRec
    from siac_t_ente_oil ente
    where ente.ente_proprietario_id=enteProprietarioId
    and   ente.data_cancellazione is null
    and   ente.validita_fine is null;

    if enteOilRec is null then
    	raise exception ' Errore in reperimento dati';
    end if;

    if enteOilRec.ente_oil_siope_plus=false then
    	raise exception ' SIOPE PLUS non attivo per l''ente.';
    end if;

    -- inserimento record in tabella mif_t_flusso_elaborato
    strMessaggio:='Inserimento mif_t_flusso_elaborato tipo flusso='||MANDMIF_TIPO||'.';

    insert into mif_t_flusso_elaborato
    (flusso_elab_mif_data ,
     flusso_elab_mif_esito,
     flusso_elab_mif_esito_msg,
     flusso_elab_mif_file_nome,
     flusso_elab_mif_tipo_id,
     flusso_elab_mif_id_flusso_oil, -- da calcolare su tab progressivi
     flusso_elab_mif_codice_flusso_oil, -- da calcolare su tab progressivi
     validita_inizio,
     ente_proprietario_id,
     login_operazione)
     (select dataElaborazione,
             ELAB_MIF_ESITO_IN,
             'Elaborazione in corso per tipo flusso '||MANDMIF_TIPO,
      		 tipo.flusso_elab_mif_nome_file,
     		 tipo.flusso_elab_mif_tipo_id,
     		 null,--flussoElabMifOilId, -- da calcolare su tab progressivi
             null, -- flussoElabMifDistOilId -- da calcolare su tab progressivi
    		 dataElaborazione,
     		 enteProprietarioId,
      		 loginOperazione
      from mif_d_flusso_elaborato_tipo tipo
      where tipo.ente_proprietario_id=enteProprietarioId
      and   tipo.flusso_elab_mif_tipo_code=MANDMIF_TIPO
      and   tipo.data_cancellazione is null
      and   tipo.validita_fine is null
     )
     returning flusso_elab_mif_id into flussoElabMifLogId;-- valore da restituire

      raise notice 'flussoElabMifLogId %',flussoElabMifLogId;

     if flussoElabMifLogId is null then
       RAISE EXCEPTION ' Errore generico in inserimento %.',MANDMIF_TIPO;
     end if;

    strMessaggio:='Verifica esistenza elaborazioni in corso per tipo flusso '||MANDMIF_TIPO||'.';
	codResult:=null;
    select distinct 1 into codResult
    from mif_t_flusso_elaborato elab,  mif_d_flusso_elaborato_tipo tipo
    where  elab.flusso_elab_mif_id!=flussoElabMifLogId
    and    elab.flusso_elab_mif_esito=ELAB_MIF_ESITO_IN
    and    elab.data_cancellazione is null
    and    elab.validita_fine is null
    and    tipo.flusso_elab_mif_tipo_id=elab.flusso_elab_mif_tipo_id
    and    tipo.flusso_elab_mif_tipo_code=MANDMIF_TIPO
    and    tipo.ente_proprietario_id=enteProprietarioId
    and    tipo.data_cancellazione is null
    and    tipo.validita_fine is null;

    if codResult is not null then
    	RAISE EXCEPTION ' Verificare situazioni esistenti.';
    end if;

    -- verifico se la tabella degli id contiene dati in tal caso elaborazioni precedenti sono andate male
    strMessaggio:='Verifica esistenza dati in tabella temporanea id [mif_t_ordinativo_spesa_id].';
    codResult:=null;
    select distinct 1 into codResult
    from mif_t_ordinativo_spesa_id mif
    where mif.ente_proprietario_id=enteProprietarioId;

    if codResult is not null then
      RAISE EXCEPTION ' Dati presenti verificarne il contenuto ed effettuare pulizia prima di rieseguire.';
    end if;



    codResult:=null;
    -- recupero indentificativi tipi codice vari
	begin

        -- ordTipoCodeId
        strMessaggio:='Lettura ordinativo tipo Code Id '||ORD_TIPO_CODE_P||'.';
        select ord_tipo.ord_tipo_id into strict ordTipoCodeId
        from siac_d_ordinativo_tipo ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_tipo_code=ORD_TIPO_CODE_P
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
   		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));

		-- ordStatoCodeIId
        strMessaggio:='Lettura ordinativo stato Code Id '||ORD_STATO_CODE_I||'.';
        select ord_tipo.ord_stato_id into strict ordStatoCodeIId
        from siac_d_ordinativo_stato ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_stato_code=ORD_STATO_CODE_I
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


        -- ordStatoCodeAId
        strMessaggio:='Lettura ordinativo stato Code Id '||ORD_STATO_CODE_A||'.';
        select ord_tipo.ord_stato_id into strict ordStatoCodeAId
        from siac_d_ordinativo_stato ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_stato_code=ORD_STATO_CODE_A
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


		-- classCdrTipoId
        strMessaggio:='Lettura classif Id per tipo sac='||CDR||'.';
        select tipo.classif_tipo_id into strict classCdrTipoId
        from siac_d_class_tipo tipo
        where tipo.ente_proprietario_id=enteProprietarioId
        and   tipo.classif_tipo_code=CDR
        and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));

        -- classCdcTipoId
        strMessaggio:='Lettura classif Id per tipo sac='||CDC||'.';
        select tipo.classif_tipo_id into strict classCdrTipoId
        from siac_d_class_tipo tipo
        where tipo.ente_proprietario_id=enteProprietarioId
        and   tipo.classif_tipo_code=CDC
        and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));


		-- ordDetTsTipoId
        strMessaggio:='Lettura tipo importo ordinativo  Code Id '||ORD_TS_DET_TIPO_A||'.';
        select ord_tipo.ord_ts_det_tipo_id into strict ordDetTsTipoId
        from siac_d_ordinativo_ts_det_tipo ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_ts_det_tipo_code=ORD_TS_DET_TIPO_A
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


        -- ordSedeSecRelazTipoId
        strMessaggio:='Lettura relazione sede secondaria  Code Id '||ORD_RELAZ_SEDE_SEC||'.';
        select ord_tipo.relaz_tipo_id into strict ordSedeSecRelazTipoId
        from siac_d_relaz_tipo ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.relaz_tipo_code=ORD_RELAZ_SEDE_SEC
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


		-- ordRelazCodeTipoId
        strMessaggio:='Lettura relazione   Code Id '||ORD_RELAZ_CODE_SOS||'.';
		select ord_tipo.relaz_tipo_id into strict ordRelazCodeTipoId
    	from siac_d_relaz_tipo ord_tipo
		where ord_tipo.ente_proprietario_id=enteProprietarioId
		and   ord_tipo.relaz_tipo_code=ORD_RELAZ_CODE_SOS
		and   ord_tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


        -- movgestTsTipoSubId
        strMessaggio:='Lettura movgest_ts_tipo  '||MOVGEST_TS_TIPO_S||'.';
		select ord_tipo.movgest_ts_tipo_id into strict movgestTsTipoSubId
    	from siac_d_movgest_ts_tipo ord_tipo
		where ord_tipo.ente_proprietario_id=enteProprietarioId
		and   ord_tipo.movgest_ts_tipo_code=MOVGEST_TS_TIPO_S
		and   ord_tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


    	-- programmaCodeTipoId
        strMessaggio:='Lettura programma_code_tipo_id  '||PROGRAMMA||'.';
		select tipo.classif_tipo_id into strict programmaCodeTipoId
    	from siac_d_class_tipo tipo
		where tipo.ente_proprietario_id=enteProprietarioId
		and   tipo.classif_tipo_code=PROGRAMMA
		and   tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));

		-- famTitSpeMacroAggrCodeId
		-- FAM_TIT_SPE_MACROAGGREG='Spesa - TitoliMacroaggregati'
        strMessaggio:='Lettura fam_tit_spe_macroggregati_code_tipo_id  '||FAM_TIT_SPE_MACROAGGREG||'.';
		select fam.classif_fam_tree_id into strict famTitSpeMacroAggrCodeId
        from siac_t_class_fam_tree fam
        where fam.ente_proprietario_id=enteProprietarioId
        and   fam.class_fam_code=FAM_TIT_SPE_MACROAGGREG
        and   fam.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',fam.validita_inizio)
		and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(fam.validita_fine,dataElaborazione));


    	-- titoloUscitaCodeTipoId
        strMessaggio:='Lettura titolo_spesa_code_tipo_id  '||TITOLO_SPESA||'.';
		select tipo.classif_tipo_id into strict titoloUscitaCodeTipoId
    	from siac_d_class_tipo tipo
		where tipo.ente_proprietario_id=enteProprietarioId
		and   tipo.classif_tipo_code=TITOLO_SPESA
		and   tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));

		-- noteOrdAttrId
        strMessaggio:='Lettura noteOrdAttrId per attributo='||NOTE_ORD_ATTR||'.';
		select attr.attr_id into strict  noteOrdAttrId
        from siac_t_attr attr
        where attr.ente_proprietario_id=enteProprietarioId
        and   attr.attr_code=NOTE_ORD_ATTR
        and   attr.data_cancellazione is null
        and   date_trunc('day',dataElaborazione)>=date_trunc('day',attr.validita_inizio)
 	 	and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(attr.validita_fine,dataElaborazione));


        -- ambitoFinId
        strMessaggio:='Lettura ambito  Code Id '||AMBITO_FIN||'.';
        select a.ambito_id into strict ambitoFinId
        from siac_d_ambito a
        where a.ente_proprietario_id=enteProprietarioId
   		and   a.ambito_code=AMBITO_FIN
        and   a.data_cancellazione is null
        and   a.validita_fine is null;

        -- flussoElabMifTipoId
        strMessaggio:='Lettura tipo flusso MIF  Code Id '||MANDMIF_TIPO||'.';
        select tipo.flusso_elab_mif_tipo_id, tipo.flusso_elab_mif_nome_file, tipo.flusso_elab_mif_tipo_dec
               into strict flussoElabMifTipoId,flussoElabMifTipoNomeFile, flussoElabMifTipoDec
        from mif_d_flusso_elaborato_tipo tipo
        where tipo.ente_proprietario_id=enteProprietarioId
   		and   tipo.flusso_elab_mif_tipo_code=MANDMIF_TIPO
        and   tipo.data_cancellazione is null
        and   tipo.validita_fine is null;

        -- raise notice 'flussoElabMifTipoId %',flussoElabMifTipoId;
        -- mifFlussoElabTypeRec


        strMessaggio:='Lettura flusso struttura MIF  per tipo '||MANDMIF_TIPO||'.';
        for mifElabRec IN
        (select m.*
         from mif_d_flusso_elaborato m
         where m.flusso_elab_mif_tipo_id=flussoElabMifTipoId
         and   m.flusso_elab_mif_elab=true
         order by m.flusso_elab_mif_ordine_elab
        )
        loop
        	mifAFlussoElabTypeRec.flussoElabMifId :=mifElabRec.flusso_elab_mif_id;
            mifAFlussoElabTypeRec.flussoElabMifAttivo :=mifElabRec.flusso_elab_mif_attivo;
            mifAFlussoElabTypeRec.flussoElabMifDef :=mifElabRec.flusso_elab_mif_default;
            mifAFlussoElabTypeRec.flussoElabMifElab :=mifElabRec.flusso_elab_mif_elab;
            mifAFlussoElabTypeRec.flussoElabMifParam :=mifElabRec.flusso_elab_mif_param;

            mifAFlussoElabTypeRec.flusso_elab_mif_ordine_elab :=mifElabRec.flusso_elab_mif_ordine_elab;
            mifAFlussoElabTypeRec.flusso_elab_mif_ordine :=mifElabRec.flusso_elab_mif_ordine;
            mifAFlussoElabTypeRec.flusso_elab_mif_code :=mifElabRec.flusso_elab_mif_code;
            mifAFlussoElabTypeRec.flusso_elab_mif_campo :=mifElabRec.flusso_elab_mif_campo;

            mifFlussoElabMifArr[mifElabRec.flusso_elab_mif_ordine_elab]:=mifAFlussoElabTypeRec;

        end loop;



		-- Gestione registroPcc per enti che non gestiscono quitanze
        -- Nota : capire se necessario gestire PCC
		/*if enteOilRec.ente_oil_quiet_ord=false then

  			-- comPccAttrId
	        strMessaggio:='Lettura comPccAttrId per attributo='||COM_PCC_ATTR||'.';
			select attr.attr_id into strict  comPccAttrId
	        from siac_t_attr attr
	        where attr.ente_proprietario_id=enteProprietarioId
	        and   attr.attr_code=COM_PCC_ATTR
	        and   attr.data_cancellazione is null
	        and   date_trunc('day',dataElaborazione)>=date_trunc('day',attr.validita_inizio)
   	 	    and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(attr.validita_fine,dataElaborazione));

            strMessaggio:='Lettura Id tipo operazine PCC='||PCC_OPERAZ_CPAG||'.';
			select pcc.pccop_tipo_id into strict pccOperazTipoId
		    from siac_d_pcc_operazione_tipo pcc
		    where pcc.ente_proprietario_id=enteProprietarioId
		    and   pcc.pccop_tipo_code=PCC_OPERAZ_CPAG;


        end if;*/

        -- enteProprietarioRec
        strMessaggio:='Lettura dati ente proprietario per flusso MIF tipo '||MANDMIF_TIPO||'.';
        select * into strict enteProprietarioRec
        from siac_t_ente_proprietario ente
        where ente.ente_proprietario_id=enteProprietarioId
	    and   ente.data_cancellazione is null
        and   ente.validita_fine is null;

        -- soggettoEnteId
        strMessaggio:='Lettura indirizzo ente proprietario [siac_r_soggetto_ente_proprietario] per flusso MIF tipo '||MANDMIF_TIPO||'.';
        select ente.soggetto_id into soggettoEnteId
        from siac_r_soggetto_ente_proprietario ente
        where ente.ente_proprietario_id=enteProprietarioId
        and   ente.data_cancellazione is null
        and   ente.validita_fine is null;

        if soggettoEnteId is not null then
            strMessaggio:='Lettura indirizzo ente proprietario [siac_t_indirizzo_soggetto] per flusso MIF tipo '||MANDMIF_TIPO||'.';

        	select viaTipo.via_tipo_code||' '||indir.toponimo||' '||indir.numero_civico,
        		   com.comune_desc
                   into indirizzoEnte,localitaEnte
            from siac_t_indirizzo_soggetto indir,
                 siac_t_comune com,
                 siac_d_via_tipo viaTipo
            where indir.soggetto_id=soggettoEnteId
            and   indir.principale='S'
            and   indir.data_cancellazione is null
            and   indir.validita_fine is null
            and   com.comune_id=indir.comune_id
            and   com.data_cancellazione is null
            and   com.validita_fine is null
            and   viaTipo.via_tipo_id=indir.via_tipo_id
            and   viaTipo.data_cancellazione is null
	   		and   date_trunc('day',dataElaborazione)>=date_trunc('day',viaTipo.validita_inizio)
 			and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(viaTipo.validita_fine,dataElaborazione))
            order by indir.indirizzo_id;
        end if;

        -- Calcolo progressivo "distinta" per flusso MANDMIF
	    -- calcolo su progressivi di flussoElabMifDistOilId flussoOIL univoco per tipo flusso
        strMessaggio:='Lettura progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_'||MANDMIF_TIPO||'_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        codResult:=null;
        select prog.prog_value into flussoElabMifDistOilRetId -- 25.05.2016 Sofia - JIRA-3619
        from siac_t_progressivo prog
        where prog.ente_proprietario_id=enteProprietarioId
        and   prog.prog_key='oil_'||MANDMIF_TIPO||'_'||annoBilancio
        and   prog.ambito_id=ambitoFinId
        and   prog.data_cancellazione is null
        and   prog.validita_fine is null;

        if flussoElabMifDistOilRetId is null then -- 25.05.2016 Sofia - JIRA-3619
			strMessaggio:='Inserimento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        	insert into siac_t_progressivo
            (prog_key,
             prog_value,
			 ambito_id,
		     validita_inizio,
			 ente_proprietario_id,
			 login_operazione
            )
            values
            ('oil_'||MANDMIF_TIPO||'_'||annoBilancio,1,ambitoFinId,now(),enteProprietarioId,loginOperazione)
            returning prog_id into codResult;

            if codResult is null then
            	RAISE EXCEPTION ' Progressivo non inserito.';
            else
            	flussoElabMifDistOilRetId:=0;
            end if;
        end if;

        if flussoElabMifDistOilRetId is not null then
	        flussoElabMifDistOilRetId:=flussoElabMifDistOilRetId+1;
        end if;

	    -- calcolo su progressivo di flussoElabMifOilId flussoOIL univoco
        strMessaggio:='Lettura progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        codResult:=null;
        select prog.prog_value into flussoElabMifOilId
        from siac_t_progressivo prog
        where prog.ente_proprietario_id=enteProprietarioId
        and   prog.prog_key='oil_out_'||annoBilancio
        and   prog.ambito_id=ambitoFinId
        and   prog.data_cancellazione is null
        and   prog.validita_fine is null;

        if flussoElabMifOilId is null then
			strMessaggio:='Inserimento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        	insert into siac_t_progressivo
            (prog_key,
             prog_value,
			 ambito_id,
		     validita_inizio,
			 ente_proprietario_id,
			 login_operazione
            )
            values
            ('oil_out_'||annoBilancio,1,ambitoFinId,now(),enteProprietarioId,loginOperazione)
            returning prog_id into codResult;

            if codResult is null then
            	RAISE EXCEPTION ' Progressivo non inserito.';
            else
            	flussoElabMifOilId:=0;
            end if;
        end if;

        if flussoElabMifOilId is not null then
	        flussoElabMifOilId:=flussoElabMifOilId+1;
        end if;

        exception
		when no_data_found then
			RAISE EXCEPTION ' Non presente in archivio';
        when TOO_MANY_ROWS THEN
            RAISE EXCEPTION ' Diverse righe presenti in archivio.';
		when others  THEN
			RAISE EXCEPTION ' %-%.',SQLSTATE,substring(upper(SQLERRM) from 1 for 500);
    end;




    --- popolamento mif_t_ordinativo_spesa_id


    -- ordinativi emessi o emessi/spostati non ancora mai trasmessi codice_funzione='I' -- INSERIMENTO
    strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_spesa_id].Codice funzione='||FUNZIONE_CODE_I||'.';

    insert into mif_t_ordinativo_spesa_id
    (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
     mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
     mif_ord_soggetto_id, mif_ord_modpag_id,
     mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
     mif_ord_liq_id, mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_dist_id,
     mif_ord_codbollo_id,mif_ord_comm_tipo_id,mif_ord_notetes_id,mif_ord_desc,
     mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
     mif_ord_siope_tipo_debito_id,mif_ord_siope_assenza_motivazione_id,
     mif_ord_login_creazione,mif_ord_login_modifica,
     ente_proprietario_id, login_operazione)
    (
     with
     ritrasm as
     (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	  from mif_t_ordinativo_ritrasmesso r
	  where mifOrdRitrasmElabId is not null
	  and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	  and   r.ente_proprietario_id=enteProprietarioId
	  and   r.data_cancellazione is null),
     ordinativi as
     (
      select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_I mif_ord_codice_funzione,
             bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
             ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
             extract('year' from ord.ord_emissione_data)||'-'||
             lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
             lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione , 0 mif_ord_ord_anno_movg,
             0 mif_ord_soggetto_id,0 mif_ord_modpag_id,0 mif_ord_subord_id, elem.elem_id mif_ord_elem_id,
             0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_liq_id,0 mif_ord_atto_amm_id,
             ord.contotes_id mif_ord_contotes_id,ord.dist_id mif_ord_dist_id,ord.codbollo_id mif_ord_codbollo_id,
             ord.comm_tipo_id mif_ord_comm_tipo_id,ord.notetes_id mif_ord_notetes_id, ord.ord_desc mif_ord_desc,
             ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
             ord.siope_tipo_debito_id,ord.siope_assenza_motivazione_id,
             ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
             enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
      from siac_t_ordinativo ord,siac_r_ordinativo_stato ord_stato,siac_t_bil bil, siac_t_periodo per,siac_r_ordinativo_bil_elem elem
      where  bil.ente_proprietario_id=enteProprietarioId
        and  per.periodo_id=bil.periodo_id
        and  per.anno::integer <=annoBilancio::integer
        and  ord.bil_id=bil.bil_id
        and  ord.ord_tipo_id=ordTipoCodeId
        and  ord_stato.ord_id=ord.ord_id
        and  ord_stato.data_cancellazione is null
	    and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
  	    and  ord_stato.validita_fine is null
        and  ord_stato.ord_stato_id=ordStatoCodeIId
        and  ord.ord_trasm_oil_data is null
        and  ord.ord_emissione_data<=dataElaborazione
        and  elem.ord_id=ord.ord_id
        and  elem.data_cancellazione is null
        and  not exists (select 1 from siac_r_ordinativo rord
                          where rord.ord_id_a=ord.ord_id
                          and   rord.data_cancellazione is null
                          and   rord.validita_fine is null
			              and   rord.relaz_tipo_id=ordRelazCodeTipoId)
       )
       select  o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
		       o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
     		   o.mif_ord_soggetto_id, o.mif_ord_modpag_id,
               o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_liq_id, o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_dist_id,
               o.mif_ord_codbollo_id,o.mif_ord_comm_tipo_id,o.mif_ord_notetes_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.siope_tipo_debito_id,o.siope_assenza_motivazione_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id , o.login_operazione
       from ordinativi o
	   where mifOrdRitrasmElabId is null
		  or (mifOrdRitrasmElabId is not null and exists
             (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
       );


      -- ordinativi emessi o emessi/spostati non ancora mai trasmessi, sostituzione di altro ordinativo codice_funzione='S' -- 'SOSPENSIONE'
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_spesa_id].Codice funzione='||FUNZIONE_CODE_S||'.';

      insert into mif_t_ordinativo_spesa_id
	  (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
 	   mif_ord_soggetto_id, mif_ord_modpag_id,
 	   mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
 	   mif_ord_liq_id, mif_ord_atto_amm_id, mif_ord_contotes_id, mif_ord_dist_id,
       mif_ord_codbollo_id,mif_ord_comm_tipo_id,mif_ord_notetes_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_siope_tipo_debito_id,mif_ord_siope_assenza_motivazione_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
	  (
       with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_S mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
               ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,
               0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id ,0 mif_ord_modpag_id,0 mif_ord_subord_id,
               elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_liq_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.dist_id mif_ord_dist_id,ord.codbollo_id mif_ord_codbollo_id,
               ord.comm_tipo_id mif_ord_comm_tipo_id,ord.notetes_id mif_ord_notetes_id,
               ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.siope_tipo_debito_id,ord.siope_assenza_motivazione_id,
               ord.login_creazione mif_ord_login_creazione, ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
  	    from siac_t_ordinativo ord,siac_r_ordinativo_stato ord_stato,
             siac_t_bil bil, siac_t_periodo per,
             siac_r_ordinativo_bil_elem elem,siac_r_ordinativo rord
  	    where  bil.ente_proprietario_id=enteProprietarioId
   		  and  per.periodo_id=bil.periodo_id
    	  and  per.anno::integer <=annoBilancio::integer
      	  and  ord.bil_id=bil.bil_id
     	  and  ord.ord_tipo_id=ordTipoCodeId
    	  and  ord_stato.ord_id=ord.ord_id
    	  and  ord_stato.data_cancellazione is null
	   	  and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
  	      and  ord_stato.validita_fine is null
    	  and  ord_stato.ord_stato_id=ordStatoCodeIId
	      and  ord.ord_trasm_oil_data is null
    	  and  ord.ord_emissione_data<=dataElaborazione
    	  and  elem.ord_id=ord.ord_id
    	  and  elem.data_cancellazione is null
          and  elem.validita_fine is null
          and  rord.ord_id_a=ord.ord_id
          and  rord.relaz_tipo_id=ordRelazCodeTipoId
          and  rord.data_cancellazione is null
          and  rord.validita_fine is null
        )
        select  o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
		       o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
     		   o.mif_ord_soggetto_id, o.mif_ord_modpag_id,
               o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_liq_id, o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_dist_id,
               o.mif_ord_codbollo_id,o.mif_ord_comm_tipo_id,o.mif_ord_notetes_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.siope_tipo_debito_id,o.siope_assenza_motivazione_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id, o.login_operazione
        from ordinativi o
	    where mifOrdRitrasmElabId is null
		   or (mifOrdRitrasmElabId is not null and exists
              (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
      );

      -- ordinativi emessi e annullati mai trasmessi codice_funzione='N' -- ANNULLO
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_spesa_id].Codice funzione='||FUNZIONE_CODE_N||'.';

	  insert into mif_t_ordinativo_spesa_id
	  (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
	   mif_ord_soggetto_id, mif_ord_modpag_id,
	   mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
 	   mif_ord_liq_id, mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_dist_id,
       mif_ord_codbollo_id,mif_ord_comm_tipo_id,mif_ord_notetes_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_siope_tipo_debito_id,mif_ord_siope_assenza_motivazione_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
	  (
       with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_N mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
      	 	   ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,
               0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_modpag_id,0 mif_ord_subord_id,
               elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_liq_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.dist_id mif_ord_dist_id,
               ord.codbollo_id mif_ord_codbollo_id,ord.comm_tipo_id mif_ord_comm_tipo_id,
               ord.notetes_id mif_ord_notetes_id,ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.siope_tipo_debito_id,ord.siope_assenza_motivazione_id,
               ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
  	    from siac_t_ordinativo ord, siac_r_ordinativo_stato ord_stato,
             siac_t_bil bil, siac_t_periodo per,
             siac_r_ordinativo_bil_elem elem
        where  bil.ente_proprietario_id=enteProprietarioId
         and  per.periodo_id=bil.periodo_id
         and  per.anno::integer <=annoBilancio::integer
         and  ord.bil_id=bil.bil_id
         and  ord.ord_tipo_id=ordTipoCodeId
         and  ord_stato.ord_id=ord.ord_id
         and  ord_stato.validita_inizio<=dataElaborazione -- questa e'' la data di annullamento
         and  ord.ord_emissione_data<=dataElaborazione
         and  ord_stato.data_cancellazione is null
         and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
  	     and  ord_stato.validita_fine is null
         and  ord_stato.ord_stato_id=ordStatoCodeAId
         and  ord.ord_trasm_oil_data is null
         and  elem.ord_id=ord.ord_id
         and  elem.data_cancellazione is null
         and  elem.validita_fine is null
       )
       select  o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
		       o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
     		   o.mif_ord_soggetto_id, o.mif_ord_modpag_id,
               o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_liq_id, o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_dist_id,
               o.mif_ord_codbollo_id,o.mif_ord_comm_tipo_id,o.mif_ord_notetes_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.siope_tipo_debito_id,o.siope_assenza_motivazione_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id , o.login_operazione
       from ordinativi o
	   where mifOrdRitrasmElabId is null
		  or (mifOrdRitrasmElabId is not null and exists
             (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
	   );

      -- ordinativi emessi tramessi e poi annullati, anche dopo spostamento  codice_funzione='A' -- ANNULLO
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_spesa_id].Codice funzione='||FUNZIONE_CODE_A||'.';

      insert into mif_t_ordinativo_spesa_id
      (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
       mif_ord_soggetto_id, mif_ord_modpag_id,
       mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
       mif_ord_liq_id, mif_ord_atto_amm_id,mif_ord_contotes_id,mif_ord_dist_id,
       mif_ord_codbollo_id,mif_ord_comm_tipo_id,mif_ord_notetes_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_siope_tipo_debito_id,mif_ord_siope_assenza_motivazione_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
      (
       with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_A mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
               ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,
               0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_modpag_id,0 mif_ord_subord_id,
               elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_liq_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.dist_id mif_ord_dist_id,ord.codbollo_id mif_ord_codbollo_id,
               ord.comm_tipo_id mif_ord_comm_tipo_id,
               ord.notetes_id mif_ord_notetes_id,ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.siope_tipo_debito_id,ord.siope_assenza_motivazione_id,
               ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
        from siac_t_ordinativo ord,siac_r_ordinativo_stato ord_stato,
             siac_t_bil bil, siac_t_periodo per,
             siac_r_ordinativo_bil_elem elem
        where  bil.ente_proprietario_id=enteProprietarioId
          and  per.periodo_id=bil.periodo_id
          and  per.anno::integer <=annoBilancio::integer
          and  ord.bil_id=bil.bil_id
          and  ord.ord_tipo_id=ordTipoCodeId
   		  and  ord_stato.ord_id=ord.ord_id
  		  and  ord.ord_emissione_data<=dataElaborazione
          and  ord_stato.validita_inizio<=dataElaborazione  -- questa e'' la data di annullamento
  		  and  ord.ord_trasm_oil_data is not null
 		  and  ord.ord_trasm_oil_data<ord_stato.validita_inizio
          and  ord_stato.data_cancellazione is null
          and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
  	      and  ord_stato.validita_fine is null
          and  ord_stato.ord_stato_id=ordStatoCodeAId
          and  ( ord.ord_spostamento_data is null or ord.ord_spostamento_data<ord_stato.validita_inizio)
          and  elem.ord_id=ord.ord_id
          and  elem.data_cancellazione is null
          and  elem.validita_fine is null
        )
        select o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
		       o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
     		   o.mif_ord_soggetto_id, o.mif_ord_modpag_id,
               o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_liq_id, o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_dist_id,
               o.mif_ord_codbollo_id,o.mif_ord_comm_tipo_id,o.mif_ord_notetes_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.siope_tipo_debito_id,o.siope_assenza_motivazione_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id , o.login_operazione
        from ordinativi o
	    where mifOrdRitrasmElabId is null
		  or (mifOrdRitrasmElabId is not null and exists
             (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))

       );
      -- ordinativi emessi , trasmessi  e poi spostati codice_funzione='VB' ( mai annullati ) _--- VARIAZIONE
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_spesa_id].Codice funzione='||FUNZIONE_CODE_VB||'.';

      insert into mif_t_ordinativo_spesa_id
      (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
       mif_ord_soggetto_id, mif_ord_modpag_id,
       mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
       mif_ord_liq_id, mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_dist_id,
       mif_ord_codbollo_id,mif_ord_comm_tipo_id,mif_ord_notetes_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_siope_tipo_debito_id,mif_ord_siope_assenza_motivazione_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
      (
       with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_VB mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
               ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,
               0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_modpag_id,0 mif_ord_subord_id,
               elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_liq_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.dist_id mif_ord_dist_id,ord.codbollo_id mif_ord_codbollo_id,
               ord.comm_tipo_id mif_ord_comm_tipo_id,
               ord.notetes_id mif_ord_notetes_id,ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.siope_tipo_debito_id,ord.siope_assenza_motivazione_id,
               ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
        from siac_t_ordinativo ord,siac_t_bil bil, siac_t_periodo per, siac_r_ordinativo_bil_elem elem
        where  bil.ente_proprietario_id=enteProprietarioId
         and  per.periodo_id=bil.periodo_id
         and  per.anno::integer <=annoBilancio::integer
         and  ord.bil_id=bil.bil_id
         and  ord.ord_tipo_id=ordTipoCodeId
         and  ord.ord_emissione_data<=dataElaborazione
         and  ord.ord_trasm_oil_data is not null
         and  ord.ord_spostamento_data is not null
         and  ord.ord_trasm_oil_data<ord.ord_spostamento_data
         and  ord.ord_spostamento_data<=dataElaborazione
         and  not exists (select 1 from siac_r_ordinativo_stato ord_stato
  				          where  ord_stato.ord_id=ord.ord_id
					        and  ord_stato.ord_stato_id=ordStatoCodeAId
                            and  ord_stato.data_cancellazione is null)
         and  elem.ord_id=ord.ord_id
         and  elem.data_cancellazione is null
         and  elem.validita_fine is null
        )
       select o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
		       o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
     		   o.mif_ord_soggetto_id, o.mif_ord_modpag_id,
               o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_liq_id, o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_dist_id,
               o.mif_ord_codbollo_id,o.mif_ord_comm_tipo_id,o.mif_ord_notetes_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.siope_tipo_debito_id,o.siope_assenza_motivazione_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id , o.login_operazione
       from ordinativi o
	   where mifOrdRitrasmElabId is null
		  or (mifOrdRitrasmElabId is not null and exists
             (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
      );
      -- aggiornamento mif_t_ordinativo_spesa_id per id


      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per fase_operativa_code.';
      update mif_t_ordinativo_spesa_id m
      set mif_ord_bil_fase_ope=(select fase.fase_operativa_code from siac_r_bil_fase_operativa rFase, siac_d_fase_operativa fase
      							where rFase.bil_id=m.mif_ord_bil_id
                                and   rFase.data_cancellazione is null
                                and   rFase.validita_fine is null
                                and   fase.fase_operativa_id=rFase.fase_operativa_id
                                and   fase.data_cancellazione is null
                                and   fase.validita_fine is null);


      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per soggetto_id.';
      -- soggetto_id

      update mif_t_ordinativo_spesa_id m
      set mif_ord_soggetto_id=coalesce(s.soggetto_id,0)
      from siac_r_ordinativo_soggetto s
      where s.ord_id=m.mif_ord_ord_id
      and s.data_cancellazione is null
      and s.validita_fine is null;

      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per modpag_id.';

      -- modpag_id
      update mif_t_ordinativo_spesa_id m set  mif_ord_modpag_id=coalesce(s.modpag_id,0)
      from siac_r_ordinativo_modpag s
      where s.ord_id=m.mif_ord_ord_id
   	  and s.modpag_id is not null
      and s.data_cancellazione is null
      and s.validita_fine is null;

      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per modpag_id [CSI].';
      update mif_t_ordinativo_spesa_id m set mif_ord_modpag_id=coalesce(rel.modpag_id,0)
      from siac_r_ordinativo_modpag s, siac_r_soggrel_modpag rel
      where s.ord_id=m.mif_ord_ord_id
      and s.soggetto_relaz_id is not null
      and rel.soggetto_relaz_id=s.soggetto_relaz_id
      and s.data_cancellazione is null
      and s.validita_fine is null
      and rel.data_cancellazione is null
      and rel.validita_fine is null
      and exists  (select  1 from siac_r_soggrel_modpag rel1
                   where    rel.soggetto_relaz_id=s.soggetto_relaz_id
		           and      rel1.soggrelmpag_id=rel.soggrelmpag_id
         		   order by rel1.modpag_id
			       limit 1);

      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per subord_id.';

      -- subord_id
      update mif_t_ordinativo_spesa_id m
      set mif_ord_subord_id =
                             (select s.ord_ts_id from siac_t_ordinativo_ts s
                               where s.ord_id=m.mif_ord_ord_id
                                 and s.data_cancellazione is null
                                 and s.validita_fine is null
                               order by s.ord_ts_id
                               limit 1);

     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per liq_id.';

	 -- liq_id
	 update mif_t_ordinativo_spesa_id m
	 set mif_ord_liq_id = (select s.liq_id from siac_r_liquidazione_ord s
                            where s.sord_id = m.mif_ord_subord_id
                              and s.data_cancellazione is null
                              and s.validita_fine is null);
     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per movgest_ts_id.';

     -- movgest_ts_id
     update mif_t_ordinativo_spesa_id m
     set mif_ord_movgest_ts_id = (select s.movgest_ts_id from siac_r_liquidazione_movgest s
                                   where s.liq_id = m.mif_ord_liq_id
                                     and s.data_cancellazione is null
                                     and s.validita_fine is null);
     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per movgest_id.';

     -- movgest_id
     update mif_t_ordinativo_spesa_id m
     set mif_ord_movgest_id = (select s.movgest_id from siac_t_movgest_ts s
                               where  s.movgest_ts_id = m.mif_ord_movgest_ts_id
                               and s.data_cancellazione is null
                               and s.validita_fine is null);

     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per movgest_id.';

     -- movgest_anno
     update mif_t_ordinativo_spesa_id m
     set mif_ord_ord_anno_movg = (select s.movgest_anno from siac_t_movgest s
                              	  where  s.movgest_id = m.mif_ord_movgest_id
                             	  and s.data_cancellazione is null
                                  and s.validita_fine is null);


     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per attoamm_id.';

    -- attoamm_id
    update mif_t_ordinativo_spesa_id m
    set mif_ord_atto_amm_id = (select s.attoamm_id from siac_r_liquidazione_atto_amm s
                                where s.liq_id = m.mif_ord_liq_id
                                  and s.data_cancellazione is null
                                  and s.validita_fine is null);

    strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per attoamm_id movgest_ts.';
	-- attoamm_movgest_ts_id
    update mif_t_ordinativo_spesa_id m
    set mif_ord_atto_amm_movg_id = (select s.attoamm_id from siac_r_movgest_ts_atto_amm s
                                    where s.movgest_ts_id = m.mif_ord_movgest_ts_id
                                    and s.data_cancellazione is null
                                    and s.validita_fine is null);

	-- mif_ord_programma_id
    -- mif_ord_programma_code
    -- mif_ord_programma_desc
    strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per mif_ord_programma_id mif_ord_programma_code mif_ord_programma_desc.';
    update mif_t_ordinativo_spesa_id m
    set (mif_ord_programma_id,mif_ord_programma_code,mif_ord_programma_desc) = (class.classif_id,class.classif_code,class.classif_desc) -- 11.01.2016 Sofia
    from siac_r_bil_elem_class classElem, siac_t_class class
    where classElem.elem_id=m.mif_ord_elem_id
    and   class.classif_id=classElem.classif_id
    and   class.classif_tipo_id=programmaCodeTipoId
    and   classElem.data_cancellazione is null
    and   classElem.validita_fine is null
    and   class.data_cancellazione is null;

	-- mif_ord_titolo_id
    -- mif_ord_titolo_code
    strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per mif_ord_titolo_id mif_ord_titolo_code.';
    update mif_t_ordinativo_spesa_id m
    set (mif_ord_titolo_id, mif_ord_titolo_code) = (cp.classif_id,cp.classif_code)
	from siac_r_bil_elem_class classElem, siac_t_class cf, siac_r_class_fam_tree r, siac_t_class cp
	where classElem.elem_id=m.mif_ord_elem_id
    and   cf.classif_id=classElem.classif_id
    and   cf.data_cancellazione is null
    and   classElem.data_cancellazione is null
    and   classElem.validita_fine is null
	and   r.classif_id=cf.classif_id
	and   r.classif_id_padre is not null
	and   r.classif_fam_tree_id=famTitSpeMacroAggrCodeId
    and   r.data_cancellazione is null
    and   r.validita_fine is null
	and   cp.classif_id=r.classif_id_padre
    and   cp.data_cancellazione is null;






	-- mif_ord_note_attr_id
	strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_spesa_id] per mif_ord_note_attr_id.';
	update mif_t_ordinativo_spesa_id m
    set mif_ord_note_attr_id= attr.ord_attr_id
    from siac_r_ordinativo_attr attr
    where attr.ord_id=m.mif_ord_ord_id
    and   attr.attr_id=noteOrdAttrId
    and   attr.data_cancellazione is null
    and   attr.validita_fine is null;


    strMessaggio:='Verifica esistenza ordinativi di spesa da trasmettere.';
    codResult:=null;
    select 1 into codResult
    from mif_t_ordinativo_spesa_id where ente_proprietario_id=enteProprietarioId;

    if codResult is null then
      codResult:=-12;
      RAISE EXCEPTION ' Nessun ordinativo di spesa da trasmettere.';
    end if;


    -- <ritenute>
    flussoElabMifElabRec:=null;
    flussoElabMifElabRec:=mifFlussoElabMifArr[FLUSSO_MIF_ELAB_RITENUTA];

    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                   ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
    	if flussoElabMifElabRec.flussoElabMifElab=true then
        	if flussoElabMifElabRec.flussoElabMifParam is not null then
  					tipoRelazRitOrd:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
	                tipoRelazSprOrd:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
	                tipoRelazSubOrd:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
                    tipoOnereIrpef:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
                    tipoOnereInps:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,5));
                    tipoOnereIrpeg:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,6));


                    if tipoRelazRitOrd is null or tipoRelazSprOrd is null or tipoRelazSubOrd is null
                       or tipoOnereInps is null or tipoOnereIrpef is null
                       or tipoOnereIrpeg is null then
                       RAISE EXCEPTION ' Dati configurazione ritenute non completi.';
                    end if;
                    isRitenutaAttivo:=true;
            end if;
	    else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	   	end if;
   end if;

   if isRitenutaAttivo=true then
     	flussoElabMifElabRec:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[FLUSSO_MIF_ELAB_RITENUTA_PRG];
         strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	   	 if flussoElabMifElabRec.flussoElabMifId is null then
  			  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	   	 end if;
    	 if flussoElabMifElabRec.flussoElabMifAttivo=true then
    		if flussoElabMifElabRec.flussoElabMifElab=true then
            	if flussoElabMifElabRec.flussoElabMifDef is not null then
                	progrRitenuta:=flussoElabMifElabRec.flussoElabMifDef;
                end if;
	    	else
				RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	   		end if;
	     else
    	   isRitenutaAttivo:=false;
		 end if;
   end if;

   if isRitenutaAttivo=true then
           strMessaggio:='Lettura dati identificativo tipo Onere '||tipoOnereIrpef
                       ||' sezione ritenute - tipo flusso '||MANDMIF_TIPO||'.';

           select tipo.onere_tipo_id into tipoOnereIrpefId
           from siac_d_onere_tipo tipo
           where tipo.ente_proprietario_id=enteProprietarioId
           and   tipo.onere_tipo_code=tipoOnereIrpef
           and   tipo.data_cancellazione is null
 	  	   and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
   		   and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));

           if tipoOnereIrpefId is null then
            	RAISE EXCEPTION ' Dato non reperito.';
           end if;

           strMessaggio:='Lettura dati identificativo tipo Onere '||tipoOnereInps
                       ||' sezione ritenute - tipo flusso '||MANDMIF_TIPO||'.';

           select tipo.onere_tipo_id into tipoOnereInpsId
           from siac_d_onere_tipo tipo
           where tipo.ente_proprietario_id=enteProprietarioId
           and   tipo.onere_tipo_code=tipoOnereInps
           and   tipo.data_cancellazione is null
 	  	   and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		   and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));


           if tipoOnereInpsId is null then
            	RAISE EXCEPTION ' Dato non reperito.';
           end if;

		   strMessaggio:='Lettura dati identificativo tipo Onere '||tipoOnereIrpeg
                        ||' sezione ritenute - tipo flusso '||MANDMIF_TIPO||'.';

           select tipo.onere_tipo_id into tipoOnereIrpegId
           from siac_d_onere_tipo tipo
           where tipo.ente_proprietario_id=enteProprietarioId
           and   tipo.onere_tipo_code=tipoOnereIrpeg
           and   tipo.data_cancellazione is null
 	  	   and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		   and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));


           if tipoOnereIrpegId is null then
            	RAISE EXCEPTION ' Dato non reperito.';
           end if;
   end if;


   -- <sospesi>
   -- <sospeso>
   -- <numero_provvisorio>
   -- <importo_provvisorio>
   flussoElabMifElabRec:=null;
   flussoElabMifElabRec:=mifFlussoElabMifArr[FLUSSO_MIF_ELAB_NUM_SOSPESO];
   mifCountRec:=FLUSSO_MIF_ELAB_NUM_SOSPESO;
   strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
   if flussoElabMifElabRec.flussoElabMifId is null then
  	  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
   end if;
   if flussoElabMifElabRec.flussoElabMifAttivo=true then
    	if flussoElabMifElabRec.flussoElabMifElab=true then
			null;
        else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
   		end if;
        isRicevutaAttivo:=true;
   end if;




   flussoElabMifElabRec:=null;
   mifCountRec:=FLUSSO_MIF_ELAB_FATTURE;
   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
   strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
   if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
   end if;
   if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
 		    numeroDocs:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            tipoDocs  :=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
            tipoGruppoDocs  :=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
            if numeroDocs is not null and numeroDocs!='' and
               tipoDocs is not null and tipoDocs!='' and
               tipoGruppoDocs is not null and tipoGruppoDocs!='' then
                tipoDocs:=tipoDocs||'|'||tipoGruppoDocs;
            	isGestioneFatture:=true;
            end if;
		end if;
    else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
    end if;
   end if;

   if isGestioneFatture=true then

    flussoElabMifElabRec:=null;
    mifCountRec:=FLUSSO_MIF_ELAB_FATT_CODFISC;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	 if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
 		    docAnalogico:=flussoElabMifElabRec.flussoElabMifParam;
		end if;
     else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     end if;
    end if;

   end if;

   if isGestioneFatture=true then
    flussoElabMifElabRec:=null;
    mifCountRec:=FLUSSO_MIF_ELAB_FATT_DATASCAD_PAG;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	 if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
            attrCodeDataScad:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
		end if;
     else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     end if;
    end if;

   end if;

   if isGestioneFatture=true then

    flussoElabMifElabRec:=null;
    mifCountRec:=FLUSSO_MIF_ELAB_FATT_NATURA_PAG;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	 if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
            titoloCorrente:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            descriTitoloCorrente:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
            titoloCapitale:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
            descriTitoloCapitale:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));

		end if;
     else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     end if;
    end if;

   end if;

   --- lettura mif_t_ordinativo_spesa_id per popolamento mif_t_ordinativo_spesa
   codResult:=null;
   strMessaggio:='Lettura ordinativi di spesa da migrare [mif_t_ordinativo_spesa_id].Inizio ciclo.';
   for mifOrdinativoIdRec IN
   (select ms.*
     from mif_t_ordinativo_spesa_id ms
     where ms.ente_proprietario_id=enteProprietarioId
     order by ms.mif_ord_anno_bil,
              ms.mif_ord_ord_numero
   )
   loop


		mifFlussoOrdinativoRec:=null;
		MDPRec:=null;
        codAccreRec:=null;
		bilElemRec:=null;
        soggettoRec:=null;
        soggettoSedeRec:=null;
        soggettoRifId:=null;
        soggettoSedeSecId:=null;
		indirizzoRec:=null;
        mifOrdSpesaId:=null;




        isIndirizzoBenef:=true;
        isIndirizzoBenQuiet:=true;


        bavvioFrazAttr:=false;
        bAvvioSiopeNew:=false;


	    statoBeneficiario:=false;
		statoDelegatoCredEff:=false;

        -- lettura importo ordinativo
 		strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura importo ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';

        mifFlussoOrdinativoRec.mif_ord_importo:=fnc_mif_importo_ordinativo(mifOrdinativoIdRec.mif_ord_ord_id,ordDetTsTipoId,
        													  		       flussoElabMifTipoDec);
        if flussoElabMifTipoDec=true and
           coalesce(position('.' in mifFlussoOrdinativoRec.mif_ord_importo),0)=0 then
           mifFlussoOrdinativoRec.mif_ord_importo:=mifFlussoOrdinativoRec.mif_ord_importo||'.00';
        end if;

        -- lettura MDP ti ordinativo
 		strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura MDP ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';

		select * into MDPRec
        from siac_t_modpag mdp
        where mdp.modpag_id=mifOrdinativoIdRec.mif_ord_modpag_id;
        if MDPRec is null then
        	RAISE EXCEPTION ' Errore in lettura siac_t_modpag.';
        end if;

        -- lettura accreditoTipo ti ordinativo
 		strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura accredito tipo ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';

        select tipo.accredito_tipo_id, tipo.accredito_tipo_code,tipo.accredito_tipo_desc,
               gruppo.accredito_gruppo_id, gruppo.accredito_gruppo_code
               into codAccreRec
        from siac_d_accredito_tipo tipo, siac_d_accredito_gruppo gruppo
        where tipo.accredito_tipo_id=MDPRec.accredito_tipo_id
          and tipo.data_cancellazione is null
          and date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		  and date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione))
          and gruppo.accredito_gruppo_id=tipo.accredito_gruppo_id;
        if codAccreRec is null then
        	RAISE EXCEPTION ' Errore in lettura siac_d_accredito_tipo siac_d_accredito_gruppo.';
        end if;


        -- lettura dati soggetto ordinativo
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati soggetto [siac_r_soggetto_relaz] ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';
        select rel.soggetto_id_da into soggettoRifId
        from  siac_r_soggetto_relaz rel
        where rel.soggetto_id_a=mifOrdinativoIdRec.mif_ord_soggetto_id
        and   rel.relaz_tipo_id=ordSedeSecRelazTipoId
        and   rel.ente_proprietario_id=enteProprietarioId
        and   rel.data_cancellazione is null
		and   rel.validita_fine is null;

        if soggettoRifId is null then
	        soggettoRifId:=mifOrdinativoIdRec.mif_ord_soggetto_id;
        else
        	soggettoSedeSecId:=mifOrdinativoIdRec.mif_ord_soggetto_id;
        end if;

        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati soggetto di riferimento ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';

        select * into soggettoRec
   	    from siac_t_soggetto sogg
       	where sogg.soggetto_id=soggettoRifId;

        if soggettoRec is null then
        	RAISE EXCEPTION ' Errore in lettura siac_t_soggetto [soggetto_id= %].',soggettoRifId;
        end if;

        if soggettoSedeSecId is not null then
	        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati sede sec. soggetto di riferimento ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';

            select * into soggettoSedeRec
   		    from siac_t_soggetto sogg
	       	where sogg.soggetto_id=soggettoSedeSecId;

	        if soggettoSedeRec is null then
    	    	RAISE EXCEPTION ' Errore in lettura siac_t_soggetto [soggetto_id=%]',soggettoSedeSecId;
        	end if;

        end if;



        -- lettura elemento bilancio  ordinativo
 		strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura elemento bilancio ordinativo di spesa per tipo flusso '||MANDMIF_TIPO||'.';

		select * into bilElemRec
        from siac_t_bil_elem elem
        where elem.elem_id=mifOrdinativoIdRec.mif_ord_elem_id;
        if bilElemRec is null then
        	RAISE EXCEPTION ' Errore in lettura siac_t_bil_elem.';
        end if;

		-- dati testata flusso presenti come tag solo in testata
        -- valorizzati su ogni ordinativo trasmesso
        -- <testata_flusso>
		-- <codice_ABI_BT>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ABI_BT;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_abi is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_abi_bt:=enteOilRec.ente_oil_abi;
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_abi_bt:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <codice_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ENTE_IPA;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_ipa is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_ipa:=trim(both ' ' from enteOilRec.ente_oil_codice_ipa);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_ipa:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <descrizione_ente>
	    flussoElabMifElabRec:=null;
		mifCountRec:=FLUSSO_MIF_ELAB_TEST_DESC_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteProprietarioRec.ente_denominazione is not null then
            	mifFlussoOrdinativoRec.mif_ord_desc_ente:=enteProprietarioRec.ente_denominazione;
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
               	mifFlussoOrdinativoRec.mif_ord_desc_ente:=substring(flussoElabMifElabRec.flussoElabMifDef from 1 for 30);
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

	    -- <codice_istat_ente>
	    flussoElabMifElabRec:=null;
		mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ISTAT_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_istat is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_istat:=enteOilRec.ente_oil_codice_istat;
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
               	mifFlussoOrdinativoRec.mif_ord_codice_ente_istat:=substring(flussoElabMifElabRec.flussoElabMifDef from 1 for 30);
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <codice_fiscale_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_CODFISC_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteProprietarioRec.codice_fiscale is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente:=trim(both ' ' from enteProprietarioRec.codice_fiscale);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <codice_tramite_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_CODTRAMITE_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_tramite is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite:=trim(both ' ' from enteOilRec.ente_oil_codice_tramite);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <codice_tramite_BT>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_CODTRAMITE_BT;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_tramite_bt is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite_bt:=trim(both ' ' from enteOilRec.ente_oil_codice_tramite_bt);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite_bt:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <codice_ente_BT>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ENTE_BT;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_bt:=trim(both ' ' from enteOilRec.ente_oil_codice);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_bt:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <riferimento_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_RIFERIMENTO_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_riferimento is not null then
            	mifFlussoOrdinativoRec.mif_ord_riferimento_ente:=trim(both ' ' from enteOilRec.ente_oil_riferimento);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_riferimento_ente:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
        -- </testata_flusso>

        -- <testata_esercizio>
        -- <esercizio>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_ESERCIZIO;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            mifFlussoOrdinativoRec.mif_ord_anno_esercizio:=mifOrdinativoIdRec.mif_ord_anno_bil;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
        -- </testata_esercizio>

        mifCountRec:=FLUSSO_MIF_ELAB_INIZIO_ORD;
        mifCountTmpRec:=FLUSSO_MIF_ELAB_INIZIO_ORD;

        -- <mandato>
		-- <tipo_operazione>
        flussoElabMifElabRec:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if  flussoElabMifElabRec.flussoElabMifAttivo=true then
         if   flussoElabMifElabRec.flussoElabMifElab=true then
            if flussoElabMifElabRec.flussoElabMifParam is not null then
	            flussoElabMifValore:=fnc_mif_ordinativo_carico_bollo( mifOrdinativoIdRec.mif_ord_codice_funzione,flussoElabMifElabRec.flussoElabMifParam);
            else
            	flussoElabMifValore:=mifOrdinativoIdRec.mif_ord_codice_funzione;
            end if;
            if flussoElabMifValore is not null then
				mifFlussoOrdinativoRec.mif_ord_codice_funzione:=flussoElabMifValore;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <numero_mandato>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
/*         	if flussoElabMifTipoDec=false then
				mifFlussoOrdinativoRec.mif_ord_numero:=lpad(mifOrdinativoIdRec.mif_ord_ord_numero,NUM_SETTE,ZERO_PAD);
            else
	            mifFlussoOrdinativoRec.mif_ord_numero:=mifOrdinativoIdRec.mif_ord_ord_numero;
            end if;*/
            mifFlussoOrdinativoRec.mif_ord_numero:=mifOrdinativoIdRec.mif_ord_ord_numero;
         else
            RAISE EXCEPTION ' Configurazione tag/campo non elaborabile.';
         end if;
        end if;


        -- <data_mandato>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true  then
         if  flussoElabMifElabRec.flussoElabMifElab=true then
			mifFlussoOrdinativoRec.mif_ord_data:=mifOrdinativoIdRec.mif_ord_data_emissione;
         else
            RAISE EXCEPTION ' Configurazione tag/campo non  elaborabile.';
         end if;
        end if;



		-- <importo_mandato>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
			-- calcolato inizio ciclo
            null;
         else
         	mifFlussoOrdinativoRec.mif_ord_importo:='0';
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <conto_evidenza>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
			if mifOrdinativoIdRec.mif_ord_contotes_id is not null then
                 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
					   ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura conto tesoreria.';


            	select d.contotes_code into flussoElabMifValore
                from siac_d_contotesoreria d
                where d.contotes_id=mifOrdinativoIdRec.mif_ord_contotes_id;
                if flussoElabMifValore is null then
                	RAISE EXCEPTION ' Dato non presente in archivio.';
                end if;
            end if;

            if flussoElabMifValore is not null then
	            mifFlussoOrdinativoRec.mif_ord_bci_conto_tes:=substring(flussoElabMifValore from 1 for 7 );
            end if;

         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <estremi_provvedimento_autorizzativo>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
					   ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        flussoElabMifValore:=null;
        attoAmmRec:=null;
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
           if mifOrdinativoIdRec.mif_ord_atto_amm_id is not null then
			if flussoElabMifElabRec.flussoElabMifParam is not null then
                if attoAmmTipoSpr is null then
            		attoAmmTipoSpr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;
                if attoAmmTipoAll is null then
                	attoAmmTipoAll:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
            	end if;
            end if;

            select * into attoAmmRec
            from fnc_mif_estremi_atto_amm(mifOrdinativoIdRec.mif_ord_atto_amm_id,
                                          mifOrdinativoIdRec.mif_ord_atto_amm_movg_id,
                                          attoAmmTipoSpr,attoAmmTipoAll,
                                          dataElaborazione,dataFineVal);
           end if;

           if attoAmmRec.attoAmmEstremi is not null   then
                mifFlussoOrdinativoRec.mif_ord_estremi_attoamm:=attoAmmRec.attoAmmEstremi;
           elseif flussoElabMifElabRec.flussoElabMifDef is not null then
           		mifFlussoOrdinativoRec.mif_ord_estremi_attoamm:=flussoElabMifElabRec.flussoElabMifDef;
           end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
       end if;


       -- <responsabile_provvedimento>
	   flussoElabMifElabRec:=null;
	   flussoElabMifValore:=null;
	   flussoElabMifValoreDesc:=null;
	   mifCountRec:=mifCountRec+1;
	   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

	  if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	  end if;
	  if flussoElabMifElabRec.flussoElabMifAttivo=true then
   		if flussoElabMifElabRec.flussoElabMifElab=true then


         if mifOrdinativoIdRec.mif_ord_login_creazione is not null then
			flussoElabMifValore:=mifOrdinativoIdRec.mif_ord_login_creazione;
         end if;

         if flussoElabMifValore is not null then
        	select substring(s.soggetto_desc  from 1 for 12)  into flussoElabMifValoreDesc
			from siac_t_account a, siac_r_soggetto_ruolo r, siac_t_soggetto s
			where a.ente_proprietario_id=enteProprietarioId
            and   a.account_code=flussoElabMifValore
			and   r.soggeto_ruolo_id=a.soggeto_ruolo_id
			and   s.soggetto_id=r.soggetto_id
            and   r.data_cancellazione is null
            and   r.validita_fine is null
            and   a.data_cancellazione is null
            and   a.validita_fine is null;

            if 	flussoElabMifValoreDesc is not null then
            	flussoElabMifValore:=flussoElabMifValoreDesc;
            end if;
         end if;

         if flussoElabMifValore is not null then
            mifFlussoOrdinativoRec.mif_ord_resp_attoamm:=substring(flussoElabMifValore from 1 for 12);
         end if;
       else
		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  	   end if;
     end if;

     -- <ufficio_responsabile>
     mifCountRec:=mifCountRec+1;

     -- <bilancio>
     -- <codifica_bilancio>
     flussoElabMifElabRec:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then

                mifFlussoOrdinativoRec.mif_ord_codifica_bilancio:=mifOrdinativoIdRec.mif_ord_programma_code
                												||mifOrdinativoIdRec.mif_ord_titolo_code;

                mifFlussoOrdinativoRec.mif_ord_capitolo:=bilElemRec.elem_code;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;

	  -- <descrizione_codifica>
      flussoElabMifElabRec:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            	mifFlussoOrdinativoRec.mif_ord_desc_codifica:=substring( bilElemRec.elem_desc from 1 for 30);
                mifFlussoOrdinativoRec.mif_ord_desc_codifica_bil:=substring( mifOrdinativoIdRec.mif_ord_programma_desc from 1 for 30);
     	 else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     	 end if;
      end if;

      -- <gestione>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if flussoElabMifElabRec.flussoElabMifDef is not null then
            	if mifOrdinativoIdRec.mif_ord_anno_bil=mifOrdinativoIdRec.mif_ord_ord_anno_movg then
	            	flussoElabMifValore:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
                else
	                flussoElabMifValore:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,2));
                end if;
            	mifFlussoOrdinativoRec.mif_ord_gestione:=flussoElabMifValore;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;

      -- <anno_residuo>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then

            if  mifOrdinativoIdRec.mif_ord_anno_bil!=mifOrdinativoIdRec.mif_ord_ord_anno_movg  then
               	   mifFlussoOrdinativoRec.mif_ord_anno_res:=mifOrdinativoIdRec.mif_ord_ord_anno_movg;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;


      -- <numero_articolo>
      flussoElabMifElabRec:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            	mifFlussoOrdinativoRec.mif_ord_articolo:=bilElemRec.elem_code2;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;

      -- <voce_economica>
      mifCountRec:=mifCountRec+1;


      -- <importo_bilancio>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
           	mifFlussoOrdinativoRec.mif_ord_importo_bil:=mifFlussoOrdinativoRec.mif_ord_importo;
        else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
      end if;

      -- </bilancio>

      -- <funzionario_delegato>
      -- <codice_funzionario_delegato>
      -- <importo_funzionario_delegato>
      -- <tipologia_funzionario_delegato>
      -- <numero_pagamento_funzionario_delegato>
      mifCountRec:=mifCountRec+5;

      -- <informazioni_beneficiario>

      -- <progressivo_beneficiario>
      flussoElabMifElabRec:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
--	  raise notice 'progressivo_beneficiario mifCountRec=%',mifCountRec;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
                if flussoElabMifElabRec.flussoElabMifDef is not null then
                	mifFlussoOrdinativoRec.mif_ord_progr_benef:=flussoElabMifElabRec.flussoElabMifDef;
                end if;
        else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
      end if;

      -- <importo_beneficiario>
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
  	 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
     		mifFlussoOrdinativoRec.mif_ord_importo_benef:=mifFlussoOrdinativoRec.mif_ord_importo;
	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
      end if;


	  -- <tipo_pagamento>
      flussoElabMifElabRec:=null;
      tipoPagamRec:=null;
	  mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
     	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
	 	if flussoElabMifElabRec.flussoElabMifElab=true then
    	   	if flussoElabMifElabRec.flussoElabMifParam is not null and
               flussoElabMifElabRec.flussoElabMifDef is not null then
            	if codicePaeseIT is null then
                	codicePaeseIT:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;
                if codiceAccreCB is null then
	                codiceAccreCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                end if;
                if codiceAccreREG is null then
	                codiceAccreREG:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
                end if;
				if codiceSepa is null then
	                codiceSepa:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
                end if;
				if codiceExtraSepa is null then
	                codiceExtraSepa:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,5));
                end if;

                if codiceGFB is null then
	                codiceGFB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,6));
                end if;

                select * into tipoPagamRec
                from fnc_mif_tipo_pagamento_splus( mifOrdinativoIdRec.mif_ord_ord_id,
											       (case when MDPRec.iban is not null and length(MDPRec.iban)>=2
                                                   then substring(MDPRec.iban from 1 for 2)
                                                   else null end), -- codicePaese
	                                               codicePaeseIT,codiceSepa,codiceExtraSepa,
                                                   codiceAccreCB,codiceAccreREG,
                                                   flussoElabMifElabRec.flussoElabMifDef, -- compensazione
												   MDPRec.accredito_tipo_id,
                                                   codAccreRec.accredito_gruppo_code,
                                                   mifFlussoOrdinativoRec.mif_ord_importo::NUMERIC, -- importo_ordinativo
                                                   (case when codAccreRec.accredito_tipo_code=codiceGFB then true else false end),
	                                               dataElaborazione,dataFineVal,
                                                   enteProprietarioId);
                if tipoPagamRec is not null then
                	if tipoPagamRec.descTipoPagamento is not null then
                    	mifFlussoOrdinativoRec.mif_ord_pagam_tipo:=tipoPagamRec.descTipoPagamento;
                        mifFlussoOrdinativoRec.mif_ord_pagam_code:=tipoPagamRec.codeTipoPagamento;
                    end if;
                end if;

	        end if;
     	else
       		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	    end if;
      end if;

      -- <impignorabili>
      mifCountRec:=mifCountRec+1;


      -- <frazionabile>
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then --1
         if flussoElabMifElabRec.flussoElabMifElab=true then --2
          if flussoElabMifElabRec.flussoElabMifParam is not null and --3
             flussoElabMifElabRec.flussoElabMifDef is not null  then

             if dataAvvioFrazAttr is null then
             	dataAvvioFrazAttr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
             end if;

             if dataAvvioFrazAttr is not null and
                dataAvvioFrazAttr::timestamp<=date_trunc('DAY',mifOrdinativoIdRec.mif_ord_data_emissione::timestamp) -- data emissione ordinativo
                then
                bavvioFrazAttr:=true;
             end if;

             if bavvioFrazAttr=false then
              if classifTipoCodeFraz is null then
               classifTipoCodeFraz:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
              end if;

              if classifTipoCodeFrazVal is null then
               classifTipoCodeFrazVal:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
              end if;
             else
              if attrFrazionabile is null then
	             attrFrazionabile:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
              end if;
             end if;

             if  bavvioFrazAttr = false then
              if classifTipoCodeFraz is not null and
				 classifTipoCodeFrazVal is not null and
                 classifTipoCodeFrazId is null then
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura classificatoreTipoId '||classifTipoCodeFraz||'.';
             	select tipo.classif_tipo_id into classifTipoCodeFrazId
                from siac_d_class_tipo tipo
                where tipo.ente_proprietario_id=enteProprietarioId
                and   tipo.classif_tipo_code=classifTipoCodeFraz
                and   tipo.data_cancellazione is null
                and   tipo.validita_fine is null
                order by tipo.classif_tipo_id
                limit 1;
              end if;

              if classifTipoCodeFrazVal is not null and
                 classifTipoCodeFrazId is not null then
               strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore classificatore '||classifTipoCodeFraz||' [siac_r_ordinativo_class].';
             	select c.classif_code into flussoElabMifValore
                from siac_r_ordinativo_class r, siac_t_class c
                where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                and   c.classif_id=r.classif_id
                and   c.classif_tipo_id=classifTipoCodeFrazId
                and   r.data_cancellazione is null
                and   r.validita_fine is null
                and   c.data_cancellazione is null
                order by r.ord_classif_id
                limit 1;

              end if;

              if classifTipoCodeFrazVal is not null and
                flussoElabMifValore is not null and
                flussoElabMifValore=classifTipoCodeFrazVal then
             	mifFlussoOrdinativoRec.mif_ord_class_codice_gest_fraz:=flussoElabMifElabRec.flussoElabMifDef;
             end if;
			else
              if attrFrazionabile is not null then
               --- calcolo su attributo
               codResult:=null;
               select 1 into codResult
               from  siac_t_ordinativo_ts ts,siac_r_liquidazione_ord liqord,
                     siac_r_liquidazione_movgest rmov,
                     siac_r_movgest_ts_attr r, siac_t_attr attr
               where ts.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
               and   liqord.sord_id=ts.ord_ts_id
               and   rmov.liq_id=liqord.liq_id
               and   r.movgest_ts_id=rmov.movgest_ts_id
               and   attr.attr_id=r.attr_id
               and   attr.attr_code=attrFrazionabile
               and   r.boolean='N'
               and   r.data_cancellazione is null
               and   r.validita_fine is null
               and   rmov.data_cancellazione is null
               and   rmov.validita_fine is null
               and   liqord.data_cancellazione is null
               and   liqord.validita_fine is null
			   and   ts.data_cancellazione is null
               and   ts.validita_fine is null;

               if codResult is not null then
               	mifFlussoOrdinativoRec.mif_ord_class_codice_gest_fraz:=flussoElabMifElabRec.flussoElabMifDef;
               end if;

             end if;

            end if;

          end if; -- 3
      	 else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;  --- 2

        end if; -- 1

  	   -- <gestione_provvisoria>
       flussoElabMifElabRec:=null;
       mifCountRec:=mifCountRec+1;
        -- gestione_provvisoria da impostare solo se frazionabile=NO
       if mifFlussoOrdinativoRec.mif_ord_class_codice_gest_fraz is not null then
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
          if flussoElabMifElabRec.flussoElabMifParam is not null and
             flussoElabMifElabRec.flussoElabMifDef is not null and
             mifOrdinativoIdRec.mif_ord_bil_fase_ope is not null  then

             if tipoEsercizio is null then
	             tipoEsercizio:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
             end if;
          	if tipoEsercizio=mifOrdinativoIdRec.mif_ord_bil_fase_ope  then
				mifFlussoOrdinativoRec.mif_ord_class_codice_gest_prov=flussoElabMifElabRec.flussoElabMifDef;
            end if;
		   end if;


         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;

        end if;
        --- frazionabile da impostare NO solo se gestione_provvisoria=SI
        if mifFlussoOrdinativoRec.mif_ord_class_codice_gest_prov is null then
        	mifFlussoOrdinativoRec.mif_ord_class_codice_gest_fraz:=null;
        end if;

      else
       	null;
      end if;

      -- <data_esecuzione_pagamento>
      flussoElabMifElabRec:=null;
      ordDataScadenza:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
  	 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
        	if flussoElabMifElabRec.flussoElabMifParam is not null and
               mifFlussoOrdinativoRec.mif_ord_pagam_tipo is not null and
               mifFlussoOrdinativoRec.mif_ord_pagam_tipo=flussoElabMifElabRec.flussoElabMifParam then
            	flussoElabMifElabRec.flussoElabMifElab:=false; -- se REGOLARIZZAZIONE data_esecuzione_pagamento non deve essere valorizzato
            end if;

            if flussoElabMifElabRec.flussoElabMifElab=true then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura data scadenza.';
        	 select sub.ord_ts_data_scadenza into ordDataScadenza
             from siac_t_ordinativo_ts sub
             where sub.ord_ts_id=mifOrdinativoIdRec.mif_ord_subord_id;

             if ordDataScadenza is not null and
--               date_trunc('DAY',ordDataScadenza)>= date_trunc('DAY',dataElaborazione) and
               date_trunc('DAY',ordDataScadenza)> date_trunc('DAY',dataElaborazione) and -- 13.12.2017 Sofia siac-5653
               extract('year' from ordDataScadenza)::integer<=annoBilancio::integer then
		  		mifFlussoOrdinativoRec.mif_ord_pagam_data_esec:=
    		        extract('year' from ordDataScadenza)||'-'||
    	         	lpad(extract('month' from ordDataScadenza)::varchar,2,'0')||'-'||
            	 	lpad(extract('day' from ordDataScadenza)::varchar,2,'0');
             end if;
            end if;

	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
      end if;

      -- <data_scadenza_pagamento>
  	  mifCountRec:=mifCountRec+1;

	  -- <destinazione>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      codResult:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
  	   RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	   if flussoElabMifElabRec.flussoElabMifElab=true then

        if flussoElabMifElabRec.flussoElabMifParam is not null or
           flussoElabMifElabRec.flussoElabMifDef is not null then --1

           if flussoElabMifElabRec.flussoElabMifParam is not null then --2
		    if classVincolatoCode is null then
	        	classVincolatoCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            end if;

            if classVincolatoCode is not null and classVincolatoCodeId is null then
            	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura identificativo classVincolatoCode='||classVincolatoCode||'.';

                select tipo.classif_tipo_id into classVincolatoCodeId
                from siac_d_class_tipo tipo
                where tipo.ente_proprietario_id=enteProprietarioId
                and   tipo.classif_tipo_code=classVincolatoCode;

            end if;

            if classVincolatoCodeId is not null then
            	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore per classVincolatoCode='||classVincolatoCode||'.';

                         select c.classif_desc into flussoElabMifValore
                         from siac_r_ordinativo_class r, siac_t_class c
                         where r.ord_id=  mifOrdinativoIdRec.mif_ord_ord_id
                         and   c.classif_id=r.classif_id
                         and   c.classif_tipo_id=classVincolatoCodeId
                         and   r.data_cancellazione is null
                         and   r.validita_fine is null
                         and   c.data_cancellazione is null;

            end if;
  	     end if; --2


         if flussoElabMifValore is null and --3
            mifOrdinativoIdRec.mif_ord_contotes_id is not null and
        	mifOrdinativoIdRec.mif_ord_contotes_id!=0 then

		    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
    		                   ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
        		               ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
            		           ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                		       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                    		   ||' mifCountRec='||mifCountRec
	                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per conto corrente tesoreria [mif_r_conto_tesoreria_vincolato].';

			select mif.vincolato into flussoElabMifValore
    	    from mif_r_conto_tesoreria_vincolato mif
	    	where mif.ente_proprietario_id=enteProprietarioId
    	    and   mif.contotes_id=mifOrdinativoIdRec.mif_ord_contotes_id
	        and   mif.validita_fine is null
		    and   mif.data_cancellazione is null;


        end if; --3
 	    if flussoElabMifValore is null and
           flussoElabMifElabRec.flussoElabMifDef is not null then
           flussoElabMifValore:=flussoElabMifElabRec.flussoElabMifDef;
        end if;

	    if flussoElabMifValore is not null then
        	mifFlussoOrdinativoRec.mif_ord_progr_dest:=flussoElabMifValore;
        end if;

       end if; --1
      else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
      end if;
     end if;


     -- <numero_conto_banca_italia_ente_ricevente>
     flussoElabMifElabRec:=null;
     flussoElabMifValore:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     codResult:=null;
     if flussoElabMifElabRec.flussoElabMifId is null then
     	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;

     if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
        	if flussoElabMifElabRec.flussoElabMifParam is not null then
            	-- non esposto se regolarizzazione (provvisori)
                if mifFlussoOrdinativoRec.mif_ord_pagam_tipo is not null and
          		   mifFlussoOrdinativoRec.mif_ord_pagam_tipo= trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2)) then
                   flussoElabMifElabRec.flussoElabMifElab:=false;
                end if;

                if flussoElabMifElabRec.flussoElabMifElab=true then
	             if tipoMDPCbi is null then
                   	tipoMDPCbi:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
               	  end if;


                  if tipoMDPCbi is not null then
                  	if codAccreRec.accredito_gruppo_code=tipoMDPCbi then
                        	 mifFlussoOrdinativoRec.mif_ord_bci_conto:=MDPRec.contocorrente;
                    end if;
                  end if;
                 end if;


            end if;
       else
           RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
     end if;


     -- <tipo_contabilita_ente_ricevente>
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=null;
     flussoElabMifValore:=null;
     codResult:=null;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
             if flussoElabMifElabRec.flussoElabMifDef is not null then

                if flussoElabMifElabRec.flussoElabMifParam is not null then
                   if tipoClassFruttifero is null then
                    	tipoClassFruttifero:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                   end if;

                   if tipoClassFruttifero is not null and valFruttifero is null then
	                   valFruttifero:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                       valFruttiferoStr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
                       valFruttiferoStrAltro:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
                   end if;

                   if tipoClassFruttifero is not null and
                      valFruttifero is not null and
                      valFruttiferoStr is not null and
                      valFruttiferoStrAltro is not null and
                      tipoClassFruttiferoId is null then

                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura classifTipoCodeId '||tipoClassFruttifero||'.';
                   	select tipo.classif_tipo_id into tipoClassFruttiferoId
                    from siac_d_class_tipo tipo
                    where tipo.ente_proprietario_id=enteProprietarioId
                    and   tipo.classif_tipo_code=tipoClassFruttifero
                    and   tipo.data_cancellazione is null
                    and   tipo.validita_fine is null;

                   end if;


                   if tipoClassFruttiferoId is not null and
                      valFruttifero is not null and
                      valFruttiferoStr is not null and
                      valFruttiferoStrAltro is not null and
                      valFruttiferoId is null then

                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura classidId '||tipoClassFruttifero||' [siac_r_ordinativo_class].';


                   	select c.classif_code into flussoElabMifValore
                    from siac_r_ordinativo_class r, siac_t_class c
                    where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
	                and   c.classif_id=r.classif_id
                    and   c.classif_tipo_id=tipoClassFruttiferoId
                    and   r.data_cancellazione is null
                    and   r.validita_fine is null
                    and   c.data_cancellazione is null
                    order by r.ord_classif_id limit 1;

                    if flussoElabMifValore is not null then
                    	if flussoElabMifValore=valFruttifero THEN
                        	flussoElabMifValore=valFruttiferoStr;
                        else
                          flussoElabMifValore=valFruttiferoStrAltro;
                        end if;
                    end if;

                  end if;

				end if; -- param

				if flussoElabMifValore is not null then
	                mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil:=flussoElabMifValore;
                end if;

               if mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil is null and
	              mifOrdinativoIdRec.mif_ord_contotes_id is not null and
    	          mifOrdinativoIdRec.mif_ord_contotes_id!=0 then

               	  flussoElabMifValore:=null;
	              strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per conto corrente tesoreria [mif_r_conto_tesoreria_fruttifero].';
	           	  select mif.fruttifero into flussoElabMifValore
	              from mif_r_conto_tesoreria_fruttifero mif
    	          where mif.ente_proprietario_id=enteProprietarioId
        	      and   mif.contotes_id=mifOrdinativoIdRec.mif_ord_contotes_id
            	  and   mif.validita_fine is null
	              and   mif.data_cancellazione is null;

    	          if flussoElabMifValore is not null then
        	       	mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil:=flussoElabMifValore;
            	  end if;

              end if;

              if mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil is null then
                   	mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
              end if;
           end if; -- default
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

      -- <tipo_postalizzazione>
      flussoElabMifElabRec:=null;
      codResult:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifValore:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      raise notice 'tipo_postalizzazione mifCountRec=%',mifCountRec;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
    	if flussoElabMifElabRec.flussoElabMifElab=true then
         if flussoElabMifElabRec.flussoElabMifParam is not null and
            flussoElabMifElabRec.flussoElabMifDef is not null then
           if tipoPagamPostA is null then
           	tipoPagamPostA:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
           end if;

           if tipoPagamPostB is null then
           	tipoPagamPostB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
           end if;


           if tipoPagamPostA is not null or tipoPagamPostB is not null then
			  if tipoPagamRec is not null and tipoPagamRec.descTipoPagamento is not null then
              	if tipoPagamRec.descTipoPagamento in (tipoPagamPostA,tipoPagamPostB) then
	                mifFlussoOrdinativoRec.mif_ord_pagam_postalizza:=flussoElabMifElabRec.flussoElabMifDef;
                end if;
              end if;
           end if;

         end if;
        else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
      end if;


      -- <classificazione>
	  -- <codice_cgu>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      flussoElabMifValoreDesc:=null;
      codiceCge:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      raise notice 'classificazione mifCountRec=%',mifCountRec;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then -- attivo
       if flussoElabMifElabRec.flussoElabMifElab=true then -- elab

        if flussoElabMifElabRec.flussoElabMifParam is not null then -- param

       	 if siopeCodeTipo is null and flussoElabMifElabRec.flussoElabMifParam is not null then
         	siopeCodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
         end if;

         if siopeDef is null and flussoElabMifElabRec.flussoElabMifParam is not null then
         	siopeDef:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
         end if;

         if coalesce(dataAvvioSiopeNew,NVL_STR)=NVL_STR and
            flussoElabMifElabRec.flussoElabMifParam is not null then
           	dataAvvioSiopeNew:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
         end if;

         if coalesce(dataAvvioSiopeNew,NVL_STR)!=NVL_STR and codiceFinVTbr is null then
       	 	codiceFinVTbr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
         end if;

         if coalesce(dataAvvioSiopeNew,NVL_STR)!=NVL_STR then
       	  if dataAvvioSiopeNew::timestamp<=date_trunc('DAY',mifOrdinativoIdRec.mif_ord_data_emissione::timestamp) -- data emissione ordinativo
             then
              bAvvioSiopeNew:=true;
           end if;
         end if;

         if bAvvioSiopeNew=true then -- avvioSiopeNew
           if codiceFinVTbr is not null and codiceFinVTipoTbrId is null then
		  	-- codiceFinVTipoTbrId
            strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura ID codice tipo='||codiceFinVTbr||'.';
			select tipo.classif_tipo_id into strict codiceFinVTipoTbrId
			from siac_d_class_tipo tipo
			where tipo.ente_proprietario_id=enteProprietarioId
			and   tipo.classif_tipo_code=codiceFinVTbr
			and   tipo.data_cancellazione is null
			and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
		    and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));
          end if;

          if codiceFinVTipoTbrId is not null then
          	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per codice tipo='||codiceFinVTbr||'.';

            select replace(substring(class.classif_code,2),'.','') , class.classif_desc
                   into flussoElabMifValore,flussoElabMifValoreDesc
		   	from siac_r_ordinativo_class r, siac_t_class class
			where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
		    and   class.classif_id=r.classif_id
		    and   class.classif_tipo_id=codiceFinVTipoTbrId
		    and   r.data_cancellazione is null
		    and   r.validita_fine is NULL
		    and   class.data_cancellazione is null;

          	if   flussoElabMifValore is null then
             strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per codice tipo='||codiceFinVTbr||'.';

             select replace(substring(class.classif_code,2),'.','') , class.classif_desc
                   into flussoElabMifValore,flussoElabMifValoreDesc
 		   	 from siac_r_liquidazione_class r, siac_t_class class
			 where r.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
		     and   class.classif_id=r.classif_id
		     and   class.classif_tipo_id=codiceFinVTipoTbrId
		     and   r.data_cancellazione is null
		     and   r.validita_fine is NULL
		     and   class.data_cancellazione is null;
            end if;

          end if;
         else -- avvioSiopeNew
           strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura ID codice tipo='||siopeCodeTipo||'.';

           if siopeCodeTipoId is null and siopeCodeTipo is not null then
           	select tipo.classif_tipo_id into siopeCodeTipoId
            from siac_d_class_tipo tipo
            where tipo.classif_tipo_code=siopeCodeTipo
            and   tipo.ente_proprietario_id=enteProprietarioId
            and   tipo.data_cancellazione is null
	 		and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		    and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
           end if;

           strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per codice tipo='||siopeCodeTipo||'.';

           if siopeCodeTipoId is not null then
           	select class.classif_code, class.classif_desc
                   into flussoElabMifValore,flussoElabMifValoreDesc
            from siac_r_ordinativo_class cord, siac_t_class class
            where cord.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
            and cord.data_cancellazione is null
            and cord.validita_fine is null
            and class.classif_id=cord.classif_id
            and class.classif_code!=siopeDef
            and class.data_cancellazione is null
            and class.classif_tipo_id=siopeCodeTipoId;

            if flussoElabMifValore is null then
             select class.classif_code, class.classif_desc
                    into flussoElabMifValore,flussoElabMifValoreDesc
             from siac_r_liquidazione_class cord, siac_t_class class
             where cord.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
             and cord.data_cancellazione is null
             and cord.validita_fine is null
             and class.classif_id=cord.classif_id
             and class.classif_code!=siopeDef
             and class.data_cancellazione is null
             and class.classif_tipo_id=siopeCodeTipoId;
            end if;


           end if;
         end if; -- avvioSiopeNew


         if flussoElabMifValore is not null then
         	mifFlussoOrdinativoRec.mif_ord_class_codice_cge:=flussoElabMifValore;
            codiceCge:=flussoElabMifValore;
         end if;
        end if; -- param
       else -- elab
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if; -- elab
      end if; -- attivo

	  -- <codice_cup>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      flussoElabMifValoreDesc:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
			if flussoElabMifElabRec.flussoElabMifParam is not null then
            	if coalesce(cupAttrCode,NVL_STR)=NVL_STR then
                	cupAttrCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;

                if coalesce(cupAttrCode,NVL_STR)!=NVL_STR and cupAttrId is null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura attr_id '||cupAttrCode||'.';
                	select attr.attr_id into cupAttrId
                    from siac_t_attr attr
                    where attr.ente_proprietario_id=enteProprietarioId
                    and   attr.attr_code=cupAttrCode
                    and   attr.data_cancellazione is null
                    and   attr.validita_fine is null;
                end if;

                if cupAttrId is not null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cupAttrCode||' [siac_r_ordinativo_attr].';

                	select a.testo into flussoElabMifValore
                    from siac_r_ordinativo_attr a
                    where a.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and   a.attr_id=cupAttrId
                    and   a.data_cancellazione is null
                    and   a.validita_fine is null;

                    if coalesce(flussoElabMifValore,NVL_STR)!=NVL_STR then
                    	mifFlussoOrdinativoRec.mif_ord_class_codice_cup:=flussoElabMifValore;
                    end if;


                    if mifFlussoOrdinativoRec.mif_ord_class_codice_cup is null then
                    	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cupAttrCode||' [siac_r_liquidazione_attr].';

                    	select a.testo into flussoElabMifValore
                        from siac_r_liquidazione_attr  a
                        where a.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
                        and   a.attr_id=cupAttrId
                        and   a.data_cancellazione is null
	                    and   a.validita_fine is null;


                        if coalesce(flussoElabMifValore,NVL_STR)!=NVL_STR then
    	                	mifFlussoOrdinativoRec.mif_ord_class_codice_cup:=flussoElabMifValore;
	                    end if;
                    end if;
                end if;
            end if;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

      -- <codice_cpv>
      mifCountRec:=mifCountRec+1;

      -- <importo>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      flussoElabMifValoreDesc:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

	  if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
 	      	mifFlussoOrdinativoRec.mif_ord_class_importo:=mifFlussoOrdinativoRec.mif_ord_importo;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

      -- </classificazione>

      -- <classificazione_dati_siope_uscite>
	  -- <tipo_debito_siope_c>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      isOrdCommerciale:=false;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
        if flussoElabMifElabRec.flussoElabMifParam is not null then
        	if mifOrdinativoIdRec.mif_ord_siope_tipo_debito_id is not null then
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura tipo debito [siac_d_siope_tipo_debito].';
            	select tipo.siope_tipo_debito_desc_bnkit into flussoElabMifValore
                from siac_d_siope_tipo_debito tipo
                where tipo.siope_tipo_debito_id=mifOrdinativoIdRec.mif_ord_siope_tipo_debito_id;
            end if;

            if flussoElabMifValore is not null and
               upper(flussoElabMifValore)=flussoElabMifElabRec.flussoElabMifParam then
               mifFlussoOrdinativoRec.mif_ord_class_tipo_debito:=flussoElabMifElabRec.flussoElabMifParam;
               isOrdCommerciale:=true;
            end if;

        end if;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

	  -- <tipo_debito_siope_nc>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      if isOrdCommerciale=false then
       flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
       strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
       end if;
       if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
         if flussoElabMifElabRec.flussoElabMifParam is not null then
        	if mifOrdinativoIdRec.mif_ord_siope_tipo_debito_id is not null then
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura tipo debito [siac_d_siope_tipo_debito].';
            	select upper(tipo.siope_tipo_debito_desc_bnkit) into flussoElabMifValore
                from siac_d_siope_tipo_debito tipo
                where tipo.siope_tipo_debito_id=mifOrdinativoIdRec.mif_ord_siope_tipo_debito_id;
            end if;

            if flussoElabMifValore is not null and
               upper(flussoElabMifValore)=flussoElabMifElabRec.flussoElabMifParam then
               mifFlussoOrdinativoRec.mif_ord_class_tipo_debito_nc:=flussoElabMifElabRec.flussoElabMifParam;
            end if;

         end if;
        else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
       end if;
      end if;

      -- <codice_cig_siope>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      flussoElabMifValoreDesc:=null;
      mifCountRec:=mifCountRec+1;
      raise notice 'codice_cig_siope mifCountRec=%',mifCountRec;
      -- solo per COMMERCIALI
	  if isOrdCommerciale=true then
       flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
       strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
       end if;

       if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
			if flussoElabMifElabRec.flussoElabMifParam is not null then
            	if coalesce(cigAttrCode,NVL_STR)=NVL_STR then
                	cigAttrCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;

                if coalesce(cigAttrCode,NVL_STR)!=NVL_STR and cigAttrCodeId is null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura attr_id '||cigAttrCode||'.';
                	select attr.attr_id into cigAttrCodeId
                    from siac_t_attr attr
                    where attr.ente_proprietario_id=enteProprietarioId
                    and   attr.attr_code=cigAttrCode
                    and   attr.data_cancellazione is null
                    and   attr.validita_fine is null;
                end if;

                if cigAttrCodeId is not null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cupAttrCode||' [siac_r_ordinativo_attr].';

                	select a.testo into flussoElabMifValore
                    from siac_r_ordinativo_attr a
                    where a.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and   a.attr_id=cigAttrCodeId
                    and   a.data_cancellazione is null
                    and   a.validita_fine is null;

                    if coalesce(flussoElabMifValore,NVL_STR)!=NVL_STR then
                    	mifFlussoOrdinativoRec.mif_ord_class_cig:=flussoElabMifValore;
                    end if;


                    if mifFlussoOrdinativoRec.mif_ord_class_cig is null then
                    	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cigAttrCode||' [siac_r_liquidazione_attr].';

                    	select a.testo into flussoElabMifValore
                        from siac_r_liquidazione_attr  a
                        where a.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
                        and   a.attr_id=cigAttrCodeId
                        and   a.data_cancellazione is null
	                    and   a.validita_fine is null;


                        if coalesce(flussoElabMifValore,NVL_STR)!=NVL_STR then
    	                	mifFlussoOrdinativoRec.mif_ord_class_cig:=flussoElabMifValore;
	                    end if;
                    end if;
                end if;
            end if;
        else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
       end if;
      end if;

      -- <motivo_esclusione_cig_siope>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      -- solo per COMMERCIALI
      if isOrdCommerciale=true and
         mifFlussoOrdinativoRec.mif_ord_class_cig is null then
       flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
       strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
       end if;

	   if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
       	  if mifOrdinativoIdRec.mif_ord_siope_assenza_motivazione_id is not null then
          	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura motivazione [siac_d_siope_assenza_motivazione].';
            raise notice 'siope_assenza_motivazione_desc_bnkit';
		  	select upper(ass.siope_assenza_motivazione_desc_bnkit) into flussoElabMifValore
			from siac_d_siope_assenza_motivazione ass
			where ass.siope_assenza_motivazione_id=mifOrdinativoIdRec.mif_ord_siope_assenza_motivazione_id;
          end if;
		  if flussoElabMifValore is not null then
	    	  mifFlussoOrdinativoRec.mif_ord_class_motivo_nocig:=flussoElabMifValore;
              raise notice 'siope_assenza_motivazione_desc_bnkit=%',mifFlussoOrdinativoRec.mif_ord_class_motivo_nocig;

          end if;
        else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
       end if;
      end if;

      raise notice 'motivo_esclusione_cig_siope mifCountRec=%',mifCountRec;

      -- <fatture_siope>
      -- </fatture_siope>
      mifCountRec:=mifCountRec+12;

      -- <dati_ARCONET_siope>


      -- <codice_missione_siope>
	  flussoElabMifElabRec:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
    	  mifFlussoOrdinativoRec.mif_ord_class_missione:=SUBSTRING(mifOrdinativoIdRec.mif_ord_programma_code from 1 for 2);
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

      raise notice 'codice_missione_siope mifCountRec=%',mifCountRec;

      -- <codice_programma_siope>
	  flussoElabMifElabRec:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
    	  mifFlussoOrdinativoRec.mif_ord_class_programma:=mifOrdinativoIdRec.mif_ord_programma_code;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

      -- <codice_economico_siope>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
                              raise notice 'codice_economico_siope mifCountRec=%',mifCountRec;

      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
        if flussoElabMifElabRec.flussoElabMifParam is not null then

          if codiceFinVTbr is null then
				codiceFinVTbr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
          end if;

		  if codiceFinVTbr is not null and codiceFinVTipoTbrId is null then
		  	-- codiceFinVTipoTbrId
            strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura ID codice tipo='||codiceFinVTbr||'.';
			select tipo.classif_tipo_id into strict codiceFinVTipoTbrId
			from siac_d_class_tipo tipo
			where tipo.ente_proprietario_id=enteProprietarioId
			and   tipo.classif_tipo_code=codiceFinVTbr
			and   tipo.data_cancellazione is null
			and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
		    and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));
          end if;

          if codiceFinVTipoTbrId is not null then
          	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per codice tipo='||codiceFinVTbr||'.';

            select class.classif_code  into flussoElabMifValore
		   	from siac_r_ordinativo_class r, siac_t_class class
			where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
		    and   class.classif_id=r.classif_id
		    and   class.classif_tipo_id=codiceFinVTipoTbrId
		    and   r.data_cancellazione is null
		    and   r.validita_fine is NULL
		    and   class.data_cancellazione is null;

          	if   flussoElabMifValore is null then
             strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per codice tipo='||codiceFinVTbr||'.';

             select class.classif_code  into flussoElabMifValore
 		   	 from siac_r_liquidazione_class r, siac_t_class class
			 where r.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
		     and   class.classif_id=r.classif_id
		     and   class.classif_tipo_id=codiceFinVTipoTbrId
		     and   r.data_cancellazione is null
		     and   r.validita_fine is NULL
		     and   class.data_cancellazione is null;
            end if;
          end if;
/*
       	  if collEventoCodeId is null then
        	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'Lettura tipo coll. evento '||flussoElabMifElabRec.flussoElabMifParam||'.';


            select coll.collegamento_tipo_id into collEventoCodeId
            from siac_d_collegamento_tipo coll
            where coll.ente_proprietario_id=enteProprietarioId
            and   coll.collegamento_tipo_code=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1))
            and   coll.data_cancellazione is null
		    and   date_trunc('day',dataElaborazione)>=date_trunc('day',coll.validita_inizio)
		    and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(coll.validita_fine,dataElaborazione));

         end if;

	     if collEventoCodeId is not null then
		  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'Lettura conto economico patrimoniale.';
                             raise notice 'QUI QUI strMessaggio=%',strMessaggio;

          select conto.pdce_conto_code into flussoElabMifValore
          from siac_t_pdce_conto conto, siac_t_reg_movfin regMovFin, siac_r_evento_reg_movfin rEvento,
               siac_d_evento evento,
               siac_t_mov_ep reg, siac_r_reg_movfin_stato regstato, siac_d_reg_movfin_stato stato,
               siac_t_prima_nota pn, siac_r_prima_nota_stato rpnota, siac_d_prima_nota_stato pnstato,
               siac_t_mov_ep_det det
          where evento.ente_proprietario_id=enteProprietarioId
          and   evento.collegamento_tipo_id=collEventoCodeId -- OP
          and   rEvento.evento_id=evento.evento_id
          and   rEvento.campo_pk_id=mifOrdinativoIdRec.mif_ord_ord_id
          and   regMovFin.regmovfin_id=rEvento.regmovfin_id
--          and   regMovFin.ambito_id=ambitoFinId  -- AMBITO_FIN togliamo ambito
          and   regstato.regmovfin_id=regMovFin.regmovfin_id
          and   stato.regmovfin_stato_id=regstato.regmovfin_stato_id
          and   stato.regmovfin_stato_code!=REGMOVFIN_STATO_A
          and   reg.regmovfin_id=regMovFin.regmovfin_id
          and   pn.pnota_id=reg.regep_id
          and   rpnota.pnota_id=pn.pnota_id
          and   pnstato.pnota_stato_id=rpnota.pnota_stato_id
          and   pnstato.pnota_stato_code!=REGMOVFIN_STATO_A  -- forse sarebbe meglio prendere solo i D
          and   det.movep_id=reg.movep_id
          and   det.movep_det_segno=SEGNO_ECONOMICO -- Dare
		  and   conto.pdce_conto_id=det.pdce_conto_id
          and   regMovFin.data_cancellazione is null
          and   regMovFin.validita_fine is null
          and   rEvento.data_cancellazione is null
          and   rEvento.validita_fine is null
          and   evento.data_cancellazione is null
          and   evento.validita_fine is null
          and   reg.data_cancellazione is null
          and   reg.validita_fine is null
          and   regstato.data_cancellazione is null
          and   regstato.validita_fine is null
          and   pn.data_cancellazione is null
          and   pn.validita_fine is null
          and   rpnota.data_cancellazione is null
          and   rpnota.validita_fine is null
          and   conto.data_cancellazione is null
          and   conto.validita_fine is null
          order by pn.pnota_id desc
          limit 1;
         end if;
*/
       end if;


        if flussoElabMifValore is not null then
	        mifFlussoOrdinativoRec.mif_ord_class_economico:=flussoElabMifValore;
        end if;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

	  -- <importo_codice_economico_siope>
	  mifCountRec:=mifCountRec+1;
      if mifFlussoOrdinativoRec.mif_ord_class_economico is not null then
      	flussoElabMifElabRec:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
                                                    raise notice 'QUI QUI strMessaggio=%',strMessaggio;

	    if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         		mifFlussoOrdinativoRec.mif_ord_class_importo_economico:=mifFlussoOrdinativoRec.mif_ord_importo;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
      end if;

      -- <codice_UE_siope>
      flussoElabMifElabRec:=null;
	  flussoElabMifValore:=null;
	  codResult:=null;
	  mifCountRec:=mifCountRec+1;
            raise notice 'codice_UE_siope mifCountRec=%',mifCountRec;

	  flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	  if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	  end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	if flussoElabMifElabRec.flussoElabMifElab=true then
    	 if flussoElabMifElabRec.flussoElabMifParam is not null then
     		if codiceUECodeTipo is null then
				codiceUECodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
	        end if;

            if codiceUECodeTipo is not null and codiceUECodeTipoId is null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_d_class_tipo.';

        	 select tipo.classif_tipo_id into codiceUECodeTipoId
             from  siac_d_class_tipo tipo
             where tipo.ente_proprietario_id=enteProprietarioId
             and   tipo.classif_tipo_code=codiceUECodeTipo
             and   tipo.data_cancellazione is null
		     and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
		 	 and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
            end if;

	        if codiceUECodeTipoId is not null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_r_ordinativo_class.';
                             raise notice 'QUI QUI codiceUECodeTipo=% strMessaggio=%',codiceUECodeTipo,strMessaggio;

        	 select class.classif_code into flussoElabMifValore
             from siac_r_ordinativo_class rclass, siac_t_class class
             where rclass.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
             and   rclass.data_cancellazione is null
             and   rclass.validita_fine is null
             and   class.classif_id=rclass.classif_id
             and   class.classif_tipo_id=codiceUECodeTipoId
             and   class.data_cancellazione is null
             order by rclass.ord_classif_id
             limit 1;

                             raise notice '222QUI QUI codiceUECodeTipo=% strMessaggio=%',codiceUECodeTipo,strMessaggio;

             if flussoElabMifValore is null then
        	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_r_liquidazione_class.';
        	  select class.classif_code into flussoElabMifValore
              from siac_r_liquidazione_class rclass, siac_t_class class
              where rclass.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
              and   rclass.data_cancellazione is null
              and   rclass.validita_fine is null
              and   class.classif_id=rclass.classif_id
              and   class.classif_tipo_id=codiceUECodeTipoId
              and   class.data_cancellazione is null
              order by rclass.liq_classif_id
              limit 1;
             end if;
	        end if;

      	    if flussoElabMifValore is not null then
                raise notice 'QUI QUI flussoElabMifValore=%',flussoElabMifValore;
            	mifFlussoOrdinativoRec.mif_ord_class_transaz_ue:=flussoElabMifValore;
            end if;

      	 end if;
        else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		end if;
	  end if;

      -- <codice_uscita_siope>
      flussoElabMifElabRec:=null;
	  flussoElabMifValore:=null;
	  codResult:=null;
	  mifCountRec:=mifCountRec+1;
                  raise notice 'codice_uscita_siope mifCountRec=%',mifCountRec;

	  flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	  if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	  end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	if flussoElabMifElabRec.flussoElabMifElab=true then
    	 if flussoElabMifElabRec.flussoElabMifParam is not null then
     		if ricorrenteCodeTipo is null then
				ricorrenteCodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
	        end if;

            if ricorrenteCodeTipo is not null and ricorrenteCodeTipoId is null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_d_class_tipo.';

        	 select tipo.classif_tipo_id into ricorrenteCodeTipoId
             from  siac_d_class_tipo tipo
             where tipo.ente_proprietario_id=enteProprietarioId
             and   tipo.classif_tipo_code=ricorrenteCodeTipo
             and   tipo.data_cancellazione is null
		     and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
		 	 and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
            end if;

	        if ricorrenteCodeTipoId is not null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_r_ordinativo_class.';
                                                    raise notice 'QUI QUI strMessaggio=%',strMessaggio;

        	 select upper(class.classif_desc) into flussoElabMifValore
             from siac_r_ordinativo_class rclass, siac_t_class class
             where rclass.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
             and   rclass.data_cancellazione is null
             and   rclass.validita_fine is null
             and   class.classif_id=rclass.classif_id
             and   class.classif_tipo_id=ricorrenteCodeTipoId
             and   class.data_cancellazione is null
             order by rclass.ord_classif_id
             limit 1;


             if flussoElabMifValore is null then
        	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_r_liquidazione_class.';
        	  select upper(class.classif_desc) into flussoElabMifValore
              from siac_r_liquidazione_class rclass, siac_t_class class
              where rclass.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
              and   rclass.data_cancellazione is null
              and   rclass.validita_fine is null
              and   class.classif_id=rclass.classif_id
              and   class.classif_tipo_id=ricorrenteCodeTipoId
              and   class.data_cancellazione is null
              order by rclass.liq_classif_id
              limit 1;
             end if;
	        end if;

      	    if flussoElabMifValore is not null then
            	mifFlussoOrdinativoRec.mif_ord_class_ricorrente_spesa:=flussoElabMifValore;
            end if;

      	 end if;
        else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		end if;
	  end if;


      -- <codice_cofog_siope>
      flussoElabMifElabRec:=null;
	  flussoElabMifValore:=null;
	  codResult:=null;
	  mifCountRec:=mifCountRec+1;
                        raise notice 'codice_cofog_siope mifCountRec=%',mifCountRec;

	  flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	  if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	  end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	if flussoElabMifElabRec.flussoElabMifElab=true then
    	 if flussoElabMifElabRec.flussoElabMifParam is not null then
     		if codiceCofogCodeTipo is null then
				codiceCofogCodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
	        end if;

            if codiceCofogCodeTipo is not null and codiceCofogCodeTipoId is null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_d_class_tipo.';

        	 select tipo.classif_tipo_id into codiceCofogCodeTipoId
             from  siac_d_class_tipo tipo
             where tipo.ente_proprietario_id=enteProprietarioId
             and   tipo.classif_tipo_code=codiceCofogCodeTipo
             and   tipo.data_cancellazione is null
		     and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
		 	 and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
            end if;

	        if codiceCofogCodeTipoId is not null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_r_ordinativo_class.';
                                                    raise notice 'QUI QUI strMessaggio=%',strMessaggio;

        	 select class.classif_code into flussoElabMifValore
             from siac_r_ordinativo_class rclass, siac_t_class class
             where rclass.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
             and   rclass.data_cancellazione is null
             and   rclass.validita_fine is null
             and   class.classif_id=rclass.classif_id
             and   class.classif_tipo_id=codiceCofogCodeTipoId
             and   class.data_cancellazione is null
             order by rclass.ord_classif_id
             limit 1;


             if flussoElabMifValore is null then
        	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_r_liquidazione_class.';
        	  select class.classif_code into flussoElabMifValore
              from siac_r_liquidazione_class rclass, siac_t_class class
              where rclass.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
              and   rclass.data_cancellazione is null
              and   rclass.validita_fine is null
              and   class.classif_id=rclass.classif_id
              and   class.classif_tipo_id=codiceCofogCodeTipoId
              and   class.data_cancellazione is null
              order by rclass.liq_classif_id
              limit 1;
             end if;
	        end if;

      	    if flussoElabMifValore is not null then
            	mifFlussoOrdinativoRec.mif_ord_class_cofog_codice:=flussoElabMifValore;
            end if;

      	 end if;
        else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		end if;
	  end if;

      -- <importo_cofog_siope>
  	  mifCountRec:=mifCountRec+1;
      if mifFlussoOrdinativoRec.mif_ord_class_cofog_codice is not null then
       flussoElabMifElabRec:=null;
	   flussoElabMifValore:=null;
	   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	   if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	   end if;
       if flussoElabMifElabRec.flussoElabMifAttivo=true then
	     if flussoElabMifElabRec.flussoElabMifElab=true then
        		mifFlussoOrdinativoRec.mif_ord_class_cofog_importo:=mifFlussoOrdinativoRec.mif_ord_importo;

         else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		 end if;
	    end if;
       end if;

      -- </dati_ARCONET_siope>

      -- </classificazione_dati_siope_uscite>

      -- <bollo>
      -- <assoggettamento_bollo>
   	  mifCountRec:=mifCountRec+1;
      ordCodiceBolloDesc:=null;
      codiceBolloPlusDesc:=null;
      codiceBolloPlusEsente:=false;
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      if mifOrdinativoIdRec.mif_ord_codbollo_id is not null then


	   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
  	    end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	  if flussoElabMifElabRec.flussoElabMifElab=true then

          	if flussoElabMifElabRec.flussoElabMifParam is not null and
               flussoElabMifElabRec.flussoElabMifDef is not null and
               mifFlussoOrdinativoRec.mif_ord_pagam_tipo is not null and
               mifFlussoOrdinativoRec.mif_ord_pagam_tipo in
                 (trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1)), -- REGOLARIZZAZIONE
                  trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2))  -- F24EP
                 ) then

               codiceBolloPlusEsente:=true;
               -- REGOLARIZZAZIONE
               if mifFlussoOrdinativoRec.mif_ord_pagam_tipo=
                  trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1)) then
                  mifFlussoOrdinativoRec.mif_ord_bollo_carico:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
               	  mifFlussoOrdinativoRec.mif_ordin_bollo_caus_esenzione:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,2));
               end if;
               -- F24EP
               if mifFlussoOrdinativoRec.mif_ord_pagam_tipo=
                  trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2)) then
                  mifFlussoOrdinativoRec.mif_ord_bollo_carico:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
               	  mifFlussoOrdinativoRec.mif_ordin_bollo_caus_esenzione:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
               end if;
            end if;

            if mifFlussoOrdinativoRec.mif_ord_bollo_carico is null then
          	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura codice bollo.';

             select bollo.codbollo_desc , plus.codbollo_plus_desc, plus.codbollo_plus_esente
                   into ordCodiceBolloDesc, codiceBolloPlusDesc, codiceBolloPlusEsente
             from siac_d_codicebollo bollo, siac_d_codicebollo_plus plus, siac_r_codicebollo_plus rp
             where bollo.codbollo_id=mifOrdinativoIdRec.mif_ord_codbollo_id
             and   rp.codbollo_id=bollo.codbollo_id
             and   plus.codbollo_plus_id=rp.codbollo_plus_id
             and   rp.data_cancellazione is null
             and   rp.validita_fine is null;

             if coalesce(codiceBolloPlusDesc,NVL_STR)!=NVL_STR  then
            	mifFlussoOrdinativoRec.mif_ord_bollo_carico:=codiceBolloPlusDesc;
             end if;
            end if;
          else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		  end if;
        end if;
       end if;

      -- <causale_esenzione_bollo>
   	  mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      if codiceBolloPlusEsente=true and coalesce(ordCodiceBolloDesc,NVL_STR)!=NVL_STR then
      	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
  	    end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	  if flussoElabMifElabRec.flussoElabMifElab=true then
            if mifFlussoOrdinativoRec.mif_ordin_bollo_caus_esenzione is null then
	          	mifFlussoOrdinativoRec.mif_ordin_bollo_caus_esenzione:=substring(ordCodiceBolloDesc from 1 for 30);
            end if;
          else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		  end if;
        end if;
      end if;
      -- </bollo>

	  -- <spese>
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      ordCodiceBolloDesc:=null;
      codiceBolloPlusDesc:=null;
      codiceBolloPlusEsente:=false;
      -- <soggetto_destinatario_delle_spese>
      if mifOrdinativoIdRec.mif_ord_comm_tipo_id is not null then
	   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
  	    end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	  if flussoElabMifElabRec.flussoElabMifElab=true then
          	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura codice commissione.';

            select tipo.comm_tipo_desc , plus.comm_tipo_plus_desc, plus.comm_tipo_plus_esente
                   into ordCodiceBolloDesc, codiceBolloPlusDesc, codiceBolloPlusEsente
            from siac_d_commissione_tipo tipo, siac_d_commissione_tipo_plus plus, siac_r_commissione_tipo_plus rp
            where tipo.comm_tipo_id=mifOrdinativoIdRec.mif_ord_comm_tipo_id
            and   rp.comm_tipo_id=tipo.comm_tipo_id
            and   plus.comm_tipo_plus_id=rp.comm_tipo_plus_id
            and   rp.data_cancellazione is null
            and   rp.validita_fine is null;

            if coalesce(codiceBolloPlusDesc,NVL_STR)!=NVL_STR  then
            	mifFlussoOrdinativoRec.mif_ord_commissioni_carico:=codiceBolloPlusDesc;
            end if;
          else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		  end if;
        end if;
      end if;
      -- <natura_pagamento>
      mifCountRec:=mifCountRec+1;

      -- <causale_esenzione_spese>
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      if codiceBolloPlusEsente=true and mifFlussoOrdinativoRec.mif_ord_commissioni_carico is not null then
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
  	   end if;
       if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	  if flussoElabMifElabRec.flussoElabMifElab=true then
          	mifFlussoOrdinativoRec.mif_ord_commissioni_esenzione:=ordCodiceBolloDesc;
          else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		  end if;
       end if;
      end if;
      -- </spese>

	  -- <beneficiario>
      mifCountRec:=mifCountRec+1;
      -- <anagrafica_beneficiario>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      anagraficaBenefCBI:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
--       raise notice 'beneficiario mifCountRec=%',mifCountRec;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if soggettoSedeSecId is not null then
            	flussoElabMifValore:=soggettoRec.soggetto_desc||' '||soggettoSedeRec.soggetto_desc;
            else
            	flussoElabMifValore:=soggettoRec.soggetto_desc;
            end if;

            /*if flussoElabMifElabRec.flussoElabMifParam is not null and tipoMDPCbi is null then
	           	tipoMDPCbi:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            end if; */

            -- se non e girofondo o se lo e ma il contocorrente_intestazione e vuoto
            -- valorizzo i tag di anagrafica_beneficiario
            -- altrimenti solo anagrafica_beneficiario=contocorrente_intestazione
            -- e anagrafica_beneficiario in dati_a_disposizione_ente
            /*if codAccreRec.accredito_gruppo_code!=tipoMDPCbi or
			   (codAccreRec.accredito_gruppo_code=tipoMDPCbi and
                 (MDPRec.contocorrente_intestazione is null or MDPRec.contocorrente_intestazione='')) then
	           	mifFlussoOrdinativoRec.mif_ord_anag_benef:=substring(flussoElabMifValore from 1 for 140);
            else
	            	anagraficaBenefCBI:=flussoElabMifValore;
	                mifFlussoOrdinativoRec.mif_ord_anag_benef:=substring(MDPRec.contocorrente_intestazione from 1 for 140);
            end if;*/

            mifFlussoOrdinativoRec.mif_ord_anag_benef:=substring(flussoElabMifValore from 1 for 140);

       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
     end if;



	 -- <indirizzo_beneficiario>
     flussoElabMifElabRec:=null;
     flussoElabMifValore:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' indirizzo_benef mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

     if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;

     if flussoElabMifElabRec.flussoElabMifAttivo=true then
       if flussoElabMifElabRec.flussoElabMifElab=true then
        	if soggettoSedeSecId is not null then
                select * into indirizzoRec
                from siac_t_indirizzo_soggetto indir
                where indir.soggetto_id=soggettoSedeSecId
                and   indir.data_cancellazione is null
                and   indir.validita_fine is null;

            else
            	select * into indirizzoRec
                from siac_t_indirizzo_soggetto indir
                where indir.soggetto_id=soggettoRifId
                and   indir.principale='S'
                and   indir.data_cancellazione is null
         	    and   indir.validita_fine is null;

            end if;

            if indirizzoRec is null then
            	-- RAISE EXCEPTION ' Errore in lettura indirizzo soggetto [siac_t_indirizzo_soggetto].';
                isIndirizzoBenef:=false;
            end if;

            if isIndirizzoBenef=true then

             if indirizzoRec.via_tipo_id is not null then
            	select tipo.via_tipo_code into flussoElabMifValore
                from siac_d_via_tipo tipo
                where tipo.via_tipo_id=indirizzoRec.via_tipo_id
                and   tipo.data_cancellazione is null
         	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		 		and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
                if flussoElabMifValore is not null then
                	flussoElabMifValore:=flussoElabMifValore||' ';
                end if;
             end if;

             flussoElabMifValore:=trim(both from coalesce(flussoElabMifValore,'')||coalesce(indirizzoRec.toponimo,'')
                                 ||' '||coalesce(indirizzoRec.numero_civico,''));

             if flussoElabMifValore is not null and anagraficaBenefCBI is null then
	            mifFlussoOrdinativoRec.mif_ord_indir_benef:=substring(flussoElabMifValore from 1 for 30);
             end if;
           end if;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

   	  -- <cap_beneficiario>
      mifCountRec:=mifCountRec+1;
      if isIndirizzoBenef=true then
        if indirizzoRec.zip_code is not null and anagraficaBenefCBI is null then
         flussoElabMifElabRec:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
	            mifFlussoOrdinativoRec.mif_ord_cap_benef:=lpad(indirizzoRec.zip_code,5,'0');
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
        end if;
	  end if;

      -- <localita_beneficiario>
      mifCountRec:=mifCountRec+1;
      if isIndirizzoBenef=true then

        if indirizzoRec.comune_id is not null and anagraficaBenefCBI is null then
         flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;

	     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	select com.comune_desc into flussoElabMifValore
            from siac_t_comune com
            where com.comune_id=indirizzoRec.comune_id
            and   com.data_cancellazione is null
            and   com.validita_fine is null;

            if flussoElabMifValore is not null then
	            mifFlussoOrdinativoRec.mif_ord_localita_benef:=substring(flussoElabMifValore from 1 for 30);
            end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
        end if;
      end if;


	  -- <provincia_beneficiario>
      mifCountRec:=mifCountRec+1;
      if isIndirizzoBenef=true then

        if indirizzoRec.comune_id is not null and anagraficaBenefCBI is null then
         flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	select prov.sigla_automobilistica into flussoElabMifValore
            from siac_r_comune_provincia provRel, siac_t_provincia prov
            where provRel.comune_id=indirizzoRec.comune_id
            and   provRel.data_cancellazione is null
            and   provRel.validita_fine is null
            and   prov.provincia_id=provRel.provincia_id
            and   prov.data_cancellazione is null
            and   prov.validita_fine is null
            order by provRel.data_creazione;

            if flussoElabMifValore is not null then
	            mifFlussoOrdinativoRec.mif_ord_prov_benef:=flussoElabMifValore;
            end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
        end if;
      end if;

      -- <stato_beneficiario>
      mifCountRec:=mifCountRec+1; -- popolare in seguito ricavato il codice_paese di piazzatura
      flussoElabMifElabRec:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
          if anagraficaBenefCBI is null and
             statoBeneficiario=false then
	            statoBeneficiario:=true;
           end if;
         else
           RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;

	  -- <partita_iva_beneficiario>
      mifCountRec:=mifCountRec+1;
      if ( anagraficaBenefCBI is null and
            (soggettoRec.partita_iva is not null or
            (soggettoRec.partita_iva is null and soggettoRec.codice_fiscale is not null and length(soggettoRec.codice_fiscale)=11))
          )   then
      	 flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	    if soggettoRec.partita_iva is not null then
		            mifFlussoOrdinativoRec.mif_ord_partiva_benef:=soggettoRec.partita_iva;
                else
                    if length(trim ( both ' ' from soggettoRec.codice_fiscale))=11 then
                        mifFlussoOrdinativoRec.mif_ord_partiva_benef:=trim ( both ' ' from soggettoRec.codice_fiscale);
                    end if;
                end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
      end if;

       -- <codice_fiscale_beneficiario>
      mifCountRec:=mifCountRec+1;
--      if mifFlussoOrdinativoRec.mif_ord_partiva_benef is null and anagraficaBenefCBI is null then
      	 flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
            -- se CASSA codice_fiscale obbligatorio
          	if flussoElabMifElabRec.flussoElabMifParam is not null then
		            if tipoMDPCo is null then
                    	tipoMDPCo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                	end if;

                    if tipoMDPCo is not null and
                       tipoMDPCo=codAccreRec.accredito_gruppo_code then
                       if soggettoRec.codice_fiscale is not null then
                    	flussoElabMifValore:=trim ( both ' ' from soggettoRec.codice_fiscale);
                       else
	                    if mifFlussoOrdinativoRec.mif_ord_partiva_benef is not null then
     	                   flussoElabMifValore:=mifFlussoOrdinativoRec.mif_ord_partiva_benef;
                        end if;
                       end if;
                    end if;
            end if;

            -- se non CASSA valorizzato se partita iva non presente e  codice_fiscale=16
            if flussoElabMifValore is null and
               mifFlussoOrdinativoRec.mif_ord_partiva_benef is null and
               soggettoRec.codice_fiscale is not null and
               length(soggettoRec.codice_fiscale)=16 then
               flussoElabMifValore:=trim ( both ' ' from soggettoRec.codice_fiscale);
            end if;

            if flussoElabMifValore is not null then
		             mifFlussoOrdinativoRec.mif_ord_codfisc_benef:=flussoElabMifValore;
            end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
--        end if;
      -- </beneficiario>


      -- <delegato>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      isMDPCo:=false;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
         	if flussoElabMifElabRec.flussoElabMifParam is not null then
                    if tipoMDPCo is null then
                    	tipoMDPCo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                	end if;

                    if tipoMDPCo is not null and
                       tipoMDPCo=codAccreRec.accredito_gruppo_code then
                    	isMDPCo:=true;
                    end if;

					if isMDPCo=true and -- non esporre se REGOLARIZZAZIONE ( provvisori di cassa )
                       mifFlussoOrdinativoRec.mif_ord_pagam_tipo is not null and
            		   mifFlussoOrdinativoRec.mif_ord_pagam_tipo=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2)) then
			             isMDPCo=false;
			        end if;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;

      -- <anagrafica_delegato>
      mifCountRec:=mifCountRec+1;
      if isMDPCo=true and MDPRec.quietanziante is not null then
        	flussoElabMifElabRec:=null;
      		flussoElabMifValore:=null;

     	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
		    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        	if flussoElabMifElabRec.flussoElabMifId is null then
	            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    	    end if;
            if flussoElabMifElabRec.flussoElabMifAttivo=true then
         		if flussoElabMifElabRec.flussoElabMifElab=true then
                   	mifFlussoOrdinativoRec.mif_ord_anag_quiet:=MDPRec.quietanziante;
           		else
           			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
		         end if;
	        end if;
      end if;

      mifCountRec:=mifCountRec+7;
--      raise notice 'codfisc_quiet mifCountRec=%',mifCountRec;
      -- <codice_fiscale_delegato>
      if isMDPCo=true and mifFlussoOrdinativoRec.mif_ord_anag_quiet is not null and
         MDPRec.quietanziante_codice_fiscale is not null  and
         length(MDPRec.quietanziante_codice_fiscale)=16   then
             flussoElabMifElabRec:=null;
      		 flussoElabMifValore:=null;
             flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec]; -- 72
		     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        	 if flussoElabMifElabRec.flussoElabMifId is null then
	            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    	     end if;
             if flussoElabMifElabRec.flussoElabMifAttivo=true then
         		if flussoElabMifElabRec.flussoElabMifElab=true then
                   	flussoElabMifValore:=trim ( both ' ' from MDPRec.quietanziante_codice_fiscale);

                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_codfisc_quiet:=flussoElabMifValore;
                    end if;

           		else
           			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
		        end if;
	         end if;
      end if;
      -- </delegato>

	  -- <creditore_effettivo>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      soggettoQuietRec:=null;
      soggettoQuietRifRec:=null;
      soggettoQuietId:=null;
      soggettoQuietRifId:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then

          if flussoElabMifElabRec.flussoElabMifParam is not null and
             mifFlussoOrdinativoRec.mif_ord_pagam_tipo is not null and
             mifFlussoOrdinativoRec.mif_ord_pagam_tipo=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3)) then
             flussoElabMifElabRec.flussoElabMifElab=false;
          end if;

          if flussoElabMifElabRec.flussoElabMifElab=true then -- non esporre su regolarizzazione (provvisori)
           if  ordCsiRelazTipoId is null then
            if ordCsiRelazTipo is null then
            	if flussoElabMifElabRec.flussoElabMifParam is not null then
	                ordCsiRelazTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    ordCsiCOTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                end if;
            end if;

            if ordCsiRelazTipo is  not null then
                select tipo.oil_relaz_tipo_id into ordCsiRelazTipoId
               	from siac_d_oil_relaz_tipo tipo
	            where tipo.ente_proprietario_id=enteProprietarioId
    	          and tipo.oil_relaz_tipo_code=ordCsiRelazTipo
        	      and tipo.data_cancellazione is null
                  and tipo.validita_fine is null;
            end if;
           end if;

           if ordCsiRelazTipoId is not null and
              ( ordCsiCOTipo is null or ordCsiCOTipo!=codAccreRec.accredito_gruppo_code ) then

                soggettoQuietId:=MDPRec.soggetto_id;

                select sogg.*
                       into  soggettoQuietRec
                from siac_t_soggetto sogg, siac_r_soggrel_modpag relmdp,siac_r_soggetto_relaz relsogg,
                     siac_r_oil_relaz_tipo roil
                where sogg.soggetto_id=MDPRec.soggetto_id
                and   sogg.data_cancellazione is null
                and   sogg.validita_fine is null
                and   relmdp.modpag_id=MDPRec.modpag_id
                and   relmdp.data_cancellazione is null
                and   relmdp.validita_fine is null
    			and   relmdp.soggetto_relaz_id=relsogg.soggetto_relaz_id
                and   relsogg.soggetto_id_a=MDPRec.soggetto_id
                and   relsogg.soggetto_id_da=soggettoRifId
                and   roil.relaz_tipo_id=relsogg.relaz_tipo_id
                and   roil.oil_relaz_tipo_id=ordCsiRelazTipoId
                and   relsogg.data_cancellazione is null
                and   relsogg.validita_fine is null
                and   roil.data_cancellazione is null
                and   roil.validita_fine is null;

				if soggettoQuietRec is null then
                	soggettoQuietId:=null;
                end if;

               if soggettoQuietId is not null then
                 select sogg.*
                        into soggettoQuietRifRec
		         from  siac_t_soggetto sogg, siac_r_soggetto_relaz rel
		         where rel.soggetto_id_a=soggettoQuietRec.soggetto_id
		         and   rel.relaz_tipo_id=ordSedeSecRelazTipoId
		         and   rel.ente_proprietario_id=enteProprietarioId
		         and   rel.data_cancellazione is null
                 and   rel.validita_fine is null
                 and   sogg.soggetto_id=rel.soggetto_id_da
		         and   sogg.data_cancellazione is null
                 and   sogg.validita_fine is null;


                 if soggettoQuietRifRec is null then

                 else
                 	soggettoQuietRifId:=soggettoQuietRifRec.soggetto_id;
                 end if;
               end if;
            end if;
          end if;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

      mifCountRec:=mifCountRec+1;
  	  -- <anagrafica_creditore_effettivo>
      if soggettoQuietId is not null then
         flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;

	     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec]; --63
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then
	            if soggettoQuietRifId is not null then
    	        	flussoElabMifValore:=soggettoQuietRifRec.soggetto_desc||' '||soggettoQuietRec.soggetto_desc;
        	    else
            		flussoElabMifValore:=soggettoQuietRec.soggetto_desc;
	            end if;

                if flussoElabMifValore is not null then
                	mifFlussoOrdinativoRec.mif_ord_anag_del:=substring(flussoElabMifValore from 1 for 140);
                end if;
         	else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
	  end if;

      mifCountRec:=mifCountRec+1;
      -- <indirizzo_creditore_effettivo>
      if soggettoQuietId is not null then
         flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         indirizzoRec:=null;
		 flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then

                select * into indirizzoRec
                from siac_t_indirizzo_soggetto indir
                where indir.soggetto_id=soggettoQuietId
                and   (case when soggettoQuietRifId is null
                            then indir.principale='S' else coalesce(indir.principale,'N')='N' end)
                and   indir.data_cancellazione is null
                and   indir.validita_fine is null;

                if indirizzoRec is null then
                    isIndirizzoBenQuiet:=false;
            	end if;

			    if isIndirizzoBenQuiet=true then

            	 if indirizzoRec.via_tipo_id is not null then
            		select tipo.via_tipo_code into flussoElabMifValore
                	from siac_d_via_tipo tipo
               		where tipo.via_tipo_id=indirizzoRec.via_tipo_id
	                and   tipo.data_cancellazione is null
    	     	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 			 		and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));

                	if flussoElabMifValore is not null then
                		flussoElabMifValore:=flussoElabMifValore||' ';
               	    end if;

           		  end if;

	             flussoElabMifValore:=trim(both from coalesce(flussoElabMifValore,'')||coalesce(indirizzoRec.toponimo,'')
    	                             ||' '||coalesce(indirizzoRec.numero_civico,''));

        	     if flussoElabMifValore is not null then
	        	    mifFlussoOrdinativoRec.mif_ord_indir_del:=substring(flussoElabMifValore from 1 for 30);
	             end if;
                end if;
         	else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
     end if;

	 -- <cap_creditore_effettivo>
     mifCountRec:=mifCountRec+1;
     if isIndirizzoBenQuiet=true then
        if soggettoQuietId is not null and indirizzoRec is not null then
         flussoElabMifElabRec:=null;
		 flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then
         		mifFlussoOrdinativoRec.mif_ord_cap_del:=lpad(indirizzoRec.zip_code,5,'0');
            else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;

         end if;
        end if;
     end if;


     -- <localita_creditore_effettivo>
     mifCountRec:=mifCountRec+1;
     if isIndirizzoBenQuiet=true then
        if soggettoQuietId is not null and indirizzoRec.comune_id is not null then
         flussoElabMifElabRec:=null;
		 flussoElabMifValore:=null;
		 flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then

            	select com.comune_desc into flussoElabMifValore
           		from siac_t_comune com
	            where com.comune_id=indirizzoRec.comune_id
    	        and   com.data_cancellazione is null
                and   com.validita_fine is null;

	            if flussoElabMifValore is not null then
		            mifFlussoOrdinativoRec.mif_ord_localita_del:=substring(flussoElabMifValore from 1 for 30);
        	    end if;
            else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
        end if;
     end if;

     mifCountRec:=mifCountRec+1;
	 -- <provincia_creditore_effettivo>
	 if isIndirizzoBenQuiet=true then
        if soggettoQuietId is not null and indirizzoRec.comune_id is not null then
         flussoElabMifElabRec:=null;
		 flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then

            	select prov.sigla_automobilistica into flussoElabMifValore
            	from siac_r_comune_provincia provRel, siac_t_provincia prov
           		where provRel.comune_id=indirizzoRec.comune_id
           	  	and   provRel.data_cancellazione is null
                and   provRel.validita_fine is null
        	    and   prov.provincia_id=provRel.provincia_id
            	and   prov.data_cancellazione is null
                and   prov.validita_fine is null
        	    order by provRel.data_creazione;

	            if flussoElabMifValore is not null then
		            mifFlussoOrdinativoRec.mif_ord_prov_del:=flussoElabMifValore;
        	    end if;
            else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
        end if;
     end if;

     mifCountRec:=mifCountRec+1;
	 -- <stato_creditore_effettivo>
     if soggettoQuietId is not null  then
        flussoElabMifElabRec:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
       end if;
       if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
         	if statoDelegatoCredEff=false then
	            statoDelegatoCredEff:=true;
                -- valorizzato poi in piazzatura
            end if;
          else
           RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
       end if;
     end if;

     mifCountRec:=mifCountRec+1;
	 -- <partita_iva_creditore_effettivo>
     if soggettoQuietId is not null THEN
         flussoElabMifElabRec:=null;
		 flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then
                if  soggettoQuietRifId is not null then
	            	if soggettoQuietRifRec.partita_iva is not null  or
                       (soggettoQuietRifRec.partita_iva is null and
                        soggettoQuietRifRec.codice_fiscale is not null and length(soggettoQuietRifRec.codice_fiscale)=11)
                       then
                       	if soggettoQuietRifRec.partita_iva is not null then
	    	             flussoElabMifValore:=soggettoQuietRifRec.partita_iva;
                        else
                         flussoElabMifValore:=trim ( both ' ' from soggettoQuietRifRec.codice_fiscale);
                        end if;
                     end if;
				else
                	if soggettoQuietRec.partita_iva is not null  or
                       (soggettoQuietRec.partita_iva is null and
                        soggettoQuietRec.codice_fiscale is not null and length(soggettoQuietRec.codice_fiscale)=11)
                       then
                       	if soggettoQuietRec.partita_iva is not null then
	    	             flussoElabMifValore:=soggettoQuietRec.partita_iva;
                        else
                         flussoElabMifValore:=trim ( both ' ' from soggettoQuietRec.codice_fiscale);
                        end if;
                    end if;
                end if;

			    if flussoElabMifValore is not null then
	                mifFlussoOrdinativoRec.mif_ord_partiva_del:=flussoElabMifValore;
                end if;
         	else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
     end if;

     mifCountRec:=mifCountRec+1;
     -- <codice_fiscale_creditore_effettivo>
     if soggettoQuietId is not null  then
         flussoElabMifElabRec:=null;
		 flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
         	if flussoElabMifElabRec.flussoElabMifElab=true then
            	if soggettoQuietRifId is not null then
                 if mifFlussoOrdinativoRec.mif_ord_partiva_del is null then
                  if soggettoQuietRifRec.codice_fiscale is not null and
                     length(soggettoQuietRifRec.codice_fiscale)= 16 then
	                 flussoElabMifValore:=trim ( both ' ' from soggettoQuietRifRec.codice_fiscale);
                  end if;
                 end if;
                else
                 if soggettoQuietRec.codice_fiscale is not null and
                    length(soggettoQuietRec.codice_fiscale)=16 then
	                 flussoElabMifValore:=trim ( both ' ' from soggettoQuietRec.codice_fiscale);
                 end if;
                end if;

				if flussoElabMifValore is not null then
	                mifFlussoOrdinativoRec.mif_ord_codfisc_del:=flussoElabMifValore;
                end if;
         	else
            	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
        end if;
     end if;

     -- </creditore_effettivo>
/**/
	 -- <piazzatura>
     flussoElabMifElabRec:=null;
     isOrdPiazzatura:=false;
     accreditoGruppoCode:=null;
     isPaeseSepa:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
--     raise notice 'piazzatura mifCountRec=%',mifCountRec;
     if flussoElabMifElabRec.flussoElabMifId is null then
      	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
       	 if flussoElabMifElabRec.flussoElabMifParam is not null then
            isOrdPiazzatura:=fnc_mif_ordinativo_piazzatura_splus(MDPRec.accredito_tipo_id,
                                                           		 mifOrdinativoIdRec.mif_ord_codice_funzione,
		  												         flussoElabMifElabRec.flussoElabMifParam,
                                                                 mifFlussoOrdinativoRec.mif_ord_pagam_tipo,
			                                                     dataElaborazione,dataFineVal,enteProprietarioId);
         end if;
      	else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
        end if;
     end if;

     if isOrdPiazzatura=true then

      	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura tipo accredito MDP per popolamento  campi relativi a'||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

--        raise notice 'Ordinativo con piazzatura % codice funzione=%',mifOrdinativoIdRec.mif_ord_ord_id,mifOrdinativoIdRec.mif_ord_codice_funzione;

		accreditoGruppoCode:=codAccreRec.accredito_gruppo_code;

        if MDPRec.iban is not null and length(MDPRec.iban)>2  then
        	select distinct 1 into isPaeseSepa
            from siac_t_sepa sepa
            where sepa.sepa_iso_code=substring(upper(MDPRec.iban) from 1 for 2)
            and   sepa.ente_proprietario_id=enteProprietarioId
            and   sepa.data_cancellazione is null
      	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',sepa.validita_inizio)
 			and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(sepa.validita_fine,dataElaborazione));
        end if;
     end if;


     -- <abi_beneficiario>
 	 mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true then
        flussoElabMifElabRec:=null;
     	flussoElabMifValore:=null;

	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
                    if tipoPaeseCB is null then
	                    tipoPaeseCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;

                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.iban is not null and length(MDPRec.iban)>2 and
                       tipoPaeseCB is not null and tipoPaeseCB=substring(upper(MDPRec.iban) from 1 for 2) then -- solo IT
                       	flussoElabMifValore:=substring(upper(MDPRec.iban) from 6 for 5);
                    end if;
                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_abi_benef:=flussoElabMifValore;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
     	 end if;
	 end if;

     -- <cab_beneficiario>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true then
         flussoElabMifElabRec:=null;
     	 flussoElabMifValore:=null;
 	     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	     if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;
         if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
                    if tipoPaeseCB is null then
	                    tipoPaeseCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;

                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.iban is not null and length(MDPRec.iban)>2 and
                       tipoPaeseCB is not null and tipoPaeseCB=substring(upper(MDPRec.iban) from 1 for 2) then -- solo IT
                       	flussoElabMifValore:=substring(upper(MDPRec.iban) from 11 for 5);
                    end if;
                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_cab_benef:=flussoElabMifValore;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
     	 end if;
     end if;

     -- <numero_conto_corrente_beneficiario>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true then
        flussoElabMifElabRec:=null;
     	flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
                    if tipoPaeseCB is null then
	                    tipoPaeseCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;
                    if tipoMDPCCP is null then
                    	tipoMDPCCP:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
                    end if;

                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.iban is not null and length(MDPRec.iban)>2 and
                       tipoPaeseCB is not null and tipoPaeseCB=substring(upper(MDPRec.iban) from 1 for 2) then -- solo IT
                       	flussoElabMifValore:=substring(upper(MDPRec.iban) from 16 for 12);
                    end if;

                    if tipoMDPCCP is not null and tipoMDPCCP=accreditoGruppoCode and
                       coalesce(MDPRec.contocorrente,NVL_STR)!=NVL_STR then
                       flussoElabMifValore:=lpad(MDPRec.contocorrente,NUM_DODICI,ZERO_PAD);
                    end if;

                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_cc_benef:=flussoElabMifValore;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
     	 end if;
     end if;

     -- <caratteri_controllo>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true then
	    flussoElabMifElabRec:=null;
    	flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
                    if tipoPaeseCB is null then
	                    tipoPaeseCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;

                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.iban is not null and length(MDPRec.iban)>2 and
                       tipoPaeseCB is not null and tipoPaeseCB=substring(upper(MDPRec.iban) from 1 for 2) then -- solo IT
                       	flussoElabMifValore:=substring(upper(MDPRec.iban) from 3 for 2);
                    end if;
                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_ctrl_benef:=flussoElabMifValore;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
     	end if;
     end if;


     -- <codice_cin>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true then
        flussoElabMifElabRec:=null;
     	flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
                    if tipoPaeseCB is null then
	                    tipoPaeseCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;

                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.iban is not null and length(MDPRec.iban)>2 and
                       tipoPaeseCB is not null and tipoPaeseCB=substring(upper(MDPRec.iban) from 1 for 2) then -- solo IT
                       	flussoElabMifValore:=substring(upper(MDPRec.iban) from 5 for 1);
                    end if;
                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_cin_benef:=flussoElabMifValore;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
     	 end if;
     end if;

     -- <codice_paese>
	 mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true then
        flussoElabMifElabRec:=null;
     	flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
                    if tipoPaeseCB is null then
	                    tipoPaeseCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;

                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.iban is not null and length(MDPRec.iban)>2 and
                       tipoPaeseCB is not null and tipoPaeseCB=substring(upper(MDPRec.iban) from 1 for 2) then -- solo IT
                       	flussoElabMifValore:=substring(upper(MDPRec.iban) from 1 for 2);
                    end if;

                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_cod_paese_benef:=flussoElabMifValore;
--                        raise notice 'statoBenficiario=%',statoBeneficiario;
                        if statoBeneficiario=true and statoDelegatoCredEff=false then -- se CSI IBAN non riporta dati del beneficiario quindi omettiamo codice_paese
                        	mifFlussoOrdinativoRec.mif_ord_stato_benef:=flussoElabMifValore;
                        end if;
                        if statoDelegatoCredEff=true then
	                        mifFlussoOrdinativoRec.mif_ord_stato_del:=flussoElabMifValore;
                        end if;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
       end if;
     end if;


     -- extra sepa
     -- <denominazione_banca_destinataria>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true and isPaeseSepa is null then
		 flussoElabMifElabRec:=null;
     	 flussoElabMifValore:=null;
		 flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	     if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	 end if;
         if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifParam is not null then
                	if tipoMDPCB is null then
	                    tipoMDPCB:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;


                    if tipoMDPCB is not null and tipoMDPCB=accreditoGruppoCode and
                       MDPRec.banca_denominazione is not null  then
                       	flussoElabMifValore:=MDPRec.banca_denominazione;
                    end if;
                    if flussoElabMifValore is not null then
                    	mifFlussoOrdinativoRec.mif_ord_denom_banca_benef:=flussoElabMifValore;
                    end if;
    	        end if;
    	  	else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
     	 end if;
     end if;
     -- </piazzatura>

     -- sezione esteri sepa
     -- <sepa_credit_transfer>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true
        and isPaeseSepa is not null then
     	flussoElabMifElabRec:=null;
   	    flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	     if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	 end if;
         if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
		     if flussoElabMifElabRec.flussoElabMifParam is not null then
                if paeseSepaTr is null then
	        	   	paeseSepaTr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;
                if accreditoGruppoSepaTr is null then
	            	accreditoGruppoSepaTr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                end if;
                if SepaTr is null then
		            SepaTr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
                end if;

    	        if accreditoGruppoSepaTr is not null and SepaTr is not null and paeseSepaTr is not null then
	    	        sepaCreditTransfer:=true;
            	end if;
             end if;
            else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
     end if;

     -- <iban>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true
        and sepaCreditTransfer=true
        and isPaeseSepa is not null
        and accreditoGruppoSepaTr=accreditoGruppoCode then
     	flussoElabMifElabRec:=null;
   	    flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	     if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	 end if;
         if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
		     	if MDPRec.iban is not null and length(MDPRec.iban)>=2 and
        		   substring(upper(MDPRec.iban) from 1 for 2)!=paeseSepaTr then
		           	mifFlussoOrdinativoRec.mif_ord_sepa_iban_tr:=MDPRec.iban;
        		end if;
            else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
     end if;

     -- <bic>
     mifCountRec:=mifCountRec+1;
     if isOrdPiazzatura=true
        and sepaCreditTransfer=true
        and isPaeseSepa is not null
        and accreditoGruppoSepaTr=accreditoGruppoCode then
     	flussoElabMifElabRec:=null;
   	    flussoElabMifValore:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	     if flussoElabMifElabRec.flussoElabMifId is null then
      		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	 end if;
         if flussoElabMifElabRec.flussoElabMifAttivo=true then
      		if flussoElabMifElabRec.flussoElabMifElab=true then
		     	if MDPRec.bic is not null and
                   MDPRec.iban is not null and length(MDPRec.iban)>=2 and
        		   substring(upper(MDPRec.iban) from 1 for 2)!=paeseSepaTr then
		           mifFlussoOrdinativoRec.mif_ord_sepa_bic_tr:=MDPRec.bic;
        		end if;
            else
        	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
         end if;
     end if;
     mifCountRec:=mifCountRec+5;
     -- </sepa_credit_transfer>


     -- <causale> ancora informazioni_beneficiario
     flussoElabMifElabRec:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifValore:=null;
     flussoElabMifValoreDesc:=null;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
--     raise notice 'causale mifCountRec=%',mifCountRec;
     if flussoElabMifElabRec.flussoElabMifId is null then
  	 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
        	if flussoElabMifElabRec.flussoElabMifParam is not null then
            	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura CUP-CIG.';
            	if cupCausAttr is null then
	            	cupCausAttr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;
                if cigCausAttr is null then
	                cigCausAttr:=trim (both ' '	 from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                end if;

                if coalesce(cupCausAttr,NVL_STR)!=NVL_STR  and cupCausAttrId is null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura attr_id '||cupCausAttr||'.';
                	select attr.attr_id into cupCausAttrId
                    from siac_t_attr attr
                    where attr.ente_proprietario_id=enteProprietarioId
                    and   attr.attr_code=cupCausAttr
                    and   attr.data_cancellazione is null
                    and   attr.validita_fine is null;

                end if;

                if coalesce(cigCausAttr,NVL_STR)!=NVL_STR and cigCausAttrId is null then

                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura attr_id '||cigCausAttr||'.';
                	select attr.attr_id into cigCausAttrId
                    from siac_t_attr attr
                    where attr.ente_proprietario_id=enteProprietarioId
                    and   attr.attr_code=cigCausAttr
                    and   attr.data_cancellazione is null
                    and   attr.validita_fine is null;

                end if;


                if cupCausAttrId is not null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cupCausAttr||' [siac_r_ordinativo_attr].';

                	select a.testo into flussoElabMifValore
                    from siac_r_ordinativo_attr a
                    where a.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and   a.attr_id=cupCausAttrId
                    and   a.data_cancellazione is null
                    and   a.validita_fine is null;

                    if coalesce(flussoElabMifValore,NVL_STR)=NVL_STR then
                       	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cupCausAttr||' [siac_r_liquidazione_attr].';

                    	select a.testo into flussoElabMifValore
                        from siac_r_liquidazione_attr  a
                        where a.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
                        and   a.attr_id=cupCausAttrId
                        and   a.data_cancellazione is null
	                    and   a.validita_fine is null;
                    end if;
                end if;

                if cigCausAttrId is not null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cigCausAttr||' [siac_r_ordinativo_attr].';

                	select a.testo into flussoElabMifValoreDesc
                    from siac_r_ordinativo_attr a
                    where a.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and   a.attr_id=cigCausAttrId
                    and   a.data_cancellazione is null
                    and   a.validita_fine is null;

                    if coalesce(flussoElabMifValoreDesc,NVL_STR)=NVL_STR then
                       	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
	                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
    	                   ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
        	               ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
            	           ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                	       ||' mifCountRec='||mifCountRec
                    	   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore '||cigCausAttr||' [siac_r_liquidazione_attr].';

                    	select a.testo into flussoElabMifValoreDesc
                        from siac_r_liquidazione_attr  a
                        where a.liq_id=mifOrdinativoIdRec.mif_ord_liq_id
                        and   a.attr_id=cigCausAttrId
                        and   a.data_cancellazione is null
	                    and   a.validita_fine is null;
                    end if;
                end if;

            end if;
            -- cup
			if coalesce(flussoElabMifValore,NVL_STR)!=NVL_STR then
			       	mifFlussoOrdinativoRec.mif_ord_pagam_causale:=cupCausAttr||' '||flussoElabMifValore;

            end if;
            -- cig
			if coalesce(flussoElabMifValoreDesc,NVL_STR)!=NVL_STR  then
                	mifFlussoOrdinativoRec.mif_ord_pagam_causale:=
                      trim (both ' ' from coalesce(mifFlussoOrdinativoRec.mif_ord_pagam_causale,' ')||
                           ' '||cigCausAttr||' '||flussoElabMifValoreDesc);
            end if;


			mifFlussoOrdinativoRec.mif_ord_pagam_causale:=
      			replace(replace(substring(trim (both ' ' from coalesce(mifFlussoOrdinativoRec.mif_ord_pagam_causale,' ')||' '||mifOrdinativoIdRec.mif_ord_desc )
	                            from 1 for 370) , chr(VT_ASCII),chr(SPACE_ASCII)),chr(BS_ASCII),NVL_STR);

--			raise notice 'mifFlussoOrdinativoRec.mif_ord_pagam_causale %',mifFlussoOrdinativoRec.mif_ord_pagam_causale;


	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
     end if;

     -- <sospeso>
     -- <numero_provvisorio>
     -- <importo_provvisorio>
     mifCountRec:=mifCountRec+2;

	 -- <ritenuta>
     -- <importo_ritenute>
     -- <numero_reversale>
     -- <progressivo_versante>
     mifCountRec:=mifCountRec+3;

	 -- <informazioni_aggiuntive>

     -- <lingua>
    flussoElabMifElabRec:=null;
    mifCountRec:=mifCountRec+1;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
  	 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
        	if flussoElabMifElabRec.flussoElabMifDef is not null then
        		mifFlussoOrdinativoRec.mif_ord_lingua:=flussoElabMifElabRec.flussoElabMifDef;

--                raise notice 'LINGUA def % %',flussoElabMifElabRec.flusso_elab_mif_campo,flussoElabMifElabRec.flussoElabMifDef;
            end if;
	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
     end if;


    -- <riferimento_documento_esterno>
    mifCountRec:=mifCountRec+1;
    if tipoPagamRec is not null then
    	flussoElabMifElabRec:=null;
        flussoElabMifValore:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
  		 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;
    	if flussoElabMifElabRec.flussoElabMifAttivo=true then
    		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifDef is not null and
                   flussoElabMifElabRec.flussoElabMifParam is not null then

                    -- modalita accredito=STI - STIPENDI
                    if codAccreRec.accredito_tipo_code =
                           trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3)) then
                           flussoElabMifValore:=
                             trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,2));
                    end if;

                    if  coalesce(flussoElabMifValore,'')='' and
                        tipoPagamRec.descTipoPagamento in
                        (trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1)),
                         trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2))
                        ) then
		                flussoElabMifValore:=tipoPagamRec.descTipoPagamento;
                    end if;

                    if coalesce(flussoElabMifValore,'')='' and tipoPagamRec.defRifDocEsterno=true then
                        flussoElabMifValore:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
                    end if;

                    if coalesce(flussoElabMifValore,'')!='' then
	                    mifFlussoOrdinativoRec.mif_ord_rif_doc_esterno:=flussoElabMifValore;
                    end if;
		        end if;
			else
     			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
		    end if;
    	end if;
    end if;
    -- </informazioni_aggiuntive>

    -- <sostituzione_mandato>

    flussoElabMifElabRec:=null;
    ordSostRec:=null;
    mifCountRec:=mifCountRec+1;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
                	select * into ordSostRec
                    from fnc_mif_ordinativo_sostituito( mifOrdinativoIdRec.mif_ord_ord_id,
 														ordRelazCodeTipoId,
                                                        dataElaborazione,dataFineVal);
    	else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	    end if;

    end if;

   mifCountRec:=mifCountRec+3;
   if ordSostRec is not null then
   		 flussoElabMifElabRec:=null;
   		 flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec-2];
	     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec-2
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         -- <numero_mandato_da_sostituire>
      	 if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      	 end if;

      	 if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	   if flussoElabMifElabRec.flussoElabMifElab=true then
--        		mifFlussoOrdinativoRec.mif_ord_num_ord_colleg:=lpad(ordSostRec.ordNumeroSostituto::varchar,NUM_SETTE,ZERO_PAD);
                mifFlussoOrdinativoRec.mif_ord_num_ord_colleg:=ordSostRec.ordNumeroSostituto::varchar;
	    	else
     			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     	end if;
         end if;

     	-- <progressivo_beneficiario_da_sostuire>
     	flussoElabMifElabRec:=null;
  	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec-1];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec-1
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    	if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
     		if flussoElabMifElabRec.flussoElabMifElab=true then
            	if flussoElabMifElabRec.flussoElabMifDef is not null then
                	mifFlussoOrdinativoRec.mif_ord_progr_ord_colleg:=flussoElabMifElabRec.flussoElabMifDef;
                end if;
     	    else
     			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
	    end if;

        -- <esercizio_mandato_da_sostituire>
        flussoElabMifElabRec:=null;
		flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    	if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
     		if flussoElabMifElabRec.flussoElabMifElab=true then
               	mifFlussoOrdinativoRec.mif_ord_anno_ord_colleg:=ordSostRec.ordAnnoSostituto;
     	    else
     			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
	    end if;

     end if;


     -- <dati_a_disposizione_ente_beneficiario> facoltativo non valorizzato
     -- </informazioni_beneficiario>

     -- <dati_a_disposizione_ente_mandato>
	 -- <codice_distinta>
     flussoElabMifElabRec:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifValore:=null;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	 end if;

     if flussoElabMifElabRec.flussoElabMifAttivo=true then
      if flussoElabMifElabRec.flussoElabMifElab=true then
      		if mifOrdinativoIdRec.mif_ord_dist_id is not null then
				strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura distinta [siac_d_distinta].';
            	select  d.dist_code into flussoElabMifValore
                from siac_d_distinta d
                where d.dist_id=mifOrdinativoIdRec.mif_ord_dist_id;
            end if;

            if flussoElabMifValore is not null then
              	mifFlussoOrdinativoRec.mif_ord_codice_distinta:=flussoElabMifValore;
            end if;
      else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	  end if;
	 end if;

     -- <atto_contabile>
     flussoElabMifElabRec:=null;
     flussoElabMifValore:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
	     if flussoElabMifElabRec.flussoElabMifElab=true then
         	if flussoElabMifElabRec.flussoElabMifParam is not null then
                if attoAmmTipoAllRag is null then
            		attoAmmTipoAllRag:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;
                if attoAmmStrTipoRag is null then
                	attoAmmStrTipoRag:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
         		end if;

                if attoAmmTipoAllRag is not null and  attoAmmStrTipoRag is not null then

                 flussoElabMifValore:=fnc_mif_estremi_attoamm_all(mifOrdinativoIdRec.mif_ord_atto_amm_id,
                 										          attoAmmTipoAllRag,attoAmmStrTipoRag,
                                                                  dataElaborazione, dataFineVal);

                end if;
          	end if;

            if flussoElabMifValore is not null then
                 	mifFlussoOrdinativoRec.mif_ord_codice_atto_contabile:=flussoElabMifValore;
            end if;

         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

     -- </dati_a_disposizione_ente_mandato>

     -- </mandato>
/**/
        /*raise notice 'codice_funzione= %',mifFlussoOrdinativoRec.mif_ord_codice_funzione;
		raise notice 'numero_mandato= %',mifFlussoOrdinativoRec.mif_ord_numero;
        raise notice 'data_mandato= %',mifFlussoOrdinativoRec.mif_ord_data;
        raise notice 'importo_mandato= %',mifFlussoOrdinativoRec.mif_ord_importo;*/

		 strMessaggio:='Inserimento mif_t_ordinativo_spesa per ord. numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        INSERT INTO mif_t_ordinativo_spesa
        (
  		-- mif_ord_data_elab, def now
  		 mif_ord_flusso_elab_mif_id,
 		 mif_ord_bil_id,
 		 mif_ord_ord_id,
  		 mif_ord_anno,
  		 mif_ord_numero,
  		 mif_ord_codice_funzione,
  		 mif_ord_data,
  		 mif_ord_importo,
  		 mif_ord_flag_fin_loc,
  		 mif_ord_documento,
  		 mif_ord_bci_tipo_ente_pag,
  		 mif_ord_bci_dest_ente_pag,
  		 mif_ord_bci_conto_tes,
 		 mif_ord_estremi_attoamm,
         mif_ord_resp_attoamm,
         mif_ord_uff_resp_attomm,
  		 mif_ord_codice_abi_bt,
  		 mif_ord_codice_ente,
  		 mif_ord_desc_ente,
  		 mif_ord_codice_ente_bt,
  		 mif_ord_anno_esercizio,
         mif_ord_codice_flusso_oil,
  		 mif_ord_id_flusso_oil,
  		 mif_ord_data_creazione_flusso,
  		 mif_ord_anno_flusso,
 		 mif_ord_codice_struttura,
  		 mif_ord_ente_localita,
  		 mif_ord_ente_indirizzo,
 		 mif_ord_codice_raggrup,
  		 mif_ord_progr_benef,
         mif_ord_progr_dest,
  		 mif_ord_bci_conto,
  		 mif_ord_bci_tipo_contabil,
  		 mif_ord_class_codice_cge,
  		 mif_ord_class_importo,
  		 mif_ord_class_codice_cup,
  		 mif_ord_class_codice_gest_prov,
  		 mif_ord_class_codice_gest_fraz,
  		 mif_ord_codifica_bilancio,
         mif_ord_capitolo,
  		 mif_ord_articolo,
  		 mif_ord_desc_codifica,
         mif_ord_desc_codifica_bil,
  		 mif_ord_gestione,
  		 mif_ord_anno_res,
  		 mif_ord_importo_bil,
  		 mif_ord_stanz,
    	 mif_ord_mandati_stanz,
  		 mif_ord_disponibilita,
  		 mif_ord_prev,
  		 mif_ord_mandati_prev,
  		 mif_ord_disp_cassa,
  		 mif_ord_anag_benef,
  		 mif_ord_indir_benef,
  		 mif_ord_cap_benef,
  		 mif_ord_localita_benef,
  		 mif_ord_prov_benef,
         mif_ord_stato_benef,
  		 mif_ord_partiva_benef,
  		 mif_ord_codfisc_benef,
  		 mif_ord_anag_quiet,
  		 mif_ord_indir_quiet,
  		 mif_ord_cap_quiet,
  		 mif_ord_localita_quiet,
  		 mif_ord_prov_quiet,
  		 mif_ord_partiva_quiet,
  		 mif_ord_codfisc_quiet,
	     mif_ord_stato_quiet,
  		 mif_ord_anag_del,
         mif_ord_indir_del,
         mif_ord_cap_del,
         mif_ord_localita_del,
         mif_ord_prov_del,
  		 mif_ord_codfisc_del,
         mif_ord_partiva_del,
         mif_ord_stato_del,
  		 mif_ord_invio_avviso,
  		 mif_ord_abi_benef,
  		 mif_ord_cab_benef,
  		 mif_ord_cc_benef_estero,
 		 mif_ord_cc_benef,
         mif_ord_ctrl_benef,
  		 mif_ord_cin_benef,
  		 mif_ord_cod_paese_benef,
  		 mif_ord_denom_banca_benef,
  		 mif_ord_cc_postale_benef,
  		 mif_ord_swift_benef,
  		 mif_ord_iban_benef,
         mif_ord_sepa_iban_tr,
         mif_ord_sepa_bic_tr,
         mif_ord_sepa_id_end_tr,
  		 mif_ord_bollo_esenzione,
  		 mif_ord_bollo_carico,
  		 mif_ordin_bollo_caus_esenzione,
  		 mif_ord_commissioni_carico,
         mif_ord_commissioni_esenzione,
  		 mif_ord_commissioni_importo,
         mif_ord_commissioni_natura,
  		 mif_ord_pagam_tipo,
  		 mif_ord_pagam_code,
  		 mif_ord_pagam_importo,
  		 mif_ord_pagam_causale,
  		 mif_ord_pagam_data_esec,
  		 mif_ord_lingua,
  		 mif_ord_rif_doc_esterno,
  		 mif_ord_info_tesoriere,
  		 mif_ord_flag_copertura,
  		 mif_ord_num_ord_colleg,
  		 mif_ord_progr_ord_colleg,
  		 mif_ord_anno_ord_colleg,
  		 mif_ord_code_operatore,
  		 mif_ord_descri_estesa_cap,
  		 mif_ord_siope_codice_cge,
  		 mif_ord_siope_descri_cge,
         mif_ord_codice_ente_ipa,
         mif_ord_codice_ente_istat,
         mif_ord_codice_ente_tramite,
         mif_ord_codice_ente_tramite_bt,
	     mif_ord_riferimento_ente,
         mif_ord_importo_benef,
         mif_ord_pagam_postalizza,
         mif_ord_class_tipo_debito,
         mif_ord_class_tipo_debito_nc,
         mif_ord_class_cig,
         mif_ord_class_motivo_nocig,
         mif_ord_class_missione,
         mif_ord_class_programma,
         mif_ord_class_economico,
         mif_ord_class_importo_economico,
         mif_ord_class_transaz_ue,
         mif_ord_class_ricorrente_spesa,
         mif_ord_class_cofog_codice,
         mif_ord_class_cofog_importo,
         mif_ord_codice_distinta,
         mif_ord_codice_atto_contabile,
  		 validita_inizio,
         ente_proprietario_id,
  		 login_operazione
		)
		VALUES
        (
	  	 --:mif_ord_data_elab,
  		 flussoElabMifLogId, --idElaborazione univoco
  		 mifOrdinativoIdRec.mif_ord_bil_id,
  		 mifOrdinativoIdRec.mif_ord_ord_id,
  		 mifOrdinativoIdRec.mif_ord_ord_anno,
  		 mifFlussoOrdinativoRec.mif_ord_numero,
  		 mifFlussoOrdinativoRec.mif_ord_codice_funzione,
  		 mifFlussoOrdinativoRec.mif_ord_data,
--  	     (case when mifFlussoOrdinativoRec.mif_ord_codice_funzione in (FUNZIONE_CODE_N,FUNZIONE_CODE_A) then
--                    '0.00' else mifFlussoOrdinativoRec.mif_ord_importo end),
         mifFlussoOrdinativoRec.mif_ord_importo,
 		 mifFlussoOrdinativoRec.mif_ord_flag_fin_loc,
  	     mifFlussoOrdinativoRec.mif_ord_documento,
 		 mifFlussoOrdinativoRec.mif_ord_bci_tipo_ente_pag,
 	 	 mifFlussoOrdinativoRec.mif_ord_bci_dest_ente_pag,
 		 mifFlussoOrdinativoRec.mif_ord_bci_conto_tes,
 		 mifFlussoOrdinativoRec.mif_ord_estremi_attoamm,
         mifFlussoOrdinativoRec.mif_ord_resp_attoamm,
  		 mifFlussoOrdinativoRec.mif_ord_uff_resp_attomm,
 		 mifFlussoOrdinativoRec.mif_ord_codice_abi_bt,
 		 mifFlussoOrdinativoRec.mif_ord_codice_ente,
		 mifFlussoOrdinativoRec.mif_ord_desc_ente,
  		 mifFlussoOrdinativoRec.mif_ord_codice_ente_bt,
 		 mifFlussoOrdinativoRec.mif_ord_anno_esercizio,
  		annoBilancio||flussoElabMifDistOilRetId::varchar,
  		flussoElabMifOilId, --idflussoOil
        extract(year from now())||'-'||
        lpad(extract('month' from now())::varchar,2,'0')||'-'||
        lpad(extract('day' from now())::varchar,2,'0')||'T'||
        lpad(extract('hour' from now())::varchar,2,'0')||':'||
        lpad(extract('minute' from now())::varchar,2,'0')||':'||'00',  -- mif_ord_data_creazione_flusso
        extract(year from now())::integer,
 		mifFlussoOrdinativoRec.mif_ord_codice_struttura,
 		mifFlussoOrdinativoRec.mif_ord_ente_localita,
		mifFlussoOrdinativoRec.mif_ord_ente_indirizzo,
 		mifFlussoOrdinativoRec.mif_ord_codice_raggrup,
 		mifFlussoOrdinativoRec.mif_ord_progr_benef,
 		mifFlussoOrdinativoRec.mif_ord_progr_dest,
 		mifFlussoOrdinativoRec.mif_ord_bci_conto,
  		mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil,
 		mifFlussoOrdinativoRec.mif_ord_class_codice_cge,
        mifFlussoOrdinativoRec.mif_ord_class_importo,
 		mifFlussoOrdinativoRec.mif_ord_class_codice_cup,
 		mifFlussoOrdinativoRec.mif_ord_class_codice_gest_prov,
 		mifFlussoOrdinativoRec.mif_ord_class_codice_gest_fraz,
 		mifFlussoOrdinativoRec.mif_ord_codifica_bilancio,
        mifFlussoOrdinativoRec.mif_ord_capitolo,
  		mifFlussoOrdinativoRec.mif_ord_articolo,
 		mifFlussoOrdinativoRec.mif_ord_desc_codifica,
        mifFlussoOrdinativoRec.mif_ord_desc_codifica_bil,
		mifFlussoOrdinativoRec.mif_ord_gestione,
 		mifFlussoOrdinativoRec.mif_ord_anno_res,
 		mifFlussoOrdinativoRec.mif_ord_importo_bil,
        mifFlussoOrdinativoRec.mif_ord_stanz,
    	mifFlussoOrdinativoRec.mif_ord_mandati_stanz,
  		mifFlussoOrdinativoRec.mif_ord_disponibilita,
		mifFlussoOrdinativoRec.mif_ord_prev,
  		mifFlussoOrdinativoRec.mif_ord_mandati_prev,
  		mifFlussoOrdinativoRec.mif_ord_disp_cassa,
        mifFlussoOrdinativoRec.mif_ord_anag_benef,
  		mifFlussoOrdinativoRec.mif_ord_indir_benef,
		mifFlussoOrdinativoRec.mif_ord_cap_benef,
 		mifFlussoOrdinativoRec.mif_ord_localita_benef,
  		mifFlussoOrdinativoRec.mif_ord_prov_benef,
        mifFlussoOrdinativoRec.mif_ord_stato_benef,
 		mifFlussoOrdinativoRec.mif_ord_partiva_benef,
  		mifFlussoOrdinativoRec.mif_ord_codfisc_benef,
  		mifFlussoOrdinativoRec.mif_ord_anag_quiet,
        mifFlussoOrdinativoRec.mif_ord_indir_quiet,
  		mifFlussoOrdinativoRec.mif_ord_cap_quiet,
 		mifFlussoOrdinativoRec.mif_ord_localita_quiet,
  		mifFlussoOrdinativoRec.mif_ord_prov_quiet,
 		mifFlussoOrdinativoRec.mif_ord_partiva_quiet,
 		mifFlussoOrdinativoRec.mif_ord_codfisc_quiet,
        mifFlussoOrdinativoRec.mif_ord_stato_quiet,
 		mifFlussoOrdinativoRec.mif_ord_anag_del,
        mifFlussoOrdinativoRec.mif_ord_indir_del,
        mifFlussoOrdinativoRec.mif_ord_cap_del,
 		mifFlussoOrdinativoRec.mif_ord_localita_del,
 		mifFlussoOrdinativoRec.mif_ord_prov_del,
 		mifFlussoOrdinativoRec.mif_ord_codfisc_del,
 		mifFlussoOrdinativoRec.mif_ord_partiva_del,
        mifFlussoOrdinativoRec.mif_ord_stato_del,
 		mifFlussoOrdinativoRec.mif_ord_invio_avviso,
 		mifFlussoOrdinativoRec.mif_ord_abi_benef,
 		mifFlussoOrdinativoRec.mif_ord_cab_benef,
 		mifFlussoOrdinativoRec.mif_ord_cc_benef_estero,
 		mifFlussoOrdinativoRec.mif_ord_cc_benef,
 		mifFlussoOrdinativoRec.mif_ord_ctrl_benef,
 		mifFlussoOrdinativoRec.mif_ord_cin_benef,
 		mifFlussoOrdinativoRec.mif_ord_cod_paese_benef,
  		mifFlussoOrdinativoRec.mif_ord_denom_banca_benef,
 		mifFlussoOrdinativoRec.mif_ord_cc_postale_benef,
  		mifFlussoOrdinativoRec.mif_ord_swift_benef,
  		mifFlussoOrdinativoRec.mif_ord_iban_benef,
        mifFlussoOrdinativoRec.mif_ord_sepa_iban_tr,
        mifFlussoOrdinativoRec.mif_ord_sepa_bic_tr,
        mifFlussoOrdinativoRec.mif_ord_sepa_id_end_tr,
 		mifFlussoOrdinativoRec.mif_ord_bollo_esenzione,
  		mifFlussoOrdinativoRec.mif_ord_bollo_carico,
  		mifFlussoOrdinativoRec.mif_ordin_bollo_caus_esenzione,
 		mifFlussoOrdinativoRec.mif_ord_commissioni_carico,
        mifFlussoOrdinativoRec.mif_ord_commissioni_esenzione,
		mifFlussoOrdinativoRec.mif_ord_commissioni_importo,
        mifFlussoOrdinativoRec.mif_ord_commissioni_natura,
  		mifFlussoOrdinativoRec.mif_ord_pagam_tipo,
 		mifFlussoOrdinativoRec.mif_ord_pagam_code,
	    mifFlussoOrdinativoRec.mif_ord_pagam_importo,
 		mifFlussoOrdinativoRec.mif_ord_pagam_causale,
 		mifFlussoOrdinativoRec.mif_ord_pagam_data_esec,
 		mifFlussoOrdinativoRec.mif_ord_lingua,
		mifFlussoOrdinativoRec.mif_ord_rif_doc_esterno,
 		mifFlussoOrdinativoRec.mif_ord_info_tesoriere,
 		mifFlussoOrdinativoRec.mif_ord_flag_copertura,
		mifFlussoOrdinativoRec.mif_ord_num_ord_colleg,
		mifFlussoOrdinativoRec.mif_ord_progr_ord_colleg,
		mifFlussoOrdinativoRec.mif_ord_anno_ord_colleg,
        mifFlussoOrdinativoRec.mif_ord_code_operatore,
        mifFlussoOrdinativoRec.mif_ord_descri_estesa_cap,
        mifFlussoOrdinativoRec.mif_ord_siope_codice_cge,
        mifFlussoOrdinativoRec.mif_ord_siope_descri_cge,
        mifFlussoOrdinativoRec.mif_ord_codice_ente_ipa,
        mifFlussoOrdinativoRec.mif_ord_codice_ente_istat,
        mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite,
        mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite_bt,
	    mifFlussoOrdinativoRec.mif_ord_riferimento_ente,
        mifFlussoOrdinativoRec.mif_ord_importo_benef,
        mifFlussoOrdinativoRec.mif_ord_pagam_postalizza,
        mifFlussoOrdinativoRec.mif_ord_class_tipo_debito,
        mifFlussoOrdinativoRec.mif_ord_class_tipo_debito_nc,
        mifFlussoOrdinativoRec.mif_ord_class_cig,
        mifFlussoOrdinativoRec.mif_ord_class_motivo_nocig,
        mifFlussoOrdinativoRec.mif_ord_class_missione,
        mifFlussoOrdinativoRec.mif_ord_class_programma,
        mifFlussoOrdinativoRec.mif_ord_class_economico,
        mifFlussoOrdinativoRec.mif_ord_class_importo_economico,
        mifFlussoOrdinativoRec.mif_ord_class_transaz_ue,
        mifFlussoOrdinativoRec.mif_ord_class_ricorrente_spesa,
        mifFlussoOrdinativoRec.mif_ord_class_cofog_codice,
        mifFlussoOrdinativoRec.mif_ord_class_cofog_importo,
	    mifFlussoOrdinativoRec.mif_ord_codice_distinta,
        mifFlussoOrdinativoRec.mif_ord_codice_atto_contabile,
        now(),
        enteProprietarioId,
        loginOperazione
   )
   returning mif_ord_id into mifOrdSpesaId;




 -- dati fatture da valorizzare se ordinativo commerciale
 -- @@@@ sicuramente da completare
 -- <fattura_siope>
 if isGestioneFatture = true and isOrdCommerciale=true then
  flussoElabMifElabRec:=null;
  mifCountRec:=FLUSSO_MIF_ELAB_FATTURE;
  titoloCap:=null;
  flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Gestione fatture.';

  if mifOrdinativoIdRec.mif_ord_titolo_code=titoloCorrente then
	  	titoloCap:=descriTitoloCorrente;
  else
   if mifOrdinativoIdRec.mif_ord_titolo_code=titoloCapitale then
     	titoloCap:=descriTitoloCapitale;
   end if;
  end if;

  ordRec:=null;
  for ordRec in
  (select * from fnc_mif_ordinativo_documenti_splus( mifOrdinativoIdRec.mif_ord_ord_id,
											         numeroDocs::integer,
                                                     tipoDocs,
                                                     docAnalogico,
                                                     attrCodeDataScad,
                                                     titoloCap,
                                                     enteOilRec.ente_oil_codice_pcc_uff,
		   		                        	         enteProprietarioId,
	            		                             dataElaborazione,dataFineVal)
  )
  loop
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Inserimento fatture '
                       ||' in mif_t_ordinativo_spesa_documenti '
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         insert into  mif_t_ordinativo_spesa_documenti
         ( mif_ord_id,
		   mif_ord_documento,
           mif_ord_doc_codice_ipa_ente,
	       mif_ord_doc_tipo,
           mif_ord_doc_tipo_a,
		   mif_ord_doc_id_lotto_sdi,
		   mif_ord_doc_tipo_analog,
		   mif_ord_doc_codfisc_emis,
		   mif_ord_doc_anno,
	       mif_ord_doc_numero,
	       mif_ord_doc_importo,
	       mif_ord_doc_data_scadenza,
	       mif_ord_doc_motivo_scadenza,
	       mif_ord_doc_natura_spesa,
		   validita_inizio,
		   ente_proprietario_id,
		   login_operazione
         )
         values
         (mifOrdSpesaId,
          ordRec.numero_fattura_siope,
		  ordRec.codice_ipa_ente_siope,
		  ordRec.tipo_documento_siope,
          ordRec.tipo_documento_siope_a,
          ordRec.identificativo_lotto_sdi_siope,
          ordRec.tipo_documento_analogico_siope,
          trim ( both ' ' from ordRec.codice_fiscale_emittente_siope),
		  ordRec.anno_emissione_fattura_siope,
		  ordRec.numero_fattura_siope,
          ordRec.importo_siope,
		  ordRec.data_scadenza_pagam_siope,
		  ordRec.motivo_scadenza_siope,
    	  ordRec.natura_spesa_siope,
          now(),
          enteProprietarioId,
          loginOperazione
         );
  end loop;
 end if;




   -- <ritenuta>
   -- <importo_ritenuta>
   -- <numero_reversale>
   -- <progressivo_reversale>

   if  isRitenutaAttivo=true then
    ritenutaRec:=null;
    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Gestione  ritenute'
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    for ritenutaRec in
    (select *
     from fnc_mif_ordinativo_ritenute(mifOrdinativoIdRec.mif_ord_ord_id,
         	 					      tipoRelazRitOrd,tipoRelazSubOrd,tipoRelazSprOrd,
                                      tipoOnereIrpefId,tipoOnereInpsId,
                                      tipoOnereIrpegId,
									  ordStatoCodeAId,ordDetTsTipoId,
                                      flussoElabMifTipoDec,
    	                              enteProprietarioId,dataElaborazione,dataFineVal)
    )
    loop
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Inserimento ritenuta'
                       ||' in mif_t_ordinativo_spesa_ritenute '
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
   		insert into mif_t_ordinativo_spesa_ritenute
        (mif_ord_id,
  		 mif_ord_rit_tipo,
 		 mif_ord_rit_importo,
 		 mif_ord_rit_numero,
  		 mif_ord_rit_ord_id,
 		 mif_ord_rit_progr_rev,
  		 validita_inizio,
		 ente_proprietario_id,
		 login_operazione)
        values
        (mifOrdSpesaId,
         tipoRitenuta,
         ritenutaRec.importoRitenuta,
         ritenutaRec.numeroRitenuta,
         ritenutaRec.ordRitenutaId,
         progrRitenuta,
         now(),
         enteProprietarioId,
         loginOperazione
        );

    end loop;
   end if;

   -- <sospeso>
   -- <numero_provvisorio>
   -- <importo_provvisorio>
  if  isRicevutaAttivo=true then
    ricevutaRec:=null;
    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Gestione  provvisori'
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    for ricevutaRec in
    (select *
     from fnc_mif_ordinativo_ricevute(mifOrdinativoIdRec.mif_ord_ord_id,
                                      flussoElabMifTipoDec,
    	                              enteProprietarioId,dataElaborazione,dataFineVal)
    )
    loop
    	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Inserimento   ricevuta'
                       ||' in mif_t_ordinativo_spesa_ricevute '
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
   		insert into mif_t_ordinativo_spesa_ricevute
        (mif_ord_id,
	     mif_ord_ric_anno,
	     mif_ord_ric_numero,
	     mif_ord_provc_id,
		 mif_ord_ric_importo,
	     validita_inizio,
		 ente_proprietario_id,
	     login_operazione
        )
        values
        (mifOrdSpesaId,
         ricevutaRec.annoRicevuta,
         ricevutaRec.numeroRicevuta,
         ricevutaRec.provRicevutaId,
         ricevutaRec.importoRicevuta,
         now(),
         enteProprietarioId,
         loginOperazione
        );
    end loop;
  end if;

  numeroOrdinativiTrasm:=numeroOrdinativiTrasm+1;
 end loop;

/* if comPccAttrId is not null and numeroOrdinativiTrasm>0 then
   	   strMessaggio:='Inserimento Registro PCC.';
	   insert into siac_t_registro_pcc
	   (doc_id,
    	subdoc_id,
	    pccop_tipo_id,
    	ordinativo_data_emissione,
	    ordinativo_numero,
    	rpcc_quietanza_data,
        rpcc_quietanza_importo,
	    soggetto_id,
    	validita_inizio,
	    ente_proprietario_id,
    	login_operazione
	    )
    	(
         with
         mif as
         (select m.mif_ord_ord_id ord_id, m.mif_ord_soggetto_id soggetto_id,
                 ord.ord_emissione_data , ord.ord_numero
          from mif_t_ordinativo_spesa_id m, siac_t_ordinativo ord
          where m.ente_proprietario_id=enteProprietarioId
          and   substring(m.mif_ord_codice_funzione from 1 for 1)=FUNZIONE_CODE_I
          and   ord.ord_id=m.mif_ord_ord_id
         ),
         tipodoc as
         (select tipo.doc_tipo_id
          from siac_d_doc_tipo tipo ,siac_r_doc_tipo_attr attr
          where attr.attr_id=comPccAttrId
          and   attr.boolean='S'
          and   tipo.doc_tipo_id=attr.doc_tipo_id
          and   attr.data_cancellazione is null
          and   attr.validita_fine is null
          and   tipo.data_cancellazione is null
          and   tipo.validita_fine is null
         ),
         doc as
         (select distinct m.mif_ord_ord_id ord_id, subdoc.doc_id , subdoc.subdoc_id, subdoc.subdoc_importo, doc.doc_tipo_id
	      from  mif_t_ordinativo_spesa_id m, siac_t_ordinativo_ts ts, siac_r_subdoc_ordinativo_ts rsubdoc,
                siac_t_subdoc subdoc, siac_t_doc doc
          where m.ente_proprietario_id=enteProprietarioId
          and   substring(m.mif_ord_codice_funzione from 1 for 1)=FUNZIONE_CODE_I
          and   ts.ord_id=m.mif_ord_ord_id
          and   rsubdoc.ord_ts_id=ts.ord_ts_id
          and   subdoc.subdoc_id=rsubdoc.subdoc_id
          and   doc.doc_id=subdoc.doc_id
          and   ts.data_cancellazione is null
          and   ts.validita_fine is null
          and   rsubdoc.data_cancellazione is null
          and   rsubdoc.validita_fine is null
          and   subdoc.data_cancellazione is null
          and   subdoc.validita_fine is null
          and   doc.data_cancellazione is null
          and   doc.validita_fine is null
         )
         select
          doc.doc_id,
          doc.subdoc_id,
          pccOperazTipoId,
--          mif.ord_emissione_data,
--		  mif.ord_emissione_data+(1*interval '1 day'),
		  mif.ord_emissione_data,
          mif.ord_numero,
          dataElaborazione,
          doc.subdoc_importo,
          mif.soggetto_id,
          now(),
          enteProprietarioId,
          loginOperazione
         from mif, doc,tipodoc
         where mif.ord_id=doc.ord_id
         and   tipodoc.doc_tipo_id=doc.doc_tipo_id
        );
   end if;*/


   strMessaggio:='Aggiornamento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
   update siac_t_progressivo p set prog_value=flussoElabMifOilId
   where p.ente_proprietario_id=enteProprietarioId
   and   p.prog_key='oil_out_'||annoBilancio
   and   p.ambito_id=ambitoFinId
   and   p.data_cancellazione is null
   and   p.validita_fine is null;

   strMessaggio:='Aggiornamento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_'||MANDMIF_TIPO||'_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
   update siac_t_progressivo p set prog_value=flussoElabMifDistOilRetId
   where p.ente_proprietario_id=enteProprietarioId
   and   p.prog_key='oil_'||MANDMIF_TIPO||'_'||annoBilancio
   and   p.ambito_id=ambitoFinId
   and   p.data_cancellazione is null
   and   p.validita_fine is null;


   strMessaggio:='Aggiornamento mif_t_flusso_elaborato.';

   update  mif_t_flusso_elaborato
   set (flusso_elab_mif_id_flusso_oil,flusso_elab_mif_codice_flusso_oil,flusso_elab_mif_num_ord_elab,flusso_elab_mif_file_nome,flusso_elab_mif_esito_msg)=
   	   (flussoElabMifOilId,annoBilancio||flussoElabMifDistOilRetId::varchar,numeroOrdinativiTrasm,flussoElabMifTipoNomeFile||'_'||enteOilRec.ente_oil_codice,
        'Elaborazione in corso tipo flusso '||MANDMIF_TIPO||' - Dati inseriti in mif_t_ordinativo_spesa')
   where flusso_elab_mif_id=flussoElabMifLogId;

    -- gestire aggiornamento mif_t_flusso_elaborato

	RAISE NOTICE 'numeroOrdinativiTrasm %', numeroOrdinativiTrasm;
    messaggioRisultato:=strMessaggioFinale||' Trasmessi '||numeroOrdinativiTrasm||' ordinativi di spesa.';
    messaggioRisultato:=upper(messaggioRisultato);
    flussoElabMifId:=flussoElabMifLogId;
    nomeFileMif:=flussoElabMifTipoNomeFile||'_'||enteOilRec.ente_oil_codice;


    flussoElabMifDistOilId:=(annoBilancio||flussoElabMifDistOilRetId::varchar)::integer;
    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE :  % %',strMessaggioFinale,coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 100),mifCountRec;
        if codResult=-12 then
          messaggioRisultato:=
        	coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 500),'')||' '||mifCountRec||'.' ;
          codiceRisultato:=0;
        else
          messaggioRisultato:=
        	coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||'ERRORE:  '||' '||coalesce(substring(upper(SQLERRM) from 1 for 500),'')||' '||mifCountRec||'.' ;
       	  codiceRisultato:=-1;
    	end if;

        numeroOrdinativiTrasm:=0;
		messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;

        return;
     when NO_DATA_FOUND THEN
        raise notice '% % ERRORE : % %',strMessaggioFinale,coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 500),mifCountRec;
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||' Nessun dato presente in archivio '||' '||mifCountRec||'.';
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;

        return;
     when TOO_MANY_ROWS THEN
        raise notice '% % ERRORE : % %',strMessaggioFinale,coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 500),mifCountRec;
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||' Diverse righe presenti in archivio '||' '||mifCountRec||'.';
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then


            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;
        return;
	when others  THEN
		raise notice '% % Errore DB % % %',strMessaggioFinale,coalesce(strMessaggio,''),SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 100),mifCountRec;
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'ERRORE DB:'||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 500)||' '||mifCountRec||'.' ;
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;

        else
        	flussoElabMifId:=null;
        end if;

        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_spesa_splus
( enteProprietarioId integer,
  nomeEnte VARCHAR,
  annobilancio varchar,
  loginOperazione varchar,
  dataElaborazione timestamp,
  out flussoElabMifDistOilId integer,
  out flussoElabMifId integer,
  out numeroOrdinativiTrasm integer,
  out nomeFileMif varchar,
  out codiceRisultato integer,
  out messaggioRisultato varchar )
RETURNS record AS
$body$
DECLARE


 strMessaggio VARCHAR(1500):='';
 strMessaggioFinale VARCHAR(1500):='';

 mifOrdinativoRec record;

BEGIN
  	strMessaggioFinale:='Invio ordinativi di spesa SIOPE PLUS..';


	numeroOrdinativiTrasm:=0;
    codiceRisultato:=0;
    messaggioRisultato:='';
	flussoElabMifId:=null;
    nomeFileMif:=null;
    flussoElabMifDistOilId:=null;

    strMessaggio:='Richiamo fnc_mif_ordinativo_spesa_splus interno.';
	select *  into mifOrdinativoRec
    from fnc_mif_ordinativo_spesa_splus
         (enteProprietarioId,
		  nomeEnte,
		  annobilancio,
		  loginOperazione,
		  dataElaborazione,
          null);

	numeroOrdinativiTrasm:=mifOrdinativoRec.numeroOrdinativiTrasm;
    codiceRisultato:=mifOrdinativoRec.codiceRisultato;
    messaggioRisultato:=mifOrdinativoRec.messaggioRisultato;
	flussoElabMifId:=mifOrdinativoRec.flussoElabMifId;
    nomeFileMif:=mifOrdinativoRec.nomeFileMif;
    flussoElabMifDistOilId:=mifOrdinativoRec.flussoElabMifDistOilId;

    return;

exception
	when others  THEN
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'ERRORE DB:'||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 500)||'.' ;
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_spesa_splus_ritrasm
( enteProprietarioId integer,
  nomeEnte VARCHAR,
  annobilancio varchar,
  ordArray text,
  loginOperazione varchar,
  dataElaborazione timestamp)
RETURNS text AS
$body$
DECLARE


 strMessaggio VARCHAR(1500):='';
 strMessaggioFinale VARCHAR(1500):='';

 mifOrdinativoRec record;
 mifOrdRitrasmRec record;

 flussoElabMifId integer:=0;
 numeroOrdinativiTrasm integer:=0;
 flussoElabMifDistOilId integer:=0;

 nomeFileMif varchar:='NO_FILE';
 codiceRisultato integer:=0;
 messaggioRisultato varchar:='OK';
 generaXml varchar(10) :='false';
 ORD_CODE_TIPO_P CONSTANT  varchar :='P';

 messaggioResult text:=null;

BEGIN

  	strMessaggioFinale:='Invio ordinativi di spesa SIOPE PLUS.';

    strMessaggio:='Popolamento tabella mif_t_ordinativo_ritrasmesso.';
    -- out mifOrdRitrasmElabId
    -- out mifOrdRitrasm
    -- out codiceRisultato
    -- out messaggioRisultato
    select *  into mifOrdRitrasmRec
    from fnc_mif_ordinativo_ritrasm(enteProprietarioId,loginOperazione,ORD_CODE_TIPO_P,ordArray);

    if mifOrdRitrasmRec.codiceRisultato!=0 then
	    messaggioRisultato:=mifOrdinativoRec.messaggioRisultato;
        codiceRisultato:=-1;
    end if;

    if codiceRisultato=0 and mifOrdRitrasmRec.mifOrdRitrasmElabId is null then
    	codiceRisultato:=-1;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||' Identificativo elaborazione ritrasmissione non valido.';
    end if;

    if codiceRisultato=0 and coalesce(mifOrdRitrasmRec.mifOrdRitrasm,0)=0 then
        messaggioRisultato:=strMessaggioFinale||strMessaggio||' Nessun ordinativo presente in mif_t_ordinativo_ritrasmesso.';
    end if;

    if codiceRisultato=0 and coalesce(mifOrdRitrasmRec.mifOrdRitrasm,0)!=0 then
     strMessaggio:='Richiamo fnc_mif_ordinativo_spesa_splus interno mifOrdRitrasmElabId='||mifOrdRitrasmRec.mifOrdRitrasmElabId||'.';
  	 select *  into mifOrdinativoRec
     from fnc_mif_ordinativo_spesa_splus
          (enteProprietarioId,
	 	   nomeEnte,
		   annobilancio,
		   loginOperazione,
		   dataElaborazione,
           mifOrdRitrasmRec.mifOrdRitrasmElabId);

     if mifOrdinativoRec.codiceRisultato=0 then
         if mifOrdinativoRec.flussoElabMifId is null or mifOrdinativoRec.flussoElabMifId=0 then
	     	codiceRisultato:=-1;
            messaggioRisultato:=strMessaggioFinale||strMessaggio||' Identificativo elaborazione trasmissione non valido.';
         else
    	 	flussoElabMifId:=mifOrdinativoRec.flussoElabMifId;
          	numeroOrdinativiTrasm:=mifOrdinativoRec.numeroOrdinativiTrasm;
		  	nomeFileMif:=mifOrdinativoRec.nomeFileMif;
            flussoElabMifDistOilId:=mifOrdinativoRec.flussoElabMifDistOilId;
         end if;
     else
     	 codiceRisultato:=-1;
         messaggioRisultato:=mifOrdinativoRec.messaggioRisultato;
     end if;
    end if;

	if codiceRisultato=0 and coalesce(numeroOrdinativiTrasm,0)!=0 then
        strMessaggio:='Lettura dati ente OIL per generaXml.';
    	select ( case when ente_oil_genera_xml=true then 'true' else 'false' end) into generaXml
        from siac_t_ente_oil
        where ente_proprietario_id=enteProprietarioId;

        if generaXml is null then
        	raise exception ' Errore in lettura.';
        end if;
    end if;

    messaggioResult   :='codiceRes='||coalesce(codiceRisultato,-1)::varchar||'|'||
						'flussoElabMifDistOilId='||coalesce(flussoElabMifDistOilId,0)::varchar||'|'||    -- 27.05.2016 Sofia - JIRA-3619
                        'flussoElabMifId='||coalesce(flussoElabMifId,0)::varchar||'|'||
                        'generaXml='||generaXml||'|'||
                        'numOrdTrasm='||coalesce(numeroOrdinativiTrasm,0)::varchar||'|'||
                        'nomeFileMif='||coalesce(nomeFileMif,'NO_FILE')||'|'||
                        'messaggioRes='||coalesce(messaggioRisultato,'');



    return messaggioResult;


exception
	when others  THEN
    	messaggioRisultato:=
        strMessaggioFinale||' '||coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 500),'')||'.' ;
	    messaggioRisultato:=upper(messaggioRisultato);
        messaggioResult:='codiceRes=-1'||'|'||
        				 'flussoElabMifDistOilId=0'||'|'||
                         'flussoElabMifId=0'||'|'||
                         'generaXml=false'||'|'||
                         'numOrdTrasm=0'||'|'||
                         'nomeFileMif=NO_FILE'||'|'||
                         'messaggioRes='||coalesce(messaggioRisultato,'');
	    return messaggioResult;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_entrata_splus
( enteProprietarioId integer,
  nomeEnte VARCHAR,
  annobilancio varchar,
  loginOperazione varchar,
  dataElaborazione timestamp,
  mifOrdRitrasmElabId integer,
  out flussoElabMifDistOilId integer,
  out flussoElabMifId integer,
  out numeroOrdinativiTrasm integer,
  out nomeFileMif varchar,
  out codiceRisultato integer,
  out messaggioRisultato varchar )
RETURNS record AS
$body$
DECLARE


 strMessaggio VARCHAR(1500):='';
 strMessaggioFinale VARCHAR(1500):='';
 strMessaggioScarto VARCHAR(1500):='';
 strExecSql VARCHAR(1500):='';

 mifOrdinativoIdRec record;

 mifFlussoOrdinativoRec  mif_t_ordinativo_entrata%rowtype;
-- ordinativoRec record;


 enteOilRec record;
 enteProprietarioRec record;
 soggettoRec record;
 isIndirizzoBenef boolean:=false;
 ordRec record;

 bilElemRec record;
 indirizzoRec record;
 ordSostRec record;
 ricevutaRec record;
 quoteOrdinativoRec record;

 flussoElabMifValore varchar (1000):=null;
 flussoElabMifValoreDesc varchar (1000):=null;




 classCdrTipoId INTEGER:=null;
 classCdcTipoId INTEGER:=null;

 codiceCge  varchar(50):=null;
 siopeDef   varchar(50):=null;
 descCge    varchar(500):=null;
 codResult   integer:=null;

 indirizzoEnte varchar(500):=null;
 localitaEnte varchar(500):=null;
 soggettoEnteId INTEGER:=null;
 soggettoRifId integer:=null;
 siopeClassTipoId integer:=null;

 ordTipoCodeId integer :=null;
 ordStatoCodeIId  integer :=null;
 ordStatoCodeAId  integer :=null;
 ordRelazCodeTipoId integer :=null;
 ordDetTsTipoId integer :=null;



 ambitoFinId integer:=null;

 isDefAnnoRedisuo  varchar(5):=null;
 isRicevutaAttivo boolean:=false;
 isGestioneFatture boolean:=false;

 codiceUECodeTipo VARCHAR(50):=null;
 codiceUECodeTipoId integer:=null;


 ordAllegatoCartAttrId integer:=null;
 ordinativoTsDetTipoId integer:=null;
 movgestTsTipoSubId integer:=null;
 ordinativoSpesaTipoId integer:=null;


 flussoElabMifLogId  integer :=null;
 flussoElabMifTipoId integer :=null;
 flussoElabMifTipoNomeFile varchar(500):=null;
 flussoElabMifTipoDec BOOLEAN:=false;

 flussoElabMifOilId integer :=null;
 flussoElabMifDistOilRetId integer:=null;
 mifOrdSpesaId integer:=null;

 NVL_STR               CONSTANT VARCHAR:='';
 dataInizioVal timestamp :=annoBilancio||'-01-01';
 dataFineVal timestamp :=annoBilancio||'-12-31';


 ordImporto numeric :=0;

 dataAvvioSiopeNew VARCHAR(50):=null;
 bAvvioSiopeNew   boolean:=false;


 -- siope plus
 tipoIncassoCode    varchar(100):=null;
 tipoIncassoCodeId  integer:=null;
 tipoRitOrdInc      varchar(100):=null;
 tipoSplitOrdInc    varchar(100):=null;
 tipoSubOrdInc      varchar(100):=null;
 tipoRitenuteInc    varchar(100):=null;
 tipoIncassoCompensazione varchar(100):=null;
 tipoIncassoRegolarizza varchar(100):=null;
 tipoIncassoCassa varchar(100):=null;
 tipoContoCCPCode varchar(100):=null;
 tipoContoCCPCodeId integer:=null;
 siopeCodeTipo varchar(50):=null;
 siopeCodeTipoId integer :=null;
 codiceFinVTbr varchar(50):=null;
 codiceFinVTipoTbrId integer:=null;

 tipoClassFruttifero varchar(100):=null;
 valFruttifero varchar(100):=null;
 valFruttiferoStr varchar(100):=null;
 valFruttiferoStrAltro varchar(100):=null;
 tipoClassFruttiferoId integer:=null;
 valFruttiferoId  integer:=null;
 eventoTipoCodeId integer:=null;
 collEventoCodeId integer:=null;
 ricorrenteCodeTipoId integer:=null;
 ricorrenteCodeTipo varchar(100):=null;

 classVincolatoCode   varchar(100):=null;
 classVincolatoCodeId INTEGER:=null;

 ordCodiceBollo  varchar(10):=null;
 ordCodiceBolloDesc varchar(500):=null;
 codiceBolloPlusDesc   varchar(100):=null;

 codiceBolloPlusEsente boolean:=false;
 isOrdCommerciale boolean:=false;

 attoAmmTipoAllRag varchar(50):=null;
 attoAmmStrTipoRag varchar(50):=null;
 -- siope plus


 ORD_TIPO_CODE_P  CONSTANT  varchar :='P';
 ORD_TIPO_CODE_I  CONSTANT  varchar :='I';
 ORD_STATO_CODE_I CONSTANT  varchar :='I';
 ORD_STATO_CODE_A CONSTANT  varchar :='A';
 ORD_TIPO_IMPORTO_A CONSTANT  varchar :='A';


 AMBITO_FIN CONSTANT  varchar :='AMBITO_FIN';
 ALLEG_CART_ATTR CONSTANT VARCHAR:='flagAllegatoCartaceo';

 CDC CONSTANT varchar:='CDC';
 CDR CONSTANT varchar:='CDR';

 FUNZIONE_CODE_I CONSTANT  varchar :='INSERIMENTO';
 FUNZIONE_CODE_S CONSTANT  varchar :='SOSTITUZIONE';
 FUNZIONE_CODE_N CONSTANT  varchar :='ANNULLO';

 -- annullamenti e variazioni dopo trasmissione
 FUNZIONE_CODE_A CONSTANT  varchar :='ANNULLO';
 FUNZIONE_CODE_VB CONSTANT  varchar :='VARIAZIONE';

 ORD_RELAZ_CODE_SOS  CONSTANT  varchar :='SOS_ORD';
 ORD_TS_DET_TIPO_A CONSTANT varchar:='A';
 MOVGEST_TS_TIPO_S  CONSTANT varchar:='S';


 REGMOVFIN_STATO_A              CONSTANT varchar:='A';
 SEGNO_ECONOMICO				CONSTANT varchar:='Avere';

 SPACE_ASCII CONSTANT integer:=32;
 VT_ASCII CONSTANT integer:=13;
 BS_ASCII CONSTANT integer:=10;

 NUM_SETTE CONSTANT integer:=7;
 ZERO_PAD CONSTANT  varchar :='0';

 ELAB_MIF_ESITO_IN CONSTANT  varchar :='IN';
 MANDMIF_TIPO  CONSTANT  varchar :='REVMIF_SPLUS';


 SEPARATORE     CONSTANT  varchar :='|';

 mifFlussoElabMifArr flussoElabMifRecType[];

 mifCountTmpRec integer :=null;
 mifCountRec integer:=1;
 mifAFlussoElabTypeRec  flussoElabMifRecType;
 flussoElabMifElabRec  flussoElabMifRecType;
 mifElabRec record;

 tipologiaTipoId integer:=null;
 categoriaTipoId integer:=null;
 famTitEntTipoCategId integer:=null;
 ordinativoSplitId integer:=null;


 numeroDocs  varchar(10):=null;
 tipoDocs    varchar(50):=null;
 tipoGruppoDocs   varchar(50):=null;
 docAnalogico varchar(50):=null;
 attrCodeDataScad varchar(50):=null;

 titoloCorrente varchar(10):=null;
 descriTitoloCorrente varchar(50):=null;
 titoloCapitale varchar(10):=null;
 descriTitoloCapitale varchar(50):=null;
 titoloCap varchar(10):=null;
 macroAggrTipoCode varchar(20):=null;
 macroAggrTipoCodeId integer:=null;

 FAM_TIT_ENT_TIPCATEG CONSTANT varchar:='Entrata - TitoliTipologieCategorie';
 CATEGORIA CONSTANT varchar:='CATEGORIA';
 TIPOLOGIA CONSTANT varchar:='TIPOLOGIA';



 FLUSSO_MIF_ELAB_TEST_COD_ABI_BT      CONSTANT integer:=1;  -- codice_ABI_BT
 FLUSSO_MIF_ELAB_TEST_COD_ENTE_IPA    CONSTANT integer:=4;  -- codice_ente
 FLUSSO_MIF_ELAB_TEST_DESC_ENTE       CONSTANT integer:=5;  -- descrizione_ente
 FLUSSO_MIF_ELAB_TEST_COD_ISTAT_ENTE  CONSTANT integer:=6;  -- codice_istat_ente
 FLUSSO_MIF_ELAB_TEST_CODFISC_ENTE    CONSTANT integer:=7;  -- codice_fiscale_ente
 FLUSSO_MIF_ELAB_TEST_CODTRAMITE_ENTE CONSTANT integer:=8;  -- codice_tramite_ente
 FLUSSO_MIF_ELAB_TEST_CODTRAMITE_BT   CONSTANT integer:=9;  -- codice_tramite_bt
 FLUSSO_MIF_ELAB_TEST_COD_ENTE_BT     CONSTANT integer:=10; -- codice_ente_bt
 FLUSSO_MIF_ELAB_TEST_RIFERIMENTO_ENTE CONSTANT integer:=11; -- riferimento_ente
 FLUSSO_MIF_ELAB_TEST_ESERCIZIO       CONSTANT integer:=12;  -- esercizio

 FLUSSO_MIF_ELAB_INIZIO_ORD     CONSTANT integer:=13;  -- tipo_operazione
 FLUSSO_MIF_ELAB_FATTURE        CONSTANT integer:=35;  -- codice_ipa_ente_siope
 FLUSSO_MIF_ELAB_FATT_CODFISC   CONSTANT integer:=40;  -- codice_fiscale_emittente_siope
 FLUSSO_MIF_ELAB_FATT_DATASCAD_PAG  CONSTANT integer:=44;  -- data_scadenza_pagam_siope
 FLUSSO_MIF_ELAB_FATT_NATURA_PAG CONSTANT integer:=46;  -- natura_spesa_siope
 FLUSSO_MIF_ELAB_NUM_SOSPESO    CONSTANT integer:=62;  -- numero_provvisorio



BEGIN

	numeroOrdinativiTrasm:=0;
    codiceRisultato:=0;
    messaggioRisultato:='';
	flussoElabMifId:=null;
    nomeFileMif:=null;

    flussoElabMifDistOilId:=null;

	strMessaggioFinale:='Invio ordinativi di entrata a SIOPE PLUS.';


    -- enteOilRec
    strMessaggio:='Lettura dati ente OIL  per flusso MIF tipo '||MANDMIF_TIPO||'.';
    select * into strict enteOilRec
    from siac_t_ente_oil ente
    where ente.ente_proprietario_id=enteProprietarioId
    and   ente.data_cancellazione is null
    and   ente.validita_fine is null;

    if enteOilRec is null then
    	raise exception ' Errore in reperimento dati';
    end if;

    if enteOilRec.ente_oil_siope_plus=false then
    	raise exception ' SIOPE PLUS non attivo per l''ente.';
    end if;

    -- inserimento record in tabella mif_t_flusso_elaborato
    strMessaggio:='Inserimento mif_t_flusso_elaborato tipo_flusso='||MANDMIF_TIPO||'.';

    insert into mif_t_flusso_elaborato
    (flusso_elab_mif_data ,
     flusso_elab_mif_esito,
     flusso_elab_mif_esito_msg,
     flusso_elab_mif_file_nome,
     flusso_elab_mif_tipo_id,
     flusso_elab_mif_id_flusso_oil, -- da calcolare su tab progressivi
     validita_inizio,
     ente_proprietario_id,
     login_operazione)
     (select dataElaborazione,
             ELAB_MIF_ESITO_IN,
             'Elaborazione in corso per tipo flusso '||MANDMIF_TIPO,
      		 tipo.flusso_elab_mif_nome_file,
     		 tipo.flusso_elab_mif_tipo_id,
     		 null,--flussoElabMifOilId, -- da calcolare su tab progressivi
    		 dataElaborazione,
     		 enteProprietarioId,
      		 loginOperazione
      from mif_d_flusso_elaborato_tipo tipo
      where tipo.ente_proprietario_id=enteProprietarioId
      and   tipo.flusso_elab_mif_tipo_code=MANDMIF_TIPO
      and   tipo.data_cancellazione is null
      and   tipo.validita_fine is null
     )
     returning flusso_elab_mif_id into flussoElabMifLogId;-- valore da restituire

      raise notice 'flussoElabMifLogId %',flussoElabMifLogId;

     if flussoElabMifLogId is null then
       RAISE EXCEPTION ' Errore generico in inserimento %.',MANDMIF_TIPO;
     end if;

    strMessaggio:='Verifica esistenza elaborazioni in corso per tipo flusso '||MANDMIF_TIPO||'.';
	codResult:=null;
    select distinct 1 into codResult
    from mif_t_flusso_elaborato elab,  mif_d_flusso_elaborato_tipo tipo
    where  elab.flusso_elab_mif_id!=flussoElabMifLogId
    and    elab.flusso_elab_mif_esito=ELAB_MIF_ESITO_IN
    and    elab.data_cancellazione is null
    and    elab.validita_fine is null
    and    tipo.flusso_elab_mif_tipo_id=elab.flusso_elab_mif_tipo_id
    and    tipo.flusso_elab_mif_tipo_code=MANDMIF_TIPO
    and    tipo.ente_proprietario_id=enteProprietarioId
    and    tipo.data_cancellazione is null
    and    tipo.validita_fine is null;

    if codResult is not null then
    	RAISE EXCEPTION ' Verificare situazioni esistenti.';
    end if;

    -- verifico se la tabella degli id contiene dati in tal caso elaborazioni precedenti sono andate male
    strMessaggio:='Verifica esistenza dati in tabella temporanea id [mif_t_ordinativo_entrata_id].';
    codResult:=null;

    select distinct 1 into codResult
    from mif_t_ordinativo_entrata_id mif
    where mif.ente_proprietario_id=enteProprietarioId;


    if codResult is not null then
      RAISE EXCEPTION ' Dati presenti verificarne il contenuto ed effettuare pulizia prima di rieseguire.';
    end if;



    codResult:=null;
    -- recupero indentificativi tipi codice vari
	begin

        -- ordTipoCodeId
        strMessaggio:='Lettura ordinativo tipo Code Id '||ORD_TIPO_CODE_I||'.';
        select ord_tipo.ord_tipo_id into strict ordTipoCodeId
        from siac_d_ordinativo_tipo ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_tipo_code=ORD_TIPO_CODE_I
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));

		-- ordinativoSpesaTipoId
        strMessaggio:='Lettura ordinativo tipo Code Id '||ORD_TIPO_CODE_P||'.';
        select ord_tipo.ord_tipo_id into strict ordinativoSpesaTipoId
        from siac_d_ordinativo_tipo ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_tipo_code=ORD_TIPO_CODE_P
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));

		-- ordStatoCodeIId
        strMessaggio:='Lettura ordinativo stato Code Id '||ORD_STATO_CODE_I||'.';
        select ord_tipo.ord_stato_id into strict ordStatoCodeIId
        from siac_d_ordinativo_stato ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_stato_code=ORD_STATO_CODE_I
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));

        -- ordStatoCodeAId
        strMessaggio:='Lettura ordinativo stato Code Id '||ORD_STATO_CODE_A||'.';
        select ord_tipo.ord_stato_id into strict ordStatoCodeAId
        from siac_d_ordinativo_stato ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_stato_code=ORD_STATO_CODE_A
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


        -- classCdrTipoId
        strMessaggio:='Lettura classif Id per tipo sac='||CDR||'.';
        select tipo.classif_tipo_id into strict classCdrTipoId
        from siac_d_class_tipo tipo
        where tipo.ente_proprietario_id=enteProprietarioId
        and   tipo.classif_tipo_code=CDR
        and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));

        -- classCdcTipoId
        strMessaggio:='Lettura classif Id per tipo sac='||CDC||'.';
        select tipo.classif_tipo_id into strict classCdrTipoId
        from siac_d_class_tipo tipo
        where tipo.ente_proprietario_id=enteProprietarioId
        and   tipo.classif_tipo_code=CDC
        and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));


		-- ordAllegatoCartAttrId
        strMessaggio:='Lettura attributo ordinativo  Code Id '||ALLEG_CART_ATTR||'.';
        select attr.attr_id into strict ordAllegatoCartAttrId
        from siac_t_attr attr
        where attr.ente_proprietario_id=enteProprietarioId
        and   attr.attr_code=ALLEG_CART_ATTR
        and   attr.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',attr.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(attr.validita_fine,dataElaborazione));

		-- ordDetTsTipoId
        strMessaggio:='Lettura tipo importo ordinativo  Code Id '||ORD_TIPO_IMPORTO_A||'.';
        select ord_tipo.ord_ts_det_tipo_id into strict ordDetTsTipoId
        from siac_d_ordinativo_ts_det_tipo ord_tipo
        where ord_tipo.ente_proprietario_id=enteProprietarioId
        and   ord_tipo.ord_ts_det_tipo_code=ORD_TIPO_IMPORTO_A
        and   ord_tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
 		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));



		-- ordinativoTsDetTipoId
        strMessaggio:='Lettura ordinativo_ts_det_tipo '||ORD_TS_DET_TIPO_A||'.';
		select ord_tipo.ord_ts_det_tipo_id into strict ordinativoTsDetTipoId
    	from siac_d_ordinativo_ts_det_tipo ord_tipo
		where ord_tipo.ente_proprietario_id=enteProprietarioId
		and   ord_tipo.ord_ts_det_tipo_code=ORD_TS_DET_TIPO_A
		and   ord_tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));

        -- movgestTsTipoSubId
        strMessaggio:='Lettura movgest_ts_tipo  '||MOVGEST_TS_TIPO_S||'.';
		select ord_tipo.movgest_ts_tipo_id into strict movgestTsTipoSubId
    	from siac_d_movgest_ts_tipo ord_tipo
		where ord_tipo.ente_proprietario_id=enteProprietarioId
		and   ord_tipo.movgest_ts_tipo_code=MOVGEST_TS_TIPO_S
		and   ord_tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));

        -- ordRelazCodeTipoId
        strMessaggio:='Lettura relazione   Code Id '||ORD_RELAZ_CODE_SOS||'.';
		select ord_tipo.relaz_tipo_id into strict ordRelazCodeTipoId
    	from siac_d_relaz_tipo ord_tipo
		where ord_tipo.ente_proprietario_id=enteProprietarioId
		and   ord_tipo.relaz_tipo_code=ORD_RELAZ_CODE_SOS
		and   ord_tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',ord_tipo.validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(ord_tipo.validita_fine,dataElaborazione));


        -- ambitoFinId
        strMessaggio:='Lettura ambito  Code Id '||AMBITO_FIN||'.';
        select a.ambito_id into strict ambitoFinId
        from siac_d_ambito a
        where a.ente_proprietario_id=enteProprietarioId
   		and   a.ambito_code=AMBITO_FIN
        and   a.data_cancellazione is null
        and   a.validita_fine is null;

		-- tipologiaTipoId
        strMessaggio:='Lettura tipologia_code_tipo_id  '||TIPOLOGIA||'.';
		select tipo.classif_tipo_id into strict tipologiaTipoId
    	from siac_d_class_tipo tipo
		where tipo.ente_proprietario_id=enteProprietarioId
		and   tipo.classif_tipo_code=TIPOLOGIA
		and   tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));

   	    -- categoriaTipoId
        strMessaggio:='Lettura categoria_code_tipo_id  '||CATEGORIA||'.';
		select tipo.classif_tipo_id into strict categoriaTipoId
    	from siac_d_class_tipo tipo
		where tipo.ente_proprietario_id=enteProprietarioId
		and   tipo.classif_tipo_code=CATEGORIA
		and   tipo.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
		and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));


		-- famTitEntTipoCategId
		-- FAM_TIT_ENT_TIPCATEG='Entrata - TitoliTipologieCategorie'
        strMessaggio:='Lettura fam_tit_ent_tipcategorie_code_tipo_id  '||FAM_TIT_ENT_TIPCATEG||'.';
		select fam.classif_fam_tree_id into strict famTitEntTipoCategId
        from siac_t_class_fam_tree fam
        where fam.ente_proprietario_id=enteProprietarioId
        and   fam.class_fam_code=FAM_TIT_ENT_TIPCATEG
        and   fam.data_cancellazione is null
		and   date_trunc('day',dataElaborazione)>=date_trunc('day',fam.validita_inizio)
  		and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(fam.validita_fine,dataElaborazione));

        -- flussoElabMifTipoId
        strMessaggio:='Lettura tipo flusso MIF  Code Id '||MANDMIF_TIPO||'.';
        select tipo.flusso_elab_mif_tipo_id, tipo.flusso_elab_mif_nome_file, tipo.flusso_elab_mif_tipo_dec
               into strict flussoElabMifTipoId,flussoElabMifTipoNomeFile,flussoElabMifTipoDec
        from mif_d_flusso_elaborato_tipo tipo
        where tipo.ente_proprietario_id=enteProprietarioId
   		and   tipo.flusso_elab_mif_tipo_code=MANDMIF_TIPO
        and   tipo.data_cancellazione is null
        and   tipo.validita_fine is null;

        -- raise notice 'flussoElabMifTipoId %',flussoElabMifTipoId;


        strMessaggio:='Lettura flusso struttura SIOPE PLUS  per tipo '||MANDMIF_TIPO||'.';
        for mifElabRec IN
        (select m.*
         from mif_d_flusso_elaborato m
         where m.flusso_elab_mif_tipo_id=flussoElabMifTipoId
         and   m.flusso_elab_mif_elab=true
         order by m.flusso_elab_mif_ordine_elab
        )
        loop
        	mifAFlussoElabTypeRec.flussoElabMifId :=mifElabRec.flusso_elab_mif_id;
            mifAFlussoElabTypeRec.flussoElabMifAttivo :=mifElabRec.flusso_elab_mif_attivo;
            mifAFlussoElabTypeRec.flussoElabMifDef :=mifElabRec.flusso_elab_mif_default;
            mifAFlussoElabTypeRec.flussoElabMifElab :=mifElabRec.flusso_elab_mif_elab;
            mifAFlussoElabTypeRec.flussoElabMifParam :=mifElabRec.flusso_elab_mif_param;

            mifAFlussoElabTypeRec.flusso_elab_mif_ordine_elab :=mifElabRec.flusso_elab_mif_ordine_elab;

            mifAFlussoElabTypeRec.flusso_elab_mif_ordine :=mifElabRec.flusso_elab_mif_ordine;

            mifAFlussoElabTypeRec.flusso_elab_mif_code :=mifElabRec.flusso_elab_mif_code;
            mifAFlussoElabTypeRec.flusso_elab_mif_campo :=mifElabRec.flusso_elab_mif_campo;

            mifFlussoElabMifArr[mifElabRec.flusso_elab_mif_ordine_elab]:=mifAFlussoElabTypeRec;

        end loop;


        -- enteProprietarioRec
        strMessaggio:='Lettura dati ente proprietario per flusso SIOPE PLUS tipo '||MANDMIF_TIPO||'.';
        select * into strict enteProprietarioRec
        from siac_t_ente_proprietario ente
        where ente.ente_proprietario_id=enteProprietarioId
        and   ente.data_cancellazione is null
        and   ente.validita_fine is null;

        -- soggettoEnteId
        strMessaggio:='Lettura indirizzo ente proprietario [siac_r_soggetto_ente_proprietario] per flusso SIOPE PLUS tipo '||MANDMIF_TIPO||'.';
        select ente.soggetto_id into soggettoEnteId
        from siac_r_soggetto_ente_proprietario ente
        where ente.ente_proprietario_id=enteProprietarioId
        and   ente.data_cancellazione is null
        and   ente.validita_fine is null;

        if soggettoEnteId is not null then
            strMessaggio:='Lettura indirizzo ente proprietario [siac_t_indirizzo_soggetto] per flusso SIOPE PLUS tipo '||MANDMIF_TIPO||'.';

        	select viaTipo.via_tipo_code||' '||indir.toponimo||' '||indir.numero_civico,
        		   com.comune_desc
                   into indirizzoEnte,localitaEnte
            from siac_t_indirizzo_soggetto indir,
                 siac_t_comune com,
                 siac_d_via_tipo viaTipo
            where indir.soggetto_id=soggettoEnteId
            and   indir.principale='S'
            and   indir.data_cancellazione is null
            and   indir.validita_fine is null
            and   com.comune_id=indir.comune_id
            and   com.data_cancellazione is null
            and   com.validita_fine is null
            and   viaTipo.via_tipo_id=indir.via_tipo_id
            and   viaTipo.data_cancellazione is null
	   		and   date_trunc('day',dataElaborazione)>=date_trunc('day',viaTipo.validita_inizio)
 			and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(viaTipo.validita_fine,dataElaborazione))
            order by indir.indirizzo_id;
        end if;


        -- calcolo progressivo "distinta" per flusso REVMIF
	    -- calcolo su progressi di flussoElabMifDistOilId flussoOIL univoco per tipo flusso
        strMessaggio:='Lettura progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_'||MANDMIF_TIPO||'_'||annoBilancio||'  per flusso SIOPE PLUS tipo '||MANDMIF_TIPO||'.';
        codResult:=null;

        select prog.prog_value into flussoElabMifDistOilRetId
          from siac_t_progressivo prog
        where prog.ente_proprietario_id=enteProprietarioId
        and   prog.prog_key='oil_'||MANDMIF_TIPO||'_'||annoBilancio
        and   prog.ambito_id=ambitoFinId
        and   prog.data_cancellazione is null
        and   prog.validita_fine is null;

        if flussoElabMifDistOilRetId is null then
			strMessaggio:='Inserimento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        	insert into siac_t_progressivo
            (prog_key,
             prog_value,
			 ambito_id,
		     validita_inizio,
			 ente_proprietario_id,
			 login_operazione
            )
            values
            ('oil_'||MANDMIF_TIPO||'_'||annoBilancio,1,ambitoFinId,now(),enteProprietarioId,loginOperazione)
            returning prog_id into codResult;

            if codResult is null then
            	RAISE EXCEPTION ' Progressivo non inserito.';
            else
            	flussoElabMifDistOilRetId:=0;
            end if;
        end if;

        if flussoElabMifDistOilRetId is not null then
	        flussoElabMifDistOilRetId:=flussoElabMifDistOilRetId+1;
        end if;


	    -- calcolo su progressi di flussoElabMifOilId flussoOIL univoco
        strMessaggio:='Lettura progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        codResult:=null;
        select prog.prog_value into flussoElabMifOilId
        from siac_t_progressivo prog
        where prog.ente_proprietario_id=enteProprietarioId
        and   prog.prog_key='oil_out_'||annoBilancio
        and   prog.ambito_id=ambitoFinId
        and   prog.data_cancellazione is null
        and   prog.validita_fine is null;

        if flussoElabMifOilId is null then
			strMessaggio:='Inserimento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
        	insert into siac_t_progressivo
            (prog_key,
             prog_value,
			 ambito_id,
		     validita_inizio,
			 ente_proprietario_id,
			 login_operazione
            )
            values
            ('oil_out_'||annoBilancio,1,ambitoFinId,now(),enteProprietarioId,loginOperazione)
            returning prog_id into codResult;

            if codResult is null then
            	RAISE EXCEPTION ' Progressivo non inserito.';
            else
            	flussoElabMifOilId:=0;
            end if;
        end if;

        if flussoElabMifOilId is not null then
	        flussoElabMifOilId:=flussoElabMifOilId+1;
        end if;

        exception
		when no_data_found then
			RAISE EXCEPTION ' Non presente in archivio';
        when TOO_MANY_ROWS THEN
            RAISE EXCEPTION ' Diverse righe presenti in archivio.';
		when others  THEN
			RAISE EXCEPTION ' %-%.',SQLSTATE,substring(upper(SQLERRM) from 1 for 500);
    end;




    --- popolamento mif_t_ordinativo_entrata_id


    -- ordinativi emessi o emessi/spostati non ancora mai trasmessi codice_funzione='I'
    strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_entrata_id].Codice funzione='||FUNZIONE_CODE_I||'.';

    insert into mif_t_ordinativo_entrata_id
    (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
     mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
     mif_ord_soggetto_id, mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
     mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_notetes_id,mif_ord_dist_id,mif_ord_desc,
     mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
     mif_ord_codbollo_id,
     mif_ord_login_creazione,mif_ord_login_modifica,
     ente_proprietario_id, login_operazione)
    (
     with
     ritrasm as
     (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	  from mif_t_ordinativo_ritrasmesso r
	  where mifOrdRitrasmElabId is not null
	  and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	  and   r.ente_proprietario_id=enteProprietarioId
	  and   r.data_cancellazione is null),
     ordinativi as
     (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_I mif_ord_codice_funzione,
             bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
             ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
             extract('year' from ord.ord_emissione_data)||'-'||
             lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
             lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,0 mif_ord_ord_anno_movg,
             0 mif_ord_soggetto_id,0 mif_ord_subord_id,elem.elem_id mif_ord_elem_id,
             0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_atto_amm_id,ord.contotes_id mif_ord_contotes_id,
             ord.notetes_id mif_ord_notetes_id,ord.dist_id mif_ord_dist_id, ord.ord_desc mif_ord_desc ,
             ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
             ord.codbollo_id mif_ord_codbollo_id,
             ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
             enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
      from siac_t_ordinativo ord,siac_r_ordinativo_stato ord_stato,siac_t_bil bil, siac_t_periodo per,siac_r_ordinativo_bil_elem elem
      where  bil.ente_proprietario_id=enteProprietarioId
        and  per.periodo_id=bil.periodo_id
        and  per.anno::integer <=annoBilancio::integer
         and  ord.bil_id=bil.bil_id
         and  ord.ord_tipo_id=ordTipoCodeId
         and  ord_stato.ord_id=ord.ord_id
         and  ord_stato.data_cancellazione is null
	   	 and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
		 and  ord_stato.validita_fine is null
         and  ord_stato.ord_stato_id=ordStatoCodeIId
         and  ord.ord_trasm_oil_data is null
         and  ord.ord_emissione_data<=dataElaborazione
         and  elem.ord_id=ord.ord_id
         and  elem.data_cancellazione is null
         and  not exists (select 1 from siac_r_ordinativo rord
                          where rord.ord_id_a=ord.ord_id
                          and   rord.data_cancellazione is null
                          and   rord.validita_fine is null
			              and   rord.relaz_tipo_id=ordRelazCodeTipoId)
      )
      select   o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
               o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
               o.mif_ord_soggetto_id, o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_notetes_id,o.mif_ord_dist_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.mif_ord_codbollo_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id, o.login_operazione
      from ordinativi o
	  where mifOrdRitrasmElabId is null
	     or (mifOrdRitrasmElabId is not null and exists
            (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
      );


      -- ordinativi emessi o emessi/spostati non ancora mai trasmessi, sostituzione di altro ordinativo codice_funzione='S'
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_entrata_id].Codice funzione='||FUNZIONE_CODE_S||'.';

      insert into mif_t_ordinativo_entrata_id
	  (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
       mif_ord_soggetto_id, mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
       mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_notetes_id,mif_ord_dist_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_codbollo_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
	  (
	   with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_S mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
               ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,
               0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_subord_id,
               elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.notetes_id mif_ord_notetes_id,ord.dist_id mif_ord_dist_id,
               ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.codbollo_id mif_ord_codbollo_id,
               ord.login_creazione mif_ord_login_creazione, ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
  	    from siac_t_ordinativo ord,siac_r_ordinativo_stato ord_stato,
             siac_t_bil bil, siac_t_periodo per,
             siac_r_ordinativo_bil_elem elem,siac_r_ordinativo rord
  	    where  bil.ente_proprietario_id=enteProprietarioId
   		  and  per.periodo_id=bil.periodo_id
    	  and  per.anno::integer <=annoBilancio::integer
    	  and  ord.bil_id=bil.bil_id
    	  and  ord.ord_tipo_id=ordTipoCodeId
    	  and  ord_stato.ord_id=ord.ord_id
    	  and  ord_stato.data_cancellazione is null
	   	  and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
          and  ord_stato.validita_fine is null
    	  and  ord_stato.ord_stato_id=ordStatoCodeIId
	      and  ord.ord_trasm_oil_data is null
    	  and  ord.ord_emissione_data<=dataElaborazione
    	  and  elem.ord_id=ord.ord_id
    	  and  elem.data_cancellazione is null
          and  elem.validita_fine is null
          and  rord.ord_id_a=ord.ord_id
          and  rord.relaz_tipo_id=ordRelazCodeTipoId
          and  rord.data_cancellazione is null
          and  rord.validita_fine is null
        )
        select o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
               o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
               o.mif_ord_soggetto_id, o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_notetes_id,o.mif_ord_dist_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.mif_ord_codbollo_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id, o.login_operazione
        from ordinativi o
	    where mifOrdRitrasmElabId is null
	     or (mifOrdRitrasmElabId is not null and exists
            (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
      );

      -- ordinativi emessi e annullati mai trasmessi codice_funzione='N'
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_entrata_id].Codice funzione='||FUNZIONE_CODE_N||'.';

	  insert into mif_t_ordinativo_entrata_id
	  (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
       mif_ord_soggetto_id, mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
       mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_notetes_id,mif_ord_dist_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_codbollo_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
	  (
	   with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_N mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
      	 	   ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,
               0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_subord_id,elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.notetes_id mif_ord_notetes_id,ord.dist_id mif_ord_dist_id,
               ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.codbollo_id mif_ord_codbollo_id,
               ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
  	    from siac_t_ordinativo ord, siac_r_ordinativo_stato ord_stato,
             siac_t_bil bil, siac_t_periodo per,
             siac_r_ordinativo_bil_elem elem
        where  bil.ente_proprietario_id=enteProprietarioId
         and  per.periodo_id=bil.periodo_id
         and  per.anno::integer <=annoBilancio::integer
         and  ord.bil_id=bil.bil_id
         and  ord.ord_tipo_id=ordTipoCodeId
         and  ord_stato.ord_id=ord.ord_id
         and  ord_stato.validita_inizio<=dataElaborazione -- questa e'' la data di annullamento
         and  ord.ord_emissione_data<=dataElaborazione
         and  ord_stato.data_cancellazione is null
         and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
   		 and  ord_stato.validita_fine is null
         and  ord_stato.ord_stato_id=ordStatoCodeAId
         and  ord.ord_trasm_oil_data is null
         and  elem.ord_id=ord.ord_id
         and  elem.data_cancellazione is null
         and  elem.validita_fine is null
        )
        select o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
               o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
               o.mif_ord_soggetto_id, o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_notetes_id,o.mif_ord_dist_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.mif_ord_codbollo_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id, o.login_operazione
        from ordinativi o
	    where mifOrdRitrasmElabId is null
	     or (mifOrdRitrasmElabId is not null and exists
            (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
	   );

      -- ordinativi emessi tramessi e poi annullati, anche dopo spostamento  codice_funzione='A'
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_entrata_id].Codice funzione='||FUNZIONE_CODE_A||'.';

      insert into mif_t_ordinativo_entrata_id
      (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
       mif_ord_soggetto_id, mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
       mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_notetes_id,mif_ord_dist_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_codbollo_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
      (
	   with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_A mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
               ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_subord_id,elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id, ord.notetes_id mif_ord_notetes_id,ord.dist_id mif_ord_dist_id,
               ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.codbollo_id mif_ord_codbollo_id,
               ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
        from siac_t_ordinativo ord,siac_r_ordinativo_stato ord_stato,
             siac_t_bil bil, siac_t_periodo per,
             siac_r_ordinativo_bil_elem elem
        where  bil.ente_proprietario_id=enteProprietarioId
         and  per.periodo_id=bil.periodo_id
         and  per.anno::integer <=annoBilancio::integer
         and  ord.bil_id=bil.bil_id
         and  ord.ord_tipo_id=ordTipoCodeId
   		 and  ord_stato.ord_id=ord.ord_id
  		 and  ord.ord_emissione_data<=dataElaborazione
         and  ord_stato.validita_inizio<=dataElaborazione  -- questa e'' la data di annullamento
  		 and  ord.ord_trasm_oil_data is not null
 		 and  ord.ord_trasm_oil_data<ord_stato.validita_inizio
         and  ord_stato.data_cancellazione is null
         and  date_trunc('day',dataElaborazione)>=date_trunc('day',ord_stato.validita_inizio)
         and  ord_stato.validita_fine is null -- SofiaData
         and  ord_stato.ord_stato_id=ordStatoCodeAId
         and  ( ord.ord_spostamento_data is null or ord.ord_spostamento_data<ord_stato.validita_inizio)
         and  elem.ord_id=ord.ord_id
         and  elem.data_cancellazione is null
         and  elem.validita_fine is null
        )
        select o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
               o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
               o.mif_ord_soggetto_id, o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_notetes_id,o.mif_ord_dist_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.mif_ord_codbollo_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id, o.login_operazione
        from ordinativi o
	    where mifOrdRitrasmElabId is null
	     or (mifOrdRitrasmElabId is not null and exists
            (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
       );

      -- ordinativi emessi , trasmessi  e poi spostati codice_funzione='VB' ( mai annullati )
      strMessaggio:='Inserimento dati in tabella temporanea id [mif_t_ordinativo_entrata_id].Codice funzione='||FUNZIONE_CODE_VB||'.';

      insert into mif_t_ordinativo_entrata_id
      (mif_ord_ord_id, mif_ord_codice_funzione, mif_ord_bil_id, mif_ord_periodo_id,mif_ord_anno_bil ,
       mif_ord_ord_anno,mif_ord_ord_numero,mif_ord_data_emissione,mif_ord_ord_anno_movg,
       mif_ord_soggetto_id, mif_ord_subord_id ,mif_ord_elem_id, mif_ord_movgest_id, mif_ord_movgest_ts_id,
       mif_ord_atto_amm_id, mif_ord_contotes_id,mif_ord_notetes_id,mif_ord_dist_id,mif_ord_desc,
       mif_ord_cast_cassa,mif_ord_cast_competenza,mif_ord_cast_emessi,
       mif_ord_codbollo_id,
       mif_ord_login_creazione,mif_ord_login_modifica,
       ente_proprietario_id, login_operazione)
      (
	   with
       ritrasm as
       (select r.mif_ord_id, r.mif_ord_ritrasm_elab_id
	    from mif_t_ordinativo_ritrasmesso r
	    where mifOrdRitrasmElabId is not null
	    and   r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId
	    and   r.ente_proprietario_id=enteProprietarioId
	    and   r.data_cancellazione is null),
       ordinativi as
       (select ord.ord_id mif_ord_ord_id, FUNZIONE_CODE_VB mif_ord_codice_funzione,
               bil.bil_id mif_ord_bil_id,per.periodo_id mif_ord_periodo_id,per.anno::integer mif_ord_anno_bil,
               ord.ord_anno mif_ord_ord_anno,ord.ord_numero mif_ord_ord_numero,
               extract('year' from ord.ord_emissione_data)||'-'||
               lpad(extract('month' from ord.ord_emissione_data)::varchar,2,'0')||'-'||
               lpad(extract('day' from ord.ord_emissione_data)::varchar,2,'0') mif_ord_data_emissione,0 mif_ord_ord_anno_movg,
               0 mif_ord_soggetto_id,0 mif_ord_subord_id,elem.elem_id mif_ord_elem_id,
               0 mif_ord_movgest_id,0 mif_ord_movgest_ts_id,0 mif_ord_atto_amm_id,
               ord.contotes_id mif_ord_contotes_id,ord.notetes_id mif_ord_notetes_id,ord.dist_id mif_ord_dist_id,
               ord.ord_desc mif_ord_desc,
               ord.ord_cast_cassa mif_ord_cast_cassa,ord.ord_cast_competenza mif_ord_cast_competenza,ord.ord_cast_emessi mif_ord_cast_emessi,
               ord.codbollo_id mif_ord_codbollo_id,
               ord.login_creazione mif_ord_login_creazione,ord.login_modifica mif_ord_login_modifica,
               enteProprietarioId ente_proprietario_id,loginOperazione login_operazione
        from siac_t_ordinativo ord,siac_t_bil bil, siac_t_periodo per, siac_r_ordinativo_bil_elem elem
        where  bil.ente_proprietario_id=enteProprietarioId
         and  per.periodo_id=bil.periodo_id
         and  per.anno::integer <=annoBilancio::integer
         and  ord.bil_id=bil.bil_id
         and  ord.ord_tipo_id=ordTipoCodeId
         and  ord.ord_emissione_data<=dataElaborazione
         and  ord.ord_trasm_oil_data is not null
         and  ord.ord_spostamento_data is not null
         and  ord.ord_trasm_oil_data<ord.ord_spostamento_data
         and  ord.ord_spostamento_data<=dataElaborazione
         and  not exists (select 1 from siac_r_ordinativo_stato ord_stato
  				          where  ord_stato.ord_id=ord.ord_id
					        and  ord_stato.ord_stato_id=ordStatoCodeAId
                            and  ord_stato.data_cancellazione is null)
         and  elem.ord_id=ord.ord_id
         and  elem.data_cancellazione is null
         and  elem.validita_fine is null
        )
		select o.mif_ord_ord_id, o.mif_ord_codice_funzione, o.mif_ord_bil_id, o.mif_ord_periodo_id,o.mif_ord_anno_bil,
               o.mif_ord_ord_anno,o.mif_ord_ord_numero,o.mif_ord_data_emissione,o.mif_ord_ord_anno_movg,
               o.mif_ord_soggetto_id, o.mif_ord_subord_id ,o.mif_ord_elem_id, o.mif_ord_movgest_id, o.mif_ord_movgest_ts_id,
               o.mif_ord_atto_amm_id, o.mif_ord_contotes_id,o.mif_ord_notetes_id,o.mif_ord_dist_id,o.mif_ord_desc,
               o.mif_ord_cast_cassa,o.mif_ord_cast_competenza,o.mif_ord_cast_emessi,
               o.mif_ord_codbollo_id,
               o.mif_ord_login_creazione,o.mif_ord_login_modifica,
               o.ente_proprietario_id, o.login_operazione
        from ordinativi o
	    where mifOrdRitrasmElabId is null
	     or (mifOrdRitrasmElabId is not null and exists
            (select 1 from ritrasm r where r.mif_ord_ritrasm_elab_id=mifOrdRitrasmElabId and r.mif_ord_id=o.mif_ord_ord_id))
       );

      -- aggiornamento mif_t_ordinativo_entrata_id per id


      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per soggetto_id.';
      -- soggetto_id
      update mif_t_ordinativo_entrata_id m
      set mif_ord_soggetto_id = (select s.soggetto_id from siac_r_ordinativo_soggetto s
                                 where s.ord_id=m.mif_ord_ord_id
                                   and s.data_cancellazione is null
                                   and s.validita_fine is null);

      strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per subord_id.';

      -- subord_id
      update mif_t_ordinativo_entrata_id m
      set mif_ord_subord_id =
                             (select s.ord_ts_id from siac_t_ordinativo_ts s
                               where s.ord_id=m.mif_ord_ord_id
                                 and s.data_cancellazione is null
                                 and s.validita_fine is null
                               order by s.ord_ts_id
                               limit 1);



     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per movgest_ts_id.';

     -- movgest_ts_id
     update mif_t_ordinativo_entrata_id m
     set mif_ord_movgest_ts_id = (select ts.movgest_ts_id from siac_t_ordinativo_ts s, siac_r_ordinativo_ts_movgest_ts ts
	                              where s.ord_id=m.mif_ord_ord_id
                                  and   ts.ord_ts_id=s.ord_ts_id
                                  and   s.data_cancellazione is null
                                  and   s.validita_fine is null
                                  and   ts.data_cancellazione is null
                                  and   ts.validita_fine is null
                                  order by s.ord_ts_id
                                  limit 1);


     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per movgest_id.';

     -- movgest_id
     update mif_t_ordinativo_entrata_id m
     set mif_ord_movgest_id = (select s.movgest_id from siac_t_movgest_ts s
                               where  s.movgest_ts_id = m.mif_ord_movgest_ts_id
                               and s.data_cancellazione is null
                               and s.validita_fine is null);


     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per movgest_id.';

     -- movgest_anno
     update mif_t_ordinativo_entrata_id m
     set mif_ord_ord_anno_movg = (select s.movgest_anno from siac_t_movgest s
                              	  where  s.movgest_id = m.mif_ord_movgest_id
                             	  and s.data_cancellazione is null
                                  and s.validita_fine is null);


     strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per attoamm_id.';

    -- attoamm_id
    update mif_t_ordinativo_entrata_id m
    set mif_ord_atto_amm_id = (select s.attoamm_id from siac_r_ordinativo_atto_amm s
                                where s.ord_id = m.mif_ord_ord_id
                                  and s.data_cancellazione is null
                                  and s.validita_fine is null);


    strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per attoamm_id movgest_ts.';
	-- attoamm_movgest_ts_id
    update mif_t_ordinativo_entrata_id m
    set mif_ord_atto_amm_movg_id = (select s.attoamm_id from siac_r_movgest_ts_atto_amm s
                                    where s.movgest_ts_id = m.mif_ord_movgest_ts_id
                                    and s.data_cancellazione is null
                                    and s.validita_fine is null);


	-- mif_ord_tipologia_id
    -- mif_ord_tipologia_code
    -- mif_ord_tipologia_desc
	strMessaggio:='Aggiornamento dati in tabella temporanea id [mif_t_ordinativo_entrata_id] per mif_ord_tipologia_id mif_ord_tipologia_code mif_ord_tipologia_desc.';
	update mif_t_ordinativo_entrata_id m
    set (mif_ord_tipologia_id, mif_ord_tipologia_code,mif_ord_tipologia_desc) = (cp.classif_id,cp.classif_code,cp.classif_desc)
    from  siac_r_bil_elem_class classElem, siac_t_class cf, siac_r_class_fam_tree r, siac_t_class cp
	where classElem.elem_id= m.mif_ord_elem_id
	and   cf.classif_id=classElem.classif_id
	and   cf.data_cancellazione is null
	and   cf.classif_tipo_id= categoriaTipoid -- categoria
	and   r.classif_id=cf.classif_id
	and   r.classif_id_padre is not null
	and   r.classif_fam_tree_id=famTitEntTipoCategId -- famiglia
	and   r.data_cancellazione is null
	and   r.validita_fine is null
	and   classElem.data_cancellazione is null
	and   classElem.validita_fine is null
	and   cp.classif_id=r.classif_id_padre
	and   cp.data_cancellazione is null
	and   cp.classif_tipo_id=tipologiaTipoid; --tipologia

    strMessaggio:='Verifica esistenza ordinativi di entrata da trasmettere.';
    codResult:=null;

    select 1 into codResult
    from mif_t_ordinativo_entrata_id where ente_proprietario_id=enteProprietarioId;

    if codResult is null then
      codResult:=-12;
      RAISE EXCEPTION ' Nessun ordinativo di entrata da trasmettere.';
    end if;




   -- <sospesi>
   -- <sospeso>
   -- <numero_provvisorio>
   -- <importo_provvisorio>
   flussoElabMifElabRec:=null;
   flussoElabMifElabRec:=mifFlussoElabMifArr[FLUSSO_MIF_ELAB_NUM_SOSPESO];

   strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
   if flussoElabMifElabRec.flussoElabMifId is null then
  	  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
   end if;
   raise notice 'numero_provvisorio FLUSSO_MIF_ELAB_NUM_SOSPESO=% strMessaggio=%',FLUSSO_MIF_ELAB_NUM_SOSPESO,strMessaggio;

   if flussoElabMifElabRec.flussoElabMifAttivo=true then
    	if flussoElabMifElabRec.flussoElabMifElab=true then
			isRicevutaAttivo:=true;
        else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
   		end if;
   end if;


   flussoElabMifElabRec:=null;
   mifCountRec:=FLUSSO_MIF_ELAB_FATTURE;
   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
   strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
   if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
   end if;
   if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
 		    numeroDocs:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            tipoDocs  :=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
            tipoGruppoDocs  :=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
            if numeroDocs is not null and numeroDocs!='' and
               tipoDocs is not null and tipoDocs!='' and
               tipoGruppoDocs is not null and tipoGruppoDocs!='' then
                tipoDocs:=tipoDocs||'|'||tipoGruppoDocs;
            	isGestioneFatture:=true;
            end if;
		end if;
    else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
    end if;
   end if;

   if isGestioneFatture=true then

    flussoElabMifElabRec:=null;
    mifCountRec:=FLUSSO_MIF_ELAB_FATT_CODFISC;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	 if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
 		    docAnalogico:=flussoElabMifElabRec.flussoElabMifParam;
		end if;
     else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     end if;
    end if;

   end if;

   if isGestioneFatture=true then
    flussoElabMifElabRec:=null;
    mifCountRec:=FLUSSO_MIF_ELAB_FATT_DATASCAD_PAG;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	 if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
            attrCodeDataScad:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
		end if;
     else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     end if;
    end if;

   end if;

   if isGestioneFatture=true then

    flussoElabMifElabRec:=null;
    mifCountRec:=FLUSSO_MIF_ELAB_FATT_NATURA_PAG;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'.';
    if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    end if;
    if flussoElabMifElabRec.flussoElabMifAttivo=true then
   	 if flussoElabMifElabRec.flussoElabMifElab=true then
    	if flussoElabMifElabRec.flussoElabMifParam is not null  then
            titoloCorrente:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            descriTitoloCorrente:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
            titoloCapitale:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
            descriTitoloCapitale:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
            macroAggrTipoCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,5));
            if macroAggrTipoCode is not null then
            	strMessaggio:='Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                 ||' mifCountRec='||mifCountRec
                 ||' tipo flusso '||MANDMIF_TIPO||'. Lettura identificato classificatore tipo='||macroAggrTipoCode||'.';
            	select tipo.classif_tipo_id into macroAggrTipoCodeId
                from siac_d_class_tipo tipo
                where tipo.ente_proprietario_id=enteProprietarioId
                and   tipo.classif_tipo_code=macroAggrTipoCode
                and   tipo.data_cancellazione is null
                and   tipo.validita_fine is null;

            end if;

		end if;
     else
    	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
     end if;
    end if;

   end if;

    --- lettura mif_t_ordinativo_entrata_id per popolamento mif_t_ordinativo_entrata
    codResult:=null;
    strMessaggio:='Lettura ordinativi di entrata da migrare [mif_t_ordinativo_entrata_id].Inizio ciclo.';
    for mifOrdinativoIdRec IN
    (select ms.*
     from mif_t_ordinativo_entrata_id ms
     where ms.ente_proprietario_id=enteProprietarioId
     order by ms.mif_ord_anno_bil,
              ms.mif_ord_ord_numero
    )
    loop

--		raise notice 'Inizio ciclo numero_ord=%',mifOrdinativoIdRec.mif_ord_ord_numero;
		mifFlussoOrdinativoRec:=null;
		bilElemRec:=null;
        soggettoRec:=null;

        soggettoRifId:=null;

		indirizzoRec:=null;
        mifOrdSpesaId:=null;
	    mifCountRec:=1;
		isIndirizzoBenef:=true;
        bAvvioSiopeNew:=false;

        -- lettura importo ordinativo
		strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura importo ordinativo di entrata per tipo flusso '||MANDMIF_TIPO||'.';

        mifFlussoOrdinativoRec.mif_ord_importo:=fnc_mif_importo_ordinativo(mifOrdinativoIdRec.mif_ord_ord_id,ordDetTsTipoId,
        										flussoElabMifTipoDec);
        if flussoElabMifTipoDec=true and
           coalesce(position('.' in mifFlussoOrdinativoRec.mif_ord_importo),0)=0 then
           mifFlussoOrdinativoRec.mif_ord_importo:=mifFlussoOrdinativoRec.mif_ord_importo||'.00';
        end if;

        -- lettura dati soggetto ordinativo
        soggettoRifId:=mifOrdinativoIdRec.mif_ord_soggetto_id;
        select * into soggettoRec
   	    from siac_t_soggetto sogg
       	where sogg.soggetto_id=soggettoRifId;

        if soggettoRec is null then
        	RAISE EXCEPTION ' Errore in lettura siac_t_soggetto [soggetto_id= %].',soggettoRifId;
        end if;


        -- lettura elemento bilancio  ordinativo
 		strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura elemento bilancio ordinativo di entrata per tipo flusso '||MANDMIF_TIPO||'.';

		select * into bilElemRec
        from siac_t_bil_elem elem
        where elem.elem_id=mifOrdinativoIdRec.mif_ord_elem_id;
        if bilElemRec is null then
        	RAISE EXCEPTION ' Errore in lettura siac_t_bil_elem.';
        end if;

        -- dati testata flusso presenti come tag solo in testata
        -- valorizzati su ogni ordinativo trasmesso
        -- <testata_flusso>
		-- <codice_ABI_BT>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ABI_BT;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_abi is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_abi_bt:=enteOilRec.ente_oil_abi;
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_abi_bt:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <codice_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ENTE_IPA;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_ipa is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_ipa:=trim(both ' ' from enteOilRec.ente_oil_codice_ipa);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_ipa:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <descrizione_ente>
	    flussoElabMifElabRec:=null;
		mifCountRec:=FLUSSO_MIF_ELAB_TEST_DESC_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteProprietarioRec.ente_denominazione is not null then
            	mifFlussoOrdinativoRec.mif_ord_desc_ente:=enteProprietarioRec.ente_denominazione;
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
               	mifFlussoOrdinativoRec.mif_ord_desc_ente:=substring(flussoElabMifElabRec.flussoElabMifDef from 1 for 30);
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

	    -- <codice_istat_ente>
	    flussoElabMifElabRec:=null;
		mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ISTAT_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_istat is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_istat:=enteOilRec.ente_oil_codice_istat;
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
               	mifFlussoOrdinativoRec.mif_ord_codice_ente_istat:=substring(flussoElabMifElabRec.flussoElabMifDef from 1 for 30);
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <codice_fiscale_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_CODFISC_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteProprietarioRec.codice_fiscale is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente:=trim(both ' ' from enteProprietarioRec.codice_fiscale);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <codice_tramite_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_CODTRAMITE_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_tramite is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite:=trim(both ' ' from enteOilRec.ente_oil_codice_tramite);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <codice_tramite_BT>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_CODTRAMITE_BT;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice_tramite_bt is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite_bt:=trim(both ' ' from enteOilRec.ente_oil_codice_tramite_bt);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite_bt:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <codice_ente_BT>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_COD_ENTE_BT;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_codice is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_bt:=trim(both ' ' from enteOilRec.ente_oil_codice);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_codice_ente_bt:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <riferimento_ente>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_RIFERIMENTO_ENTE;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if enteOilRec.ente_oil_riferimento is not null then
            	mifFlussoOrdinativoRec.mif_ord_riferimento_ente:=trim(both ' ' from enteOilRec.ente_oil_riferimento);
            elsif flussoElabMifElabRec.flussoElabMifDef is not null then
            	mifFlussoOrdinativoRec.mif_ord_riferimento_ente:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
        -- </testata_flusso>

        -- <testata_esercizio>
        -- <esercizio>
        flussoElabMifElabRec:=null;
        mifCountRec:=FLUSSO_MIF_ELAB_TEST_ESERCIZIO;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            mifFlussoOrdinativoRec.mif_ord_anno_esercizio:=mifOrdinativoIdRec.mif_ord_anno_bil;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
        -- </testata_esercizio>

		-- <reversale>
        mifCountRec :=FLUSSO_MIF_ELAB_INIZIO_ORD;

	    -- <tipo_operazione>
        flussoElabMifElabRec:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        raise notice 'tipo_operazione strMessaggio=%',strMessaggio;
        if  flussoElabMifElabRec.flussoElabMifAttivo=true then
         if   flussoElabMifElabRec.flussoElabMifElab=true then
            if flussoElabMifElabRec.flussoElabMifParam is not null then
	            flussoElabMifValore:=fnc_mif_ordinativo_carico_bollo( mifOrdinativoIdRec.mif_ord_codice_funzione,flussoElabMifElabRec.flussoElabMifParam);
            else
            	flussoElabMifValore:=mifOrdinativoIdRec.mif_ord_codice_funzione;
            end if;

            if flussoElabMifValore is not null then
				mifFlussoOrdinativoRec.mif_ord_codice_funzione:=flussoElabMifValore;
            end if;

         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <numero_reversale>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if flussoElabMifTipoDec=false then
				mifFlussoOrdinativoRec.mif_ord_numero:=lpad(mifOrdinativoIdRec.mif_ord_ord_numero,NUM_SETTE,ZERO_PAD);
            else
	            mifFlussoOrdinativoRec.mif_ord_numero:=mifOrdinativoIdRec.mif_ord_ord_numero;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo non elaborabile.';
         end if;
        end if;


        -- <data_reversale>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true  then
         if  flussoElabMifElabRec.flussoElabMifElab=true then
			mifFlussoOrdinativoRec.mif_ord_data:=mifOrdinativoIdRec.mif_ord_data_emissione;
         else
            RAISE EXCEPTION ' Configurazione tag/campo non  elaborabile.';
         end if;
        end if;

		-- <importo_reversale>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
			-- calcolato inizio ciclo
            null;
         else
         	mifFlussoOrdinativoRec.mif_ord_importo:='0';
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <conto_evidenza>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            if mifOrdinativoIdRec.mif_ord_contotes_id is not null then
                 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
					   ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura conto tesoreria.';

            	select d.contotes_code into flussoElabMifValore
                from siac_d_contotesoreria d
                where d.contotes_id=mifOrdinativoIdRec.mif_ord_contotes_id;
                if flussoElabMifValore is null then
                	RAISE EXCEPTION ' Dato non presente in archivio.';
                end if;
            end if;

			if flussoElabMifValore is not null then
             mifFlussoOrdinativoRec.mif_ord_destinazione:=flussoElabMifValore;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <bilancio>
        -- <codifica_bilancio>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;
        raise notice 'codifica_bilancio strMessaggio=%',strMessaggio;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then

         		mifFlussoOrdinativoRec.mif_ord_codifica_bilancio:=
                    substring(mifOrdinativoIdRec.mif_ord_tipologia_code from 1 for 5) ;
            	mifFlussoOrdinativoRec.mif_ord_capitolo:=bilElemRec.elem_code;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


	    -- <descrizione_codifica>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            	mifFlussoOrdinativoRec.mif_ord_desc_codifica:=substring( bilElemRec.elem_desc from 1 for 30);
                mifFlussoOrdinativoRec.mif_ord_desc_codifica_bil:=substring( mifOrdinativoIdRec.mif_ord_tipologia_desc from 1 for 30);
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <gestione>
        flussoElabMifElabRec:=null;
        flussoElabMifValore:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         	if flussoElabMifElabRec.flussoElabMifDef is not null then
            	if mifOrdinativoIdRec.mif_ord_anno_bil=mifOrdinativoIdRec.mif_ord_ord_anno_movg then
	            	flussoElabMifValore:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
                else
	                flussoElabMifValore:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,2));
                end if;
            	mifFlussoOrdinativoRec.mif_ord_gestione:=flussoElabMifValore;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <anno_residuo>
        flussoElabMifElabRec:=null;
        flussoElabMifValore:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
		  if mifOrdinativoIdRec.mif_ord_anno_bil!=mifOrdinativoIdRec.mif_ord_ord_anno_movg  then
       	 	mifFlussoOrdinativoRec.mif_ord_anno_res:=mifOrdinativoIdRec.mif_ord_ord_anno_movg;
          end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

		-- <numero_articolo>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            	mifFlussoOrdinativoRec.mif_ord_articolo:=bilElemRec.elem_code2;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


        -- <voce_economica>
        mifCountRec:=mifCountRec+1;

        -- <importo_bilancio>
        flussoElabMifElabRec:=null;
        flussoElabMifValore:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
           	mifFlussoOrdinativoRec.mif_ord_importo_bil:=mifFlussoOrdinativoRec.mif_ord_importo;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
        -- </bilancio>

	    -- <informazioni_versante>

        -- <progressivo_versante>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        raise notice 'progressivo_versante strMessaggio=%',strMessaggio;

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
           	if flussoElabMifElabRec.flussoElabMifDef is not null then
                	mifFlussoOrdinativoRec.mif_ord_progr_vers:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <importo_versante>
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
  	 	 RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	 if flussoElabMifElabRec.flussoElabMifElab=true then
     		mifFlussoOrdinativoRec.mif_ord_vers_importo:=mifFlussoOrdinativoRec.mif_ord_importo;
	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
        end if;

	    -- <tipo_riscossione>
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=null;
	    flussoElabMifValore:=null;
        flussoElabMifValoreDesc:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
           RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
            if coalesce(flussoElabMifElabRec.flussoElabMifParam,NVL_STR)!=NVL_STR and
               coalesce(flussoElabMifElabRec.flussoElabMifDef,NVL_STR)!=NVL_STR then
              if  tipoIncassoCode is null then
            	tipoIncassoCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
              end if;
              if tipoRitOrdInc is null then
	              tipoRitOrdInc:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
              end if;
              if tipoSplitOrdInc is null then
	              tipoSplitOrdInc:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
              end if;
              if tipoSubOrdInc is null then
	              tipoSubOrdInc:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
              end if;

              if tipoRitenuteInc is null then
              	tipoRitenuteInc:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,5))||','||
                                 trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,6))||','||
                                 trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,7));
              end if;

			  if tipoIncassoCompensazione is null then
              	tipoIncassoCompensazione:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
              end if;
   			  if tipoIncassoRegolarizza is null then
              	tipoIncassoRegolarizza:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,2));
              end if;

   			  if tipoIncassoCassa is null then
              	tipoIncassoCassa:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,3));
              end if;

              if tipoIncassoCode is not null and tipoIncassoCodeId is null then
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura classif_tipo_id per classicatore '||tipoIncassoCode||'.';
              	select tipo.classif_tipo_id into tipoIncassoCodeId
                from siac_d_class_tipo tipo
                where tipo.ente_proprietario_id=enteProprietarioId
                and   tipo.classif_tipo_code=tipoIncassoCode
                and   tipo.data_cancellazione is null
                and   tipo.validita_fine is null;

              end if;

              if tipoIncassoCodeId is not null then
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura tipoIncasso '||tipoIncassoCode||' per ordinativo.';

                flussoElabMifValore:=fnc_mif_tipo_incasso_splus
                                     ( mifOrdinativoIdRec.mif_ord_ord_id,
  									   mifFlussoOrdinativoRec.mif_ord_importo::NUMERIC,
                                       tipoRitOrdInc,
                                       tipoSplitOrdInc,
                                       tipoSubOrdInc,
                                       tipoRitenuteInc,
 									   tipoIncassoCodeId,
                                       tipoIncassoCompensazione,
                                       tipoIncassoRegolarizza,
                                       tipoIncassoCassa,
                                       dataElaborazione,
                                       dataFineVal,
                                       enteProprietarioId
                                     );
              end if;

		     if flussoElabMifValore is not null then
	           mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos:=flussoElabMifValore;
             end if;
           end if;
          else
          	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
        end if;

	    -- <numero_ccp>
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=null;
	    flussoElabMifValore:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
           RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	if flussoElabMifElabRec.flussoElabMifParam is not null and
               mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos is not null then
               if mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos=
                  trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1)) then
                  if tipoContoCCPCode is null then
                  	tipoContoCCPCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                  end if;
                  if tipoContoCCPCodeId is null then
                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura identificativo classificatore tipo='||tipoContoCCPCode||'.';
                  	select tipo.classif_tipo_id into tipoContoCCPCodeId
                    from siac_d_class_tipo tipo
                    where tipo.ente_proprietario_id=enteProprietarioId
                    and   tipo.classif_tipo_code=tipoContoCCPCode
                    and   tipo.data_cancellazione is null;
                  end if;

                  if tipoContoCCPCodeId is not null then
                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore classificatore tipo='||tipoContoCCPCode||'.';
                  	select c.classif_code into flussoElabMifValore
                    from siac_r_ordinativo_class r, siac_t_class c
                    where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and   c.classif_id=r.classif_id
                    and   c.classif_tipo_id=tipoContoCCPCodeId
                    and   r.data_cancellazione is null
                    and   r.validita_fine is null
                    and   c.data_cancellazione is null;
                  end if;
               end if;
               if flussoElabMifValore is not null then
               	mifFlussoOrdinativoRec.mif_ord_vers_cc_postale:=flussoElabMifValore;
               end if;
            end if;
           else
          	RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
        end if;

		-- <tipo_entrata>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifValore:=null;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
			if coalesce(flussoElabMifElabRec.flussoElabMifDef,NVL_STR)!=NVL_STR then
              if coalesce(flussoElabMifElabRec.flussoElabMifParam,NVL_STR)!=NVL_STR then
                   if tipoClassFruttifero is null then
                    	tipoClassFruttifero:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                   end if;

                   if tipoClassFruttifero is not null and valFruttifero is null then
	                   valFruttifero:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                       valFruttiferoStr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
                       valFruttiferoStrAltro:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
                   end if;


                   if tipoClassFruttifero is not null and
                      valFruttifero is not null and
                      valFruttiferoStr is not null and
                      valFruttiferoStrAltro is not null and
                      tipoClassFruttiferoId is null then

                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura classifTipoCodeId '||tipoClassFruttifero||'.';
                   	select tipo.classif_tipo_id into tipoClassFruttiferoId
                    from siac_d_class_tipo tipo
                    where tipo.ente_proprietario_id=enteProprietarioId
                    and   tipo.classif_tipo_code=tipoClassFruttifero
                    and   tipo.data_cancellazione is null
                    and   tipo.validita_fine is null;

                   end if;
                   if tipoClassFruttiferoId is not null and
                      valFruttifero is not null and
                      valFruttiferoStr is not null and
                      valFruttiferoStrAltro is not null and
                      valFruttiferoId is null then
                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura classidId '||tipoClassFruttifero||' [siac_r_ordinativo_class].';


                   	select c.classif_code into flussoElabMifValore
                    from siac_r_ordinativo_class r, siac_t_class c
                    where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
	                and   c.classif_id=r.classif_id
                    and   c.classif_tipo_id=tipoClassFruttiferoId
                    and   r.data_cancellazione is null
                    and   r.validita_fine is null
                    and   c.data_cancellazione is null
                    order by r.ord_classif_id limit 1;

                    if flussoElabMifValore is not null then
                    	if flussoElabMifValore=valFruttifero THEN
                        	flussoElabMifValore=valFruttiferoStr;
                        else
                          flussoElabMifValore=valFruttiferoStrAltro;
                        end if;
                    end if;
                   end if;
				 end if; -- param


	             if flussoElabMifValore is null and
     	            mifOrdinativoIdRec.mif_ord_contotes_id is not null and
        	        mifOrdinativoIdRec.mif_ord_contotes_id!=0 then

    	            strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
        	               ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
            	           ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                	       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
	                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
    	                   ||' mifCountRec='||mifCountRec
        	               ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per conto corrente tesoreria [mif_r_conto_tesoreria_fruttifero].';

                    select mif.fruttifero into flussoElabMifValore
    	            from mif_r_conto_tesoreria_fruttifero mif
	                where mif.ente_proprietario_id=enteProprietarioId
    	            and   mif.contotes_id=mifOrdinativoIdRec.mif_ord_contotes_id
	                and   mif.validita_fine is null
    	            and   mif.data_cancellazione is null;


	             end if;


                 if flussoElabMifValore is null then
                   	flussoElabMifValore:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
                 end if;

                 mifFlussoOrdinativoRec.mif_ord_bci_tipo_entrata:=flussoElabMifValore;
            end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;


		-- <destinazione>
        flussoElabMifElabRec:=null;
        flussoElabMifValore:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
		   if flussoElabMifElabRec.flussoElabMifParam is not null then

           	if classVincolatoCode is null then
            	classVincolatoCode:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            end if;

            if classVincolatoCodeId is null and classVincolatoCode is not null then
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura identificativo classVincolatoCode='||classVincolatoCode||'.';

                select tipo.classif_tipo_id into strict classVincolatoCodeId
    		    from siac_d_class_tipo tipo
		        where tipo.ente_proprietario_id=enteProprietarioId
        		and   tipo.classif_tipo_code=classVincolatoCode
		        and   tipo.data_cancellazione is null
                and   tipo.validita_fine is null;
            end if;

            if classVincolatoCodeId is not null then
	            strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura valore classVincolatoCode='||classVincolatoCode||'.';


                 select c.classif_desc into flussoElabMifValore
                 from siac_r_ordinativo_class r, siac_t_class c
                 where r.ord_id=  mifOrdinativoIdRec.mif_ord_ord_id
                 and   c.classif_id=r.classif_id
                 and   c.classif_tipo_id=classVincolatoCodeId
                 and   r.data_cancellazione is null
                 and   r.validita_fine is null
                 and   c.data_cancellazione is null;
            end if;
           end if;

		   if flussoElabMifValore is null and
    	 	  mifOrdinativoIdRec.mif_ord_contotes_id is not null and
        	  mifOrdinativoIdRec.mif_ord_contotes_id!=0 then

		      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
    		                   ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
        		               ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
            		           ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                		       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                    		   ||' mifCountRec='||mifCountRec
	                    	   ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore per conto corrente tesoreria [mif_r_conto_tesoreria_vincolato].';

			  select mif.vincolato into flussoElabMifValore
    	      from mif_r_conto_tesoreria_vincolato mif
	    	  where mif.ente_proprietario_id=enteProprietarioId
    	      and   mif.contotes_id=mifOrdinativoIdRec.mif_ord_contotes_id
	          and   mif.validita_fine is null
		      and   mif.data_cancellazione is null;
	       end if;

		   if flussoElabMifValore is null and
           	flussoElabMifElabRec.flussoElabMifDef is not null then
            flussoElabMifValore:=flussoElabMifElabRec.flussoElabMifDef;
           end if;

           if flussoElabMifValore is not null then
           	mifFlussoOrdinativoRec.mif_ord_vers_cod_riscos:=flussoElabMifValore;
           end if;

         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

        -- <classificazione>
        -- <codice_cge>
        flussoElabMifElabRec:=null;
        flussoElabMifValore:=null;
        flussoElabMifValoreDesc:=null;
        codiceCge:=null;
        descCge:=null;
        mifCountRec:=mifCountRec+1;
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;
        raise notice 'codice_cge strMessaggio=%',strMessaggio;

        if flussoElabMifElabRec.flussoElabMifAttivo=true  then
         if flussoElabMifElabRec.flussoElabMifElab=true  then
         		if flussoElabMifElabRec.flussoElabMifParam is not null  then
                	if siopeCodeTipo is null and flussoElabMifElabRec.flussoElabMifParam is not null then
                        siopeCodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                    end if;
					if siopeDef is null and flussoElabMifElabRec.flussoElabMifParam is not null then
                        siopeDef:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
                    end if;

                    if coalesce(dataAvvioSiopeNew,NVL_STR)=NVL_STR and
	                  flussoElabMifElabRec.flussoElabMifParam is not null then
    	                	dataAvvioSiopeNew:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,3));
        	        end if;

            	    if coalesce(dataAvvioSiopeNew,NVL_STR)!=NVL_STR and codiceFinVTbr is null then
                	  	codiceFinVTbr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,4));
	                end if;

            	    if coalesce(dataAvvioSiopeNew,NVL_STR)!=NVL_STR then
                	  	if dataAvvioSiopeNew::timestamp<=date_trunc('DAY',mifOrdinativoIdRec.mif_ord_data_emissione::timestamp) -- data emissione ordinativo
                    	then
    	                	bAvvioSiopeNew:=true;
	                    end if;
    	            end if;

                    if  bAvvioSiopeNew=true then
                     -- lettura da PDC_V
                  	 if codiceFinVTbr is not null and codiceFinVTipoTbrId is null then --1
						-- codiceFinVTipoTbrId
                        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                     		  ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                     		  ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                    		  ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
		                      ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
		                      ||' mifCountRec='||mifCountRec
	                          ||' tipo flusso '||MANDMIF_TIPO||'.Lettura id class tipo='||codiceFinVTbr||'.';
			   		    select tipo.classif_tipo_id into strict codiceFinVTipoTbrId
				    	from siac_d_class_tipo tipo
						where tipo.ente_proprietario_id=enteProprietarioId
						and   tipo.classif_tipo_code=codiceFinVTbr
						and   tipo.data_cancellazione is null
						and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
						and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));
                     end if; --1

                     if codiceFinVTipoTbrId is not null then --2
      		 		  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura piano_conti_fin_V_code '||codiceFinVTbr||' [siac_r_ordinativo_class] .';
		    		  select replace(substring(class.classif_code,2),'.','') , class.classif_desc
                       into flussoElabMifValore,flussoElabMifValoreDesc
			  		  from siac_r_ordinativo_class r, siac_t_class class
	       		      where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
	      		      and   class.classif_id=r.classif_id
 		              and   class.classif_tipo_id=codiceFinVTipoTbrId
		 	          and   r.data_cancellazione is null
				      and   r.validita_fine is NULL
	  		          and   class.data_cancellazione is null;

			 		  if flussoElabMifValore is null then --3
		               strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura piano_conti_fin_V_code '||codiceFinVTbr||' [siac_r_movgest_class].';

             		   select replace(substring(class.classif_code,2),'.','') , class.classif_desc
                    	into flussoElabMifValore,flussoElabMifValoreDesc
		    	       from siac_r_movgest_class rclass, siac_t_class class
		               where rclass.movgest_ts_id=mifOrdinativoIdRec.mif_ord_movgest_ts_id
    		           and   rclass.data_cancellazione is null
        		       and   rclass.validita_fine is null
            		   and   class.classif_id=rclass.classif_id
		               and   class.classif_tipo_id=codiceFinVTipoTbrId
    		           and   class.data_cancellazione is null
		               order by rclass.movgest_classif_id
    		           limit 1;
        	           end if; --3
                      end if;--2
                    else
                	 if siopeCodeTipoId is null then --1
                    	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                     		  ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                     		  ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                    		  ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
		                      ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
		                      ||' mifCountRec='||mifCountRec
	                          ||' tipo flusso '||MANDMIF_TIPO||'.Lettura id class tipo='||siopeCodeTipo||'.';

                    	select class.classif_tipo_id into siopeCodeTipoId
                        from siac_d_class_tipo class
                        where class.classif_tipo_code=siopeCodeTipo
                        and   class.ente_proprietario_id=enteProprietarioId
                        and   class.data_cancellazione is null
 				    	and   date_trunc('day',dataElaborazione)>=date_trunc('day',class.validita_inizio)
	 		 		    and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(class.validita_fine,dataElaborazione));
                     end if;
                   if siopeCodeTipoId is not null then --2
                    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                     		  ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                     		  ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                    		  ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
		                      ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
		                      ||' mifCountRec='||mifCountRec
	                          ||' tipo flusso '||MANDMIF_TIPO||'.Lettura valore class tipo='||flussoElabMifElabRec.flussoElabMifParam||'.';


                	select class.classif_code, class.classif_desc
                           into flussoElabMifValore,flussoElabMifValoreDesc
                    from siac_r_ordinativo_class cord, siac_t_class class
                    where cord.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and cord.data_cancellazione is null
                    and cord.validita_fine is null
                    and class.classif_id=cord.classif_id
                    and class.classif_tipo_id=siopeCodeTipoId
                    and class.classif_code!=siopeDef
                    and class.data_cancellazione is null;

                    if flussoElabMifValore is null then --3
	                    select class.classif_code, class.classif_desc
    		                   into flussoElabMifValore,flussoElabMifValoreDesc
	                    from siac_r_movgest_class  r,  siac_t_class class
    	                where r.movgest_ts_id=mifOrdinativoIdRec.mif_ord_movgest_ts_id
        	            and   r.data_cancellazione is null
            	        and   r.validita_fine is null
                	    and class.classif_id=r.classif_id
                    	and class.classif_tipo_id=siopeCodeTipoId
	                    and class.classif_code!=siopeDef
    	                and class.data_cancellazione is null;
                   end if; --3
                  end if; --2
                end if; --if  bAvvioSiopeNew=true then

                if flussoElabMifValore is not null then
                	mifFlussoOrdinativoRec.mif_ord_class_codice_cge:=flussoElabMifValore;
                    codiceCge:=flussoElabMifValore;
	                descCge:=flussoElabMifValoreDesc;


               end if;
            end if; --param
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if; -- elab
        end if; -- attivo

	    -- <importo>
        flussoElabMifElabRec:=null;
        mifCountRec:=mifCountRec+1;
	    if codiceCge is not null then
    	flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
        			   ||' tipo flusso '||MANDMIF_TIPO||'.';
    	if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;

	    if flussoElabMifElabRec.flussoElabMifAttivo=true then
    	  if flussoElabMifElabRec.flussoElabMifElab=true then
                	mifFlussoOrdinativoRec.mif_ord_class_importo:=mifFlussoOrdinativoRec.mif_ord_importo;
	      else
    	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
    	end if;
	   end if;

       -- <classificazione_dati_siope_entrate>

       -- <tipo_debito_siope_c> COMMERCIALE
       flussoElabMifElabRec:=null;
       flussoElabMifValore:=null;
       isOrdCommerciale:=false;
       ordinativoSplitId:=null;
       mifCountRec:=mifCountRec+1;
       flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
        			   ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	   end if;

	   if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
	          if flussoElabMifElabRec.flussoElabMifDef is not null and
                 flussoElabMifElabRec.flussoElabMifParam is not null then

				 -- caso reintroito -- ancora da implementare

				 -- caso di ordinativo di incasso collegato a ordinativo di pagamento per Split
                 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
        			   ||' tipo flusso '||MANDMIF_TIPO||'. Lettura ordinativo di pagamento SPLIT.';

  		         select ord.ord_id into ordinativoSplitId
			     from siac_r_ordinativo rOrd, siac_t_ordinativo ord,siac_d_ordinativo_tipo tipo,
			         siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato, siac_d_relaz_tipo tiporel
				 where rord.ord_id_a=mifOrdinativoIdRec.mif_ord_ord_id
				 and   ord.ord_id=rord.ord_id_da
				 and   tipo.ord_tipo_id=ord.ord_tipo_id
				 and   tipo.ord_tipo_code='P'
			     and   rstato.ord_id=ord.ord_id
	             and   stato.ord_stato_id=rstato.ord_stato_id
	             and   stato.ord_stato_code!='A'
				 and   tiporel.relaz_tipo_id=rOrd.relaz_tipo_id
                 and   tiporel.relaz_tipo_code=flussoElabMifElabRec.flussoElabMifParam
				 and   rord.data_cancellazione is null
				 and   rord.validita_fine is null
				 and   ord.data_cancellazione is null
			     and   ord.validita_fine is null
			     and   rstato.data_cancellazione is null
	             and   rstato.validita_fine is null
                 limit 1;

            	 if ordinativoSplitId is not null then
                   mifFlussoOrdinativoRec.mif_ord_class_tipo_debito=flussoElabMifElabRec.flussoElabMifDef;
                   isOrdCommerciale:=true;
        	     end if;
               end if;
	      else
    	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	      end if;
       end if;

	   -- <tipo_debito_siope_nc> NON_COMMERCIALE se non COMMERCIALE -- NON COMMERCIALE
       flussoElabMifElabRec:=null;
       flussoElabMifValore:=null;
       mifCountRec:=mifCountRec+1;
       if isOrdCommerciale=false then
        flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
        			   ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;

	    if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
	          if flussoElabMifElabRec.flussoElabMifDef is not null then
                   mifFlussoOrdinativoRec.mif_ord_class_tipo_debito_nc=flussoElabMifElabRec.flussoElabMifDef;
              end if;
	      else
    	    RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	      end if;
        end if;
       end if;


       mifCountRec:=mifCountRec+12;
       -- <fatture_siope>
	   -- </fatture_siope>

       -- <dati_ARCONET_siope>
       -- <codice_economico_siope>
       flussoElabMifElabRec:=null;
       flussoElabMifValore:=null;
       mifCountRec:=mifCountRec+1;
       flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
       strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
       if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
       end if;
       if flussoElabMifElabRec.flussoElabMifAttivo=true then
        if flussoElabMifElabRec.flussoElabMifElab=true then
         if flussoElabMifElabRec.flussoElabMifParam is not null then

         	if codiceFinVTbr is null then
            	codiceFinVTbr:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
            end if;
 			if codiceFinVTbr is not null and codiceFinVTipoTbrId is null then --1
				-- codiceFinVTipoTbrId
                strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                     		  ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                     		  ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                    		  ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
		                      ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
		                      ||' mifCountRec='||mifCountRec
	                          ||' tipo flusso '||MANDMIF_TIPO||'.Lettura id class tipo='||codiceFinVTbr||'.';
			   select tipo.classif_tipo_id into strict codiceFinVTipoTbrId
			   from siac_d_class_tipo tipo
			   where tipo.ente_proprietario_id=enteProprietarioId
			   and   tipo.classif_tipo_code=codiceFinVTbr
			   and   tipo.data_cancellazione is null
			   and   date_trunc('day',dataElaborazione)>=date_trunc('day',validita_inizio)
			   and   date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(validita_fine,dataElaborazione));
            end if; --1

            if codiceFinVTipoTbrId is not null then --2
      			strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura piano_conti_fin_V_code '||codiceFinVTbr||' [siac_r_ordinativo_class] .';
		    	select class.classif_code into flussoElabMifValore
  	  		    from siac_r_ordinativo_class r, siac_t_class class
	       	    where r.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
	      	      and   class.classif_id=r.classif_id
 		          and   class.classif_tipo_id=codiceFinVTipoTbrId
		 	      and   r.data_cancellazione is null
			      and   r.validita_fine is NULL
	  		      and   class.data_cancellazione is null;

			   if flussoElabMifValore is null then --3
		     	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura piano_conti_fin_V_code '||codiceFinVTbr||' [siac_r_movgest_class].';

             	   select class.classif_desc into flussoElabMifValore
	    	       from siac_r_movgest_class rclass, siac_t_class class
	               where rclass.movgest_ts_id=mifOrdinativoIdRec.mif_ord_movgest_ts_id
   		           and   rclass.data_cancellazione is null
       		       and   rclass.validita_fine is null
           		   and   class.classif_id=rclass.classif_id
	               and   class.classif_tipo_id=codiceFinVTipoTbrId
   		           and   class.data_cancellazione is null
	               order by rclass.movgest_classif_id
   		           limit 1;
   	           end if; --3
           end if;--2
 /*      	  if collEventoCodeId is null then
        	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'Lettura tipo evento '||flussoElabMifElabRec.flussoElabMifParam||'.';

            select coll.collegamento_tipo_id into collEventoCodeId
            from siac_d_collegamento_tipo coll
            where coll.ente_proprietario_id=enteProprietarioId
            and   coll.collegamento_tipo_code=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1))
            and   coll.data_cancellazione is null
		    and   date_trunc('day',dataElaborazione)>=date_trunc('day',coll.validita_inizio)
		    and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(coll.validita_fine,dataElaborazione));
         end if;

	     if collEventoCodeId is not null then
		  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'Lettura conto economico patrimoniale.';
          select conto.pdce_conto_code into flussoElabMifValore
          from siac_t_pdce_conto conto, siac_t_reg_movfin regMovFin, siac_r_evento_reg_movfin rEvento,
               siac_d_collegamento_tipo coll, siac_d_evento evento,
               siac_t_mov_ep reg, siac_r_reg_movfin_stato regstato, siac_d_reg_movfin_stato stato,
               siac_t_prima_nota pn, siac_r_prima_nota_stato rpnota, siac_d_prima_nota_stato pnstato,
               siac_t_mov_ep_det det
          where coll.ente_proprietario_id=enteProprietarioId
          and   coll.collegamento_tipo_id=collEventoCodeId
          and   evento.collegamento_tipo_id=coll.collegamento_tipo_id
          and   rEvento.evento_id=evento.evento_id
          and   rEvento.campo_pk_id=mifOrdinativoIdRec.mif_ord_ord_id
          and   regMovFin.regmovfin_id=rEvento.regmovfin_id
--          and   regMovFin.ambito_id=ambitoFinId  -- AMBITO_FIN
          and   regstato.regmovfin_id=regMovFin.regmovfin_id
          and   stato.regmovfin_stato_id=regstato.regmovfin_stato_id
          and   stato.regmovfin_stato_code!=REGMOVFIN_STATO_A
          and   reg.regmovfin_id=regMovFin.regmovfin_id
          and   pn.pnota_id=reg.regep_id
          and   rpnota.pnota_id=pn.pnota_id
          and   pnstato.pnota_stato_id=rpnota.pnota_stato_id
          and   pnstato.pnota_stato_code!=REGMOVFIN_STATO_A
          and   det.movep_id=reg.movep_id
          and   det.movep_det_segno=SEGNO_ECONOMICO -- Avere
		  and   conto.pdce_conto_id=det.pdce_conto_id
          and   regMovFin.data_cancellazione is null
          and   regMovFin.validita_fine is null
          and   rEvento.data_cancellazione is null
          and   rEvento.validita_fine is null
          and   evento.data_cancellazione is null
          and   evento.validita_fine is null
          and   reg.data_cancellazione is null
          and   reg.validita_fine is null
          and   regstato.data_cancellazione is null
          and   regstato.validita_fine is null
          and   pn.data_cancellazione is null
          and   pn.validita_fine is null
          and   rpnota.data_cancellazione is null
          and   rpnota.validita_fine is null
          and   conto.data_cancellazione is null
          and   conto.validita_fine is null
          order by pn.pnota_id desc
          limit 1;
         end if;*/

	    end if; -- param
        if flussoElabMifValore is not null then
	        mifFlussoOrdinativoRec.mif_ord_class_economico:=flussoElabMifValore;
        end if;
       else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
       end if;
      end if;

	  -- <importo_codice_economico_siope>
	  mifCountRec:=mifCountRec+1;
      if mifFlussoOrdinativoRec.mif_ord_class_economico is not null then
      	flussoElabMifElabRec:=null;
	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
    	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	    if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
    	end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
         		mifFlussoOrdinativoRec.mif_ord_class_importo_economico:=mifFlussoOrdinativoRec.mif_ord_importo;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
      end if;

	  -- <codice_ue_siope>
	  flussoElabMifElabRec:=null;
	  flussoElabMifValore:=null;
	  mifCountRec:=mifCountRec+1;
	  flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	  if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	  end if;
	  if flussoElabMifElabRec.flussoElabMifAttivo=true then
   		if flussoElabMifElabRec.flussoElabMifElab=true then
	     if flussoElabMifElabRec.flussoElabMifParam is not null then
    	 	if codiceUECodeTipo is null then
				codiceUECodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
	        end if;

         	if codiceUECodeTipo is not null and codiceUECodeTipoId is null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_d_class_tipo.';

        	 select tipo.classif_tipo_id into codiceUECodeTipoId
             from  siac_d_class_tipo tipo
             where tipo.ente_proprietario_id=enteProprietarioId
             and   tipo.classif_tipo_code=codiceUECodeTipo
             and   tipo.data_cancellazione is null
		     and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
		 	 and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
       		end if;

	        if codiceUECodeTipoId is not null then

        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_t_class [siac_r_ordinativo_class].';
        	 select class.classif_code into flussoElabMifValore
             from siac_r_ordinativo_class rclass, siac_t_class class
             where rclass.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
             and   rclass.data_cancellazione is null
             and   rclass.validita_fine is null
             and   class.classif_id=rclass.classif_id
             and   class.classif_tipo_id=codiceUECodeTipoId
             and   class.data_cancellazione is null
             order by rclass.ord_classif_id
             limit 1;

		     if flussoElabMifValore is null then
            	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_t_class [siac_r_movgest_class].';
				select class.classif_code into flussoElabMifValore
	    	    from siac_r_movgest_class rclass, siac_t_class class
	            where rclass.movgest_ts_id=mifOrdinativoIdRec.mif_ord_movgest_ts_id
	            and   rclass.data_cancellazione is null
	            and   rclass.validita_fine is null
	            and   class.classif_id=rclass.classif_id
	            and   class.classif_tipo_id=codiceUECodeTipoId
	            and   class.data_cancellazione is null
	            order by rclass.movgest_classif_id
	            limit 1;
             end if;
        	end if;

	        if flussoElabMifValore is not null then
				mifFlussoOrdinativoRec.mif_ord_class_transaz_ue:=flussoElabMifValore;
    	    end if;
          end if;
	   else
		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  	   end if;
      end if;

	  -- <codice_entrata_siope>
	  flussoElabMifElabRec:=null;
	  flussoElabMifValore:=null;
	  mifCountRec:=mifCountRec+1;
	  flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
	  if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	  end if;
	  if flussoElabMifElabRec.flussoElabMifAttivo=true then
   		if flussoElabMifElabRec.flussoElabMifElab=true then
	     if flussoElabMifElabRec.flussoElabMifParam is not null then
    	 	if ricorrenteCodeTipo is null then
				ricorrenteCodeTipo:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
	        end if;

         	if ricorrenteCodeTipo is not null and ricorrenteCodeTipoId is null then
        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_d_class_tipo.';

        	 select tipo.classif_tipo_id into ricorrenteCodeTipoId
             from  siac_d_class_tipo tipo
             where tipo.ente_proprietario_id=enteProprietarioId
             and   tipo.classif_tipo_code=ricorrenteCodeTipo
             and   tipo.data_cancellazione is null
		     and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
		 	 and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));
       		end if;

	        if ricorrenteCodeTipoId is not null then

        	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_t_class [siac_r_ordinativo_class].';
        	 select upper(class.classif_desc) into flussoElabMifValore
             from siac_r_ordinativo_class rclass, siac_t_class class
             where rclass.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
             and   rclass.data_cancellazione is null
             and   rclass.validita_fine is null
             and   class.classif_id=rclass.classif_id
             and   class.classif_tipo_id=ricorrenteCodeTipoId
             and   class.data_cancellazione is null
             order by rclass.ord_classif_id
             limit 1;

		     if flussoElabMifValore is null then
            	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura siac_t_class [siac_r_movgest_class].';
				select upper(class.classif_desc) into flussoElabMifValore
	    	    from siac_r_movgest_class rclass, siac_t_class class
	            where rclass.movgest_ts_id=mifOrdinativoIdRec.mif_ord_movgest_ts_id
	            and   rclass.data_cancellazione is null
	            and   rclass.validita_fine is null
	            and   class.classif_id=rclass.classif_id
	            and   class.classif_tipo_id=ricorrenteCodeTipoId
	            and   class.data_cancellazione is null
	            order by rclass.movgest_classif_id
	            limit 1;
             end if;
        	end if;

	        if flussoElabMifValore is not null then
				mifFlussoOrdinativoRec.mif_ord_class_ricorrente_entrata:=flussoElabMifValore;
    	    end if;
          end if;
	   else
		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  	   end if;
      end if;



       -- </dati_ARCONET_siope>
       -- </classificazione_dati_siope_entrate>
       -- </classificazione>

       -- <bollo>
       -- <assoggettamento_bollo>
   	  mifCountRec:=mifCountRec+1;
      ordCodiceBolloDesc:=null;
      codiceBolloPlusDesc:=null;
      codiceBolloPlusEsente:=false;
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      if mifOrdinativoIdRec.mif_ord_codbollo_id is not null then


	   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
  	    end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	  if flussoElabMifElabRec.flussoElabMifElab=true then
            -- se REGOLARIZZAZIONE IMPOSTAZIONE DI ESENTE BOLLO
            if flussoElabMifElabRec.flussoElabMifParam is not null and
               flussoElabMifElabRec.flussoElabMifDef is not null and
               mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos is not null and
/*               mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos=
                 trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1)) -- REGOLARIZZAZIONE*/
               mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos in  -- siac-5652 14.12.2017 Sofia
               ( trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1)), -- REGOLARIZZAZIONE
                 trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2))  -- REGOLARIZZAZIONE ACCREDITO BANCA d'ITALIA
               )
                  then
                   mifFlussoOrdinativoRec.mif_ord_bollo_carico:=
                       trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,1));
                   mifFlussoOrdinativoRec.mif_ord_bollo_esenzione:=
                    trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifDef,SEPARATORE,2));

                   codiceBolloPlusEsente:=true;
            end if;

            if mifFlussoOrdinativoRec.mif_ord_bollo_carico  is null then
          	 strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura codice bollo.';

             select bollo.codbollo_desc , replace(plus.codbollo_plus_desc,'BENEFICIARIO','VERSANTE'), plus.codbollo_plus_esente
                   into ordCodiceBolloDesc, codiceBolloPlusDesc, codiceBolloPlusEsente
             from siac_d_codicebollo bollo, siac_d_codicebollo_plus plus, siac_r_codicebollo_plus rp
             where bollo.codbollo_id=mifOrdinativoIdRec.mif_ord_codbollo_id
             and   rp.codbollo_id=bollo.codbollo_id
             and   plus.codbollo_plus_id=rp.codbollo_plus_id
             and   rp.data_cancellazione is null
             and   rp.validita_fine is null;

             if coalesce(codiceBolloPlusDesc,NVL_STR)!=NVL_STR  then
            	mifFlussoOrdinativoRec.mif_ord_bollo_carico:=codiceBolloPlusDesc;
             end if;
            end if;
          else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		  end if;
        end if;
       end if;

      -- <causale_esenzione_bollo>
   	  mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=null;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      if codiceBolloPlusEsente=true and coalesce(ordCodiceBolloDesc,NVL_STR)!=NVL_STR then
      	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        if flussoElabMifElabRec.flussoElabMifId is null then
  		  RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
  	    end if;
        if flussoElabMifElabRec.flussoElabMifAttivo=true then
	   	  if flussoElabMifElabRec.flussoElabMifElab=true then
          	mifFlussoOrdinativoRec.mif_ord_bollo_esenzione:=substring(ordCodiceBolloDesc from 1 for 30);
          else
			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
  		  end if;
        end if;
      end if;
	  -- </bollo>

      -- <versante>
      -- <anagrafica_versante>
      flussoElabMifElabRec:=null;
      flussoElabMifValore:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

      if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;

      if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            	flussoElabMifValore:=soggettoRec.soggetto_desc;

                if flussoElabMifValore is not null then
	                mifFlussoOrdinativoRec.mif_ord_anag_versante:=substring(flussoElabMifValore from 1 for 140);
                end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
      end if;

	   -- <indirizzo_versante>
       flussoElabMifElabRec:=null;
       flussoElabMifValore:=null;
       mifCountRec:=mifCountRec+1;
       flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
       strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' indirizzo_benef mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

        if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
        end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
         if flussoElabMifElabRec.flussoElabMifElab=true then
            	select * into indirizzoRec
                from siac_t_indirizzo_soggetto indir
                where indir.soggetto_id=soggettoRifId
                and   indir.principale='S'
                and   indir.data_cancellazione is null
         	    and   indir.validita_fine is null;
	            if indirizzoRec is null then
                    isIndirizzoBenef:=false;
	            end if;

				if isIndirizzoBenef=true then
                 if indirizzoRec.via_tipo_id is not null then
            		select tipo.via_tipo_code into flussoElabMifValore
	                from siac_d_via_tipo tipo
    	            where tipo.via_tipo_id=indirizzoRec.via_tipo_id
        	        and   tipo.data_cancellazione is null
         		    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
 		 			and	  date_trunc('day',dataElaborazione)<=date_trunc('day',coalesce(tipo.validita_fine,dataElaborazione));

         	        if flussoElabMifValore is not null then
        	        	flussoElabMifValore:=flussoElabMifValore||' ';
    	            end if;
             	 end if;

            	 flussoElabMifValore:=trim(both from coalesce(flussoElabMifValore,'')||coalesce(indirizzoRec.toponimo,'')
                                 ||' '||coalesce(indirizzoRec.numero_civico,''));

	             if flussoElabMifValore is not null then
		            mifFlussoOrdinativoRec.mif_ord_indir_versante:=substring(flussoElabMifValore from 1 for 30);
        	     end if;
               end if;
         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;

   	   -- <cap_versante>
       mifCountRec:=mifCountRec+1;
	   if isIndirizzoBenef=true then
        if indirizzoRec.zip_code is not null  then
         flussoElabMifElabRec:=null;

         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
	            mifFlussoOrdinativoRec.mif_ord_cap_versante:=lpad(indirizzoRec.zip_code,5,'0');
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
        end if;
       end if;


       -- <localita_beneficiario>
       mifCountRec:=mifCountRec+1;
	   if isIndirizzoBenef=true then
        if indirizzoRec.comune_id is not null  then
         flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;

	     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	select com.comune_desc into flussoElabMifValore
            from siac_t_comune com
            where com.comune_id=indirizzoRec.comune_id
            and   com.data_cancellazione is null
            and   com.validita_fine is null;

            if flussoElabMifValore is not null then
	            mifFlussoOrdinativoRec.mif_ord_localita_versante:=substring(flussoElabMifValore from 1 for 30);
            end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
        end if;
	  end if;

	  -- <provincia_beneficiario>
      mifCountRec:=mifCountRec+1;
	  if isIndirizzoBenef=true then
        if indirizzoRec.comune_id is not null  then
         flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	select prov.sigla_automobilistica into flussoElabMifValore
            from siac_r_comune_provincia provRel, siac_t_provincia prov
            where provRel.comune_id=indirizzoRec.comune_id
            and   provRel.data_cancellazione is null
            and   provRel.validita_fine is null
            and   prov.provincia_id=provRel.provincia_id
            and   prov.data_cancellazione is null
            and   prov.validita_fine is null
            order by provRel.data_creazione;

            if flussoElabMifValore is not null then
	            mifFlussoOrdinativoRec.mif_ord_prov_versante:=flussoElabMifValore;
            end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
        end if;
	 end if;


	 -- <stato_versante>
  	 mifCountRec:=mifCountRec+1;

     -- <partita_iva_versante>
     mifCountRec:=mifCountRec+1;
     if soggettoRec.partita_iva is not null or
        (soggettoRec.partita_iva is null and soggettoRec.codice_fiscale is not null and length(soggettoRec.codice_fiscale)=11) then
      	 flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          		if soggettoRec.partita_iva is not null then
                	 mifFlussoOrdinativoRec.mif_ord_partiva_versante:=soggettoRec.partita_iva;
                else
                	mifFlussoOrdinativoRec.mif_ord_partiva_versante:=trim ( both ' ' from soggettoRec.codice_fiscale);
                end if;

          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
        end if;
      end if;

      -- <codice_fiscale_versante>
      mifCountRec:=mifCountRec+1;
      if soggettoRec.partita_iva is null  then
      	 flussoElabMifElabRec:=null;
         flussoElabMifValore:=null;
         flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
         strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
         end if;

         if flussoElabMifElabRec.flussoElabMifAttivo=true then
          if flussoElabMifElabRec.flussoElabMifElab=true then
          	if soggettoRec.codice_fiscale is not null and
  			   length(soggettoRec.codice_fiscale)=16 then
				flussoElabMifValore:=trim ( both ' ' from soggettoRec.codice_fiscale);
            end if;

            if flussoElabMifValore is not null then
		            mifFlussoOrdinativoRec.mif_ord_codfisc_versante:=flussoElabMifValore;
            end if;
          else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
          end if;
         end if;
      end if;
     -- </versante>

     -- <causale>
	 flussoElabMifElabRec:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
  	 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
            mifFlussoOrdinativoRec.mif_ord_vers_causale:=
	            replace(replace(substring(mifOrdinativoIdRec.mif_ord_desc from 1 for 370) , chr(VT_ASCII),chr(SPACE_ASCII)),chr(BS_ASCII),NVL_STR);
	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
      end if;

      -- <sospeso>
      -- <sospesi>
      -- <numero_provvisorio>
      -- <importo_provvisorio>
      mifCountRec:=mifCountRec+2;


      -- <mandato_associato>
      -- <numero_mandato>
      -- <progressivo_associato>
      mifCountRec:=mifCountRec+2;

      -- <informazioni_aggiuntive>
      -- <lingua>
     flussoElabMifElabRec:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
  	 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
        	if flussoElabMifElabRec.flussoElabMifDef is not null then
        		mifFlussoOrdinativoRec.mif_ord_lingua:=flussoElabMifElabRec.flussoElabMifDef;
            end if;
	     else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	     end if;
     end if;

     -- <riferimento_documento_esterno>
     mifCountRec:=mifCountRec+1;
   	 flussoElabMifElabRec:=null;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
  		 	RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
   	 if flussoElabMifElabRec.flussoElabMifAttivo=true then
		if flussoElabMifElabRec.flussoElabMifElab=true then
        		if flussoElabMifElabRec.flussoElabMifDef is not null then
                	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura presenza allegati cartacei.';

                	select 1 into codResult
				    from siac_r_ordinativo_attr rattr
					where rattr.ord_id=mifOrdinativoIdRec.mif_ord_ord_id
                    and   rattr.attr_id=ordAllegatoCartAttrId
				    and   rattr.boolean='S'
					and   rattr.data_cancellazione is null
				    and   rattr.validita_fine is null;

				if codResult is not null then
	                mifFlussoOrdinativoRec.mif_ord_rif_doc_esterno:=flussoElabMifElabRec.flussoElabMifDef;
		        end if;
             end if;
		else
    		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	    end if;
      end if;
      -- </informazioni_aggiuntive>

      -- <sostituzione_reversale>
      -- <numero_reversale_da_sostituire>
      flussoElabMifElabRec:=null;
      ordSostRec:=null;
      mifCountRec:=mifCountRec+1;
      flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
      strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';

      if flussoElabMifElabRec.flussoElabMifId is null then
  		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
      end if;
      if flussoElabMifElabRec.flussoElabMifAttivo=true then
     	if flussoElabMifElabRec.flussoElabMifElab=true then
        			strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura ordinativi di sostituzione.';
                	select * into ordSostRec
                    from fnc_mif_ordinativo_sostituito( mifOrdinativoIdRec.mif_ord_ord_id,
 														ordRelazCodeTipoId,
                                                        dataElaborazione,dataFineVal);

                    if ordSostRec is not null then
                    	mifFlussoOrdinativoRec.mif_ord_num_ord_colleg:=lpad(ordSostRec.ordNumeroSostituto::varchar,NUM_SETTE,ZERO_PAD);
                    end if;
    	else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	    end if;

      end if;

      mifCountRec:=mifCountRec+1;
      -- <progressivo_reversale_da_sostituire>
      if mifFlussoOrdinativoRec.mif_ord_num_ord_colleg is not null then
       	flussoElabMifElabRec:=null;
  	    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    	if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
     		if flussoElabMifElabRec.flussoElabMifElab=true then
            	if flussoElabMifElabRec.flussoElabMifDef is not null then
                	mifFlussoOrdinativoRec.mif_ord_progr_ord_colleg:=flussoElabMifElabRec.flussoElabMifDef;
                end if;
     	    else
     			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
	    end if;
 	 end if;

     -- <esercizio_reversale_da_sostituire>
     mifCountRec:=mifCountRec+1;
     if mifFlussoOrdinativoRec.mif_ord_num_ord_colleg is not null then
        flussoElabMifElabRec:=null;
		flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    	if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	    end if;

        if flussoElabMifElabRec.flussoElabMifAttivo=true then
     		if flussoElabMifElabRec.flussoElabMifElab=true then
               	mifFlussoOrdinativoRec.mif_ord_anno_ord_colleg:=ordSostRec.ordAnnoSostituto;
     	    else
     			RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	        end if;
	    end if;
    end if;
	-- </sostituzione_reversale>

    -- <dati_a_disposizione_ente_versante> facoltativo non valorizzato
    -- </informazioni_versante>

    -- <dati_a_disposizione_ente_reversale>
    -- <codice_distinta>
    flussoElabMifElabRec:=null;
    mifCountRec:=mifCountRec+1;
    flussoElabMifValore:=null;
    flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
  	 		RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
	 end if;

     if flussoElabMifElabRec.flussoElabMifAttivo=true then
      if flussoElabMifElabRec.flussoElabMifElab=true then
      		if mifOrdinativoIdRec.mif_ord_dist_id is not null then
				strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'. Lettura distinta [siac_d_distinta].';
            	select  d.dist_code into flussoElabMifValore
                from siac_d_distinta d
                where d.dist_id=mifOrdinativoIdRec.mif_ord_dist_id;
            end if;

            if flussoElabMifValore is not null then
              	mifFlussoOrdinativoRec.mif_ord_codice_distinta:=flussoElabMifValore;
            end if;
      else
     		RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
	  end if;
	 end if;

     -- <atto_contabile>
     flussoElabMifElabRec:=null;
     flussoElabMifValore:=null;
     mifCountRec:=mifCountRec+1;
     flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];
     strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
     if flussoElabMifElabRec.flussoElabMifId is null then
            RAISE EXCEPTION ' Configurazione tag/campo non presente in archivio.';
     end if;
     if flussoElabMifElabRec.flussoElabMifAttivo=true then
	     if flussoElabMifElabRec.flussoElabMifElab=true then
         	if flussoElabMifElabRec.flussoElabMifParam is not null then
                if attoAmmTipoAllRag is null then
            		attoAmmTipoAllRag:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,1));
                end if;
                if attoAmmStrTipoRag is null then
                	attoAmmStrTipoRag:=trim (both ' ' from split_part(flussoElabMifElabRec.flussoElabMifParam,SEPARATORE,2));
         		end if;

                if attoAmmTipoAllRag is not null and  attoAmmStrTipoRag is not null then

                 flussoElabMifValore:=fnc_mif_estremi_attoamm_all(mifOrdinativoIdRec.mif_ord_atto_amm_id,
                 										          attoAmmTipoAllRag,attoAmmStrTipoRag,
                                                                  dataElaborazione, dataFineVal);

                end if;
          	end if;

            if flussoElabMifValore is not null then
                 	mifFlussoOrdinativoRec.mif_ord_codice_atto_contabile:=flussoElabMifValore;
            end if;

         else
            RAISE EXCEPTION ' Configurazione tag/campo  non elaborabile.';
         end if;
        end if;
    -- </dati_a_disposizione_ente_reversale>
    -- </reversale>



  /*raise notice 'codice_funzione= %',mifFlussoOrdinativoRec.mif_ord_codice_funzione;
  raise notice 'numero_reversale= %',mifFlussoOrdinativoRec.mif_ord_numero;
  raise notice 'data_reversale= %',mifFlussoOrdinativoRec.mif_ord_data;
  raise notice 'importo_reversale= %',mifFlussoOrdinativoRec.mif_ord_importo;*/

  strMessaggio:='Inserimento mif_t_ordinativo_entrata per ord. numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
        INSERT INTO mif_t_ordinativo_entrata
        (
		 mif_ord_flusso_elab_mif_id,
		 mif_ord_ord_id,
		 mif_ord_bil_id,
		 mif_ord_anno,
		 mif_ord_numero,
         mif_ord_codice_funzione,
		 mif_ord_data,
		 mif_ord_importo,
		 mif_ord_bci_tipo_contabil,
		 mif_ord_bci_tipo_entrata,
		 --mif_ord_bci_numero_doc,
		 mif_ord_destinazione,
		 mif_ord_codice_abi_bt,
		 mif_ord_codice_ente,
		 mif_ord_desc_ente,
		 mif_ord_codice_ente_bt,
		 mif_ord_anno_esercizio,
         mif_ord_codice_flusso_oil,
		 mif_ord_data_creazione_flusso,
		 mif_ord_anno_flusso,
         mif_ord_id_flusso_oil,
		 mif_ord_codice_struttura,
		 mif_ord_ente_localita,
		 mif_ord_ente_indirizzo,
		 mif_ord_cod_raggrup,
		 mif_ord_progr_vers,
		 mif_ord_class_codice_cge,
		 mif_ord_class_importo,
		 mif_ord_codifica_bilancio,
         mif_ord_capitolo,
		 mif_ord_articolo,
		 mif_ord_desc_codifica,
         mif_ord_desc_codifica_bil,
		 mif_ord_gestione,
		 mif_ord_anno_res,
		 mif_ord_importo_bil,
		 mif_ord_anag_versante,
		 mif_ord_indir_versante,
		 mif_ord_cap_versante,
		 mif_ord_localita_versante,
		 mif_ord_prov_versante,
		 mif_ord_partiva_versante,
		 mif_ord_codfisc_versante,
		 mif_ord_bollo_esenzione,
		 mif_ord_vers_tipo_riscos,
		 mif_ord_vers_cod_riscos,
		 mif_ord_vers_importo,
		 mif_ord_vers_causale,
		 mif_ord_lingua,
		 mif_ord_rif_doc_esterno,
		 mif_ord_info_tesoriere,
		 mif_ord_flag_copertura,
		 mif_ord_sost_rev,
		 mif_ord_num_ord_colleg,
		 mif_ord_progr_ord_colleg,
		 mif_ord_anno_ord_colleg,
		 mif_ord_numero_acc,
		 mif_ord_code_operatore,
		 mif_ord_siope_codice_cge,
		 mif_ord_siope_descri_cge,
		 mif_ord_descri_estesa_cap,
         mif_ord_codice_ente_ipa, -- newSiope+
	     mif_ord_codice_ente_istat,
		 mif_ord_codice_ente_tramite,
		 mif_ord_codice_ente_tramite_bt,
		 mif_ord_riferimento_ente,
         mif_ord_vers_cc_postale,
		 mif_ord_class_tipo_debito,
         mif_ord_class_tipo_debito_nc,
		 mif_ord_class_economico,
		 mif_ord_class_importo_economico,
		 mif_ord_class_transaz_ue,
		 mif_ord_class_ricorrente_entrata,
		 mif_ord_bollo_carico,
		 mif_ord_stato_versante,
		 mif_ord_codice_distinta,
		 mif_ord_codice_atto_contabile, -- newSiope+
  		 validita_inizio,
         ente_proprietario_id,
  		 login_operazione
		)
		VALUES
        (
  		 flussoElabMifLogId, --idElaborazione univoco -- mif_ord_flusso_elab_mif_id
  		 mifOrdinativoIdRec.mif_ord_ord_id,     -- mif_ord_ord_id
		 mifOrdinativoIdRec.mif_ord_bil_id,     -- mif_ord_bil_id
  		 mifOrdinativoIdRec.mif_ord_ord_anno,   -- mif_ord_anno
  		 mifFlussoOrdinativoRec.mif_ord_numero, -- mif_ord_numero
  		 mifFlussoOrdinativoRec.mif_ord_codice_funzione, -- mif_ord_codice_funzione
  		 mifFlussoOrdinativoRec.mif_ord_data, -- mif_ord_data
--  	     (case when mifFlussoOrdinativoRec.mif_ord_codice_funzione in (FUNZIONE_CODE_N,FUNZIONE_CODE_A) then
--                    '0.00' else mifFlussoOrdinativoRec.mif_ord_importo end), -- mif_ord_importo
         mifFlussoOrdinativoRec.mif_ord_importo,  -- mif_ord_importo
 		 mifFlussoOrdinativoRec.mif_ord_bci_tipo_contabil,  -- mif_ord_bci_tipo_contabil
  	     mifFlussoOrdinativoRec.mif_ord_bci_tipo_entrata,   -- mif_ord_bci_tipo_entrata
 		 --mifFlussoOrdinativoRec.mif_ord_bci_numero_doc,   -- mif_ord_bci_numero_doc
 	 	 mifFlussoOrdinativoRec.mif_ord_destinazione,       -- mif_ord_destinazione
 		 mifFlussoOrdinativoRec.mif_ord_codice_abi_bt,      -- mif_ord_codice_abi_bt
 		mifFlussoOrdinativoRec.mif_ord_codice_ente,         -- mif_ord_codice_ente
		mifFlussoOrdinativoRec.mif_ord_desc_ente,           -- mif_ord_desc_ente
  		mifFlussoOrdinativoRec.mif_ord_codice_ente_bt,      -- mif_ord_codice_ente_bt
 		mifFlussoOrdinativoRec.mif_ord_anno_esercizio,      -- mif_ord_anno_esercizio
--  		annoBilancio||flussoElabMifDistOilId::varchar,  -- flussoElabMifDistOilId
  		annoBilancio||flussoElabMifDistOilRetId::varchar,
        extract(year from now())||'-'||
        lpad(extract('month' from now())::varchar,2,'0')||'-'||
        lpad(extract('day' from now())::varchar,2,'0')||'T'||
        lpad(extract('hour' from now())::varchar,2,'0')||':'||
        lpad(extract('minute' from now())::varchar,2,'0')||':'||'00',  -- mif_ord_data_creazione_flusso
        extract(year from now())::integer,                  -- mif_ord_anno_flusso
		flussoElabMifOilId, --idflussoOil                   -- mif_ord_id_flusso_oil
 		mifFlussoOrdinativoRec.mif_ord_codice_struttura,  -- mif_ord_codice_struttura
 		mifFlussoOrdinativoRec.mif_ord_ente_localita,     -- mif_ord_ente_localita
		mifFlussoOrdinativoRec.mif_ord_ente_indirizzo,    -- mif_ord_ente_indirizzo
        mifFlussoOrdinativoRec.mif_ord_cod_raggrup,       -- mif_ord_cod_raggrup
 		mifFlussoOrdinativoRec.mif_ord_progr_vers,        -- mif_ord_progr_vers
 		mifFlussoOrdinativoRec.mif_ord_class_codice_cge,  -- mif_ord_class_codice_cge
        mifFlussoOrdinativoRec.mif_ord_class_importo,     -- mif_ord_class_importo
 		mifFlussoOrdinativoRec.mif_ord_codifica_bilancio, -- mif_ord_codifica_bilancio
        mifFlussoOrdinativoRec.mif_ord_capitolo,          -- mif_ord_capitolo
  		mifFlussoOrdinativoRec.mif_ord_articolo,          -- mif_ord_articolo
 		mifFlussoOrdinativoRec.mif_ord_desc_codifica,     -- mif_ord_desc_codifica
        mifFlussoOrdinativoRec.mif_ord_desc_codifica_bil, -- mif_ord_desc_codifica_bil
		mifFlussoOrdinativoRec.mif_ord_gestione,          -- mif_ord_gestione
 		mifFlussoOrdinativoRec.mif_ord_anno_res,          -- mif_ord_anno_res
        mifFlussoOrdinativoRec.mif_ord_importo_bil,       -- mif_ord_importo_bil
        mifFlussoOrdinativoRec.mif_ord_anag_versante,     -- mif_ord_anag_versante
  		mifFlussoOrdinativoRec.mif_ord_indir_versante,    -- mif_ord_indir_versante
		mifFlussoOrdinativoRec.mif_ord_cap_versante,      -- mif_ord_cap_versante
 		mifFlussoOrdinativoRec.mif_ord_localita_versante, -- mif_ord_localita_versante
  		mifFlussoOrdinativoRec.mif_ord_prov_versante,     -- mif_ord_prov_versante
 		mifFlussoOrdinativoRec.mif_ord_partiva_versante,
  		mifFlussoOrdinativoRec.mif_ord_codfisc_versante,
 		mifFlussoOrdinativoRec.mif_ord_bollo_esenzione,
        mifFlussoOrdinativoRec.mif_ord_vers_tipo_riscos,
        mifFlussoOrdinativoRec.mif_ord_vers_cod_riscos,
        mifFlussoOrdinativoRec.mif_ord_vers_importo,
        mifFlussoOrdinativoRec.mif_ord_vers_causale,
 		mifFlussoOrdinativoRec.mif_ord_lingua,
		mifFlussoOrdinativoRec.mif_ord_rif_doc_esterno,
 		mifFlussoOrdinativoRec.mif_ord_info_tesoriere,
 		mifFlussoOrdinativoRec.mif_ord_flag_copertura,
        mifFlussoOrdinativoRec.mif_ord_sost_rev,
		mifFlussoOrdinativoRec.mif_ord_num_ord_colleg,
		mifFlussoOrdinativoRec.mif_ord_progr_ord_colleg,
		mifFlussoOrdinativoRec.mif_ord_anno_ord_colleg,
		mifFlussoOrdinativoRec.mif_ord_numero_acc,
        mifFlussoOrdinativoRec.mif_ord_code_operatore,
        mifFlussoOrdinativoRec.mif_ord_siope_codice_cge,
        mifFlussoOrdinativoRec.mif_ord_siope_descri_cge,
        mifFlussoOrdinativoRec.mif_ord_descri_estesa_cap,
        mifFlussoOrdinativoRec.mif_ord_codice_ente_ipa, -- newSiope+
	    mifFlussoOrdinativoRec.mif_ord_codice_ente_istat,
		mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite,
		mifFlussoOrdinativoRec.mif_ord_codice_ente_tramite_bt,
		mifFlussoOrdinativoRec.mif_ord_riferimento_ente,
        mifFlussoOrdinativoRec.mif_ord_vers_cc_postale,
	    mifFlussoOrdinativoRec.mif_ord_class_tipo_debito,    -- commerciale
        mifFlussoOrdinativoRec.mif_ord_class_tipo_debito_nc, -- non_commerciale
	    mifFlussoOrdinativoRec.mif_ord_class_economico,
	    mifFlussoOrdinativoRec.mif_ord_class_importo_economico,
	    mifFlussoOrdinativoRec.mif_ord_class_transaz_ue,
	    mifFlussoOrdinativoRec.mif_ord_class_ricorrente_entrata,
	    mifFlussoOrdinativoRec.mif_ord_bollo_carico,
	    mifFlussoOrdinativoRec.mif_ord_stato_versante,
	    mifFlussoOrdinativoRec.mif_ord_codice_distinta,
	    mifFlussoOrdinativoRec.mif_ord_codice_atto_contabile, -- newSiope+
        now(),
        enteProprietarioId,
        loginOperazione
     )
     returning mif_ord_id into mifOrdSpesaId;



   /* da vedere
     if isGestioneQuoteOK=true then
	  quoteOrdinativoRec:=null;
	  mifCountRec:=FLUSSO_MIF_ELAB_NUM_QUOTA_MAND;
	  strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Lettura quote ordinativo.';

	for quoteOrdinativoRec in
    (select *
	 from fnc_mif_ordinativo_quote_entrata(mifOrdinativoIdRec.mif_ord_ord_id,
		 								   ordinativoTsDetTipoId,movgestTsTipoSubId,
                                           classCdrTipoId,classCdcTipoId,
        		                           enteProprietarioId,dataElaborazione,dataFineVal)
    )
    loop
  		-- <Numero_quota_reversale>
		mifCountRec:=FLUSSO_MIF_ELAB_NUM_QUOTA_MAND;
	    flussoElabMifElabRec:=null;
        codResult:=null;
		flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];


    end loop;

 end if; */





 -- <sospesi>
 -- <sospeso>
 -- <numero_provvisorio>
 -- <importo_provvisorio>
 if  isRicevutaAttivo=true then
    ricevutaRec:=null;
    strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Gestione  provvisori'
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
    for ricevutaRec in
    (select *
     from fnc_mif_ordinativo_ricevute(mifOrdinativoIdRec.mif_ord_ord_id,
								      flussoElabMifTipoDec,
    	                              enteProprietarioId,dataElaborazione,dataFineVal)
    )
    loop
    	strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Inserimento   ricevuta'
                       ||' in mif_t_ordinativo_entrata_ricevute '
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
   		insert into mif_t_ordinativo_entrata_ricevute
        (mif_ord_id,
	     mif_ord_ric_anno,
	     mif_ord_ric_numero,
	     mif_ord_provc_id,
		 mif_ord_ric_importo,
	     validita_inizio,
		 ente_proprietario_id,
	     login_operazione
        )
        values
        (mifOrdSpesaId,
         ricevutaRec.annoRicevuta,
         ricevutaRec.numeroRicevuta,
         ricevutaRec.provRicevutaId,
         ricevutaRec.importoRicevuta,
         now(),
         enteProprietarioId,
         loginOperazione
        );
    end loop;

  end if;

  -- dati fatture da valorizzare se ordinativo commerciale
  -- @@@@ sicuramente da completare
  -- <fattura_siope>
  if isGestioneFatture = true and isOrdCommerciale=true then
   flussoElabMifElabRec:=null;
   mifCountRec:=FLUSSO_MIF_ELAB_FATTURE;
   titoloCap:=null;
   flussoElabMifElabRec:=mifFlussoElabMifArr[mifCountRec];

   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Gestione fatture.Lettura titolo ordinativo di spesa collegato.';
   select c.classif_code into titoloCap
   from siac_r_ordinativo_bil_elem re, siac_r_bil_elem_class rc,
        siac_t_class c
   where re.ord_id=ordinativoSplitId
   and   rc.elem_id=re.elem_id
   and   c.classif_id=rc.classif_id
   and   c.classif_tipo_id=macroAggrTipoCodeId
   and   re.data_cancellazione is null
   and   re.validita_fine is null
   and   rc.data_cancellazione is null
   and   rc.validita_fine is null
   and   c.data_cancellazione is null;

   if titoloCap is not null then
    if substring(titoloCap from 1 for 1)=titoloCorrente then
	  	titoloCap:=descriTitoloCorrente;
    else
     if substring(titoloCap from 1 for 1)=titoloCapitale then
     	titoloCap:=descriTitoloCapitale;
     end if;
    end if;
   end if;
   strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Lettura dati configurazione per campo '||flussoElabMifElabRec.flusso_elab_mif_campo
                       ||' mifCountRec='||mifCountRec
                       ||' tipo flusso '||MANDMIF_TIPO||'.Gestione fatture.';
   ordRec:=null;
   for ordRec in
   (select * from fnc_mif_ordinativo_documenti_splus( ordinativoSplitId, -- cerco i documenti relativi a ordinativo di pagamento collegato per split
											          numeroDocs::integer,
                                                      tipoDocs,
                                                      docAnalogico,
                                                      attrCodeDataScad,
                                                      titoloCap,
                                                      enteOilRec.ente_oil_codice_pcc_uff,
		   		                        	          enteProprietarioId,
	            		                              dataElaborazione,dataFineVal)
   )
    loop
        strMessaggio:='Lettura dati ordinativo numero='||mifOrdinativoIdRec.mif_ord_ord_numero
                       ||' annoBilancio='||mifOrdinativoIdRec.mif_ord_anno_bil
                       ||' ord_id='||mifOrdinativoIdRec.mif_ord_ord_id
                       ||' mif_ord_id='||mifOrdinativoIdRec.mif_ord_id
                       ||'. Inserimento fatture '
                       ||' in mif_t_ordinativo_spesa_documenti '
                       ||' tipo flusso '||MANDMIF_TIPO||'.';
         insert into  mif_t_ordinativo_spesa_documenti
         ( mif_ord_id,
		   mif_ord_documento,
           mif_ord_doc_codice_ipa_ente,
	       mif_ord_doc_tipo,
           mif_ord_doc_tipo_a,
		   mif_ord_doc_id_lotto_sdi,
		   mif_ord_doc_tipo_analog,
		   mif_ord_doc_codfisc_emis,
		   mif_ord_doc_anno,
	       mif_ord_doc_numero,
	       mif_ord_doc_importo,
	       mif_ord_doc_data_scadenza,
	       mif_ord_doc_motivo_scadenza,
	       mif_ord_doc_natura_spesa,
		   validita_inizio,
		   ente_proprietario_id,
		   login_operazione
         )
         values
         (mifOrdSpesaId,
          ordRec.numero_fattura_siope,
		  ordRec.codice_ipa_ente_siope,
		  ordRec.tipo_documento_siope,
          ordRec.tipo_documento_siope_a,
          ordRec.identificativo_lotto_sdi_siope,
          ordRec.tipo_documento_analogico_siope,
          trim ( both ' ' from ordRec.codice_fiscale_emittente_siope),
		  ordRec.anno_emissione_fattura_siope,
		  ordRec.numero_fattura_siope,
          ordRec.importo_siope,
		  ordRec.data_scadenza_pagam_siope,
		  ordRec.motivo_scadenza_siope,
    	  ordRec.natura_spesa_siope,
          now(),
          enteProprietarioId,
          loginOperazione
         );
    end loop;
   end if;

   numeroOrdinativiTrasm:=numeroOrdinativiTrasm+1;

   end loop;

   strMessaggio:='Aggiornamento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_out_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
   update siac_t_progressivo p set prog_value=flussoElabMifOilId
   where p.ente_proprietario_id=enteProprietarioId
   and   p.prog_key='oil_out_'||annoBilancio
   and   p.ambito_id=ambitoFinId
   and   p.data_cancellazione is null
   and   p.validita_fine is null;

   strMessaggio:='Aggiornamento progressivo per identificativo flusso OIL [siac_t_progressivo prog_key=oil_'||MANDMIF_TIPO||'_'||annoBilancio||'  per flusso MIF tipo '||MANDMIF_TIPO||'.';
   update siac_t_progressivo p set prog_value=flussoElabMifDistOilRetId
   where p.ente_proprietario_id=enteProprietarioId
   and   p.prog_key='oil_'||MANDMIF_TIPO||'_'||annoBilancio
   and   p.ambito_id=ambitoFinId
   and   p.data_cancellazione is null
   and   p.validita_fine is null;

   strMessaggio:='Aggiornamento mif_t_flusso_elaborato.';
   update  mif_t_flusso_elaborato
   set (flusso_elab_mif_id_flusso_oil,flusso_elab_mif_codice_flusso_oil,flusso_elab_mif_num_ord_elab,flusso_elab_mif_file_nome,flusso_elab_mif_esito_msg)=
   	   (flussoElabMifOilId,annoBilancio||flussoElabMifDistOilRetId::varchar,numeroOrdinativiTrasm,flussoElabMifTipoNomeFile||'_'||enteOilRec.ente_oil_codice,
        'Elaborazione in corso tipo flusso '||MANDMIF_TIPO||' - Dati inseriti in mif_t_ordinativo_entrata')
   where flusso_elab_mif_id=flussoElabMifLogId;

    -- gestire aggiornamento mif_t_flusso_elaborato

	RAISE NOTICE 'numeroOrdinativiTrasm %', numeroOrdinativiTrasm;
    messaggioRisultato:=strMessaggioFinale||' Trasmessi '||numeroOrdinativiTrasm||' ordinativi di entrata.';
    messaggioRisultato:=upper(messaggioRisultato);
    flussoElabMifId:=flussoElabMifLogId;
    nomeFileMif:=flussoElabMifTipoNomeFile||'_'||enteOilRec.ente_oil_codice;
    flussoElabMifDistOilId:=(annoBilancio||flussoElabMifDistOilRetId::varchar)::integer;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE :  % %',coalesce(strMessaggioFinale,''),coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 1000),mifCountRec;
        if codResult=-12 then
          messaggioRisultato:=
        	coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 1500),'') ||' '||mifCountRec||'.';
          codiceRisultato:=0;
        else
          messaggioRisultato:=
        	coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||'ERRORE:  '||' '||coalesce(substring(upper(SQLERRM) from 1 for 1500),'')||' '||mifCountRec||'.' ;
       	  codiceRisultato:=-1;
    	end if;

        numeroOrdinativiTrasm:=0;
		messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;

        return;
     when NO_DATA_FOUND THEN
        raise notice '% % ERRORE : % %',coalesce(strMessaggioFinale,''),coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 1500),mifCountRec;
        messaggioRisultato:=coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||' Nessun dato presente in archivio '||' '||mifCountRec||'.';
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;

        return;
     when TOO_MANY_ROWS THEN
        raise notice '% % ERRORE : % %',coalesce(strMessaggioFinale,''),coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 1500),mifCountRec;
        messaggioRisultato:=coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||' Diverse righe presenti in archivio '||' '||mifCountRec||'.';
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;
        return;
	when others  THEN
		raise notice '% % Errore DB % % %',coalesce(strMessaggioFinale,''),coalesce(strMessaggio,''),SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 1000),mifCountRec;
        messaggioRisultato:=coalesce(strMessaggioFinale,'')||coalesce(strMessaggio,'')||'ERRORE DB:'||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 1500)||' '||mifCountRec||'.' ;
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);

        if flussoElabMifLogId is not null then
            flussoElabMifId:=flussoElabMifLogId;
        	update  mif_t_flusso_elaborato
   			set (flusso_elab_mif_esito,flusso_elab_mif_esito_msg)=
                ('KO',messaggioRisultato)
		    where flusso_elab_mif_id=flussoElabMifLogId;
        else
        	flussoElabMifId:=null;
        end if;

        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_entrata_splus
( enteProprietarioId integer,
  nomeEnte VARCHAR,
  annobilancio varchar,
  loginOperazione varchar,
  dataElaborazione timestamp,
  out flussoElabMifDistOilId integer,
  out flussoElabMifId integer,
  out numeroOrdinativiTrasm integer,
  out nomeFileMif varchar,
  out codiceRisultato integer,
  out messaggioRisultato varchar )
RETURNS record AS
$body$
DECLARE


 strMessaggio VARCHAR(1500):='';
 strMessaggioFinale VARCHAR(1500):='';

 mifOrdinativoRec record;


BEGIN

	strMessaggioFinale:='Invio ordinativi di entrata a SIOPE PLUS.';


	numeroOrdinativiTrasm:=0;
    codiceRisultato:=0;
    messaggioRisultato:='';
	flussoElabMifId:=null;
    nomeFileMif:=null;
    flussoElabMifDistOilId:=null;

    strMessaggio:='Richiamo fnc_mif_ordinativo_entrata interno.';
	select *  into mifOrdinativoRec
    from fnc_mif_ordinativo_entrata_splus
         (enteProprietarioId,
		  nomeEnte,
		  annobilancio,
		  loginOperazione,
		  dataElaborazione,
          null);

	numeroOrdinativiTrasm:=mifOrdinativoRec.numeroOrdinativiTrasm;
    codiceRisultato:=mifOrdinativoRec.codiceRisultato;
    messaggioRisultato:=mifOrdinativoRec.messaggioRisultato;
	flussoElabMifId:=mifOrdinativoRec.flussoElabMifId;
    nomeFileMif:=mifOrdinativoRec.nomeFileMif;

    flussoElabMifDistOilId:=mifOrdinativoRec.flussoElabMifDistOilId;
    return;

exception
	when others  THEN
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'ERRORE DB:'||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 500)||'.' ;
        numeroOrdinativiTrasm:=0;
        codiceRisultato:=-1;
        messaggioRisultato:=upper(messaggioRisultato);
        return;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_mif_ordinativo_entrata_splus_ritrasm
( enteProprietarioId integer,
  nomeEnte VARCHAR,
  annobilancio varchar,
  ordArray text,
  loginOperazione varchar,
  dataElaborazione timestamp)
RETURNS text AS
$body$
DECLARE


 strMessaggio VARCHAR(1500):='';
 strMessaggioFinale VARCHAR(1500):='';


 ORD_CODE_TIPO_I CONSTANT  varchar :='I';

 mifOrdinativoRec record;
 mifOrdRitrasmRec record;

 flussoElabMifId integer:=0;
 numeroOrdinativiTrasm integer:=0;
 nomeFileMif varchar:='NO_FILE';
 codiceRisultato integer:=0;
 messaggioRisultato varchar:='OK';
 generaXml varchar(10) :='false';
 messaggioResult text:=null;
 flussoElabMifDistOilId integer:=0;


BEGIN
  	strMessaggioFinale:='Invio ordinativi di entrata a SIOPE PLUS.';

    strMessaggio:='Popolamento tabella mif_t_ordinativo_ritrasmesso.';
    -- out mifOrdRitrasmElabId
    -- out mifOrdRitrasm
    -- out codiceRisultato
    -- out messaggioRisultato
    select *  into mifOrdRitrasmRec
    from fnc_mif_ordinativo_ritrasm(enteProprietarioId,loginOperazione,ORD_CODE_TIPO_I,ordArray);

    if mifOrdRitrasmRec.codiceRisultato!=0 then
	    messaggioRisultato:=mifOrdinativoRec.messaggioRisultato;
        codiceRisultato:=-1;
    end if;

    if codiceRisultato=0 and mifOrdRitrasmRec.mifOrdRitrasmElabId is null then
    	codiceRisultato:=-1;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||' Identificativo elaborazione ritrasmissione non valido.';
    end if;

    if codiceRisultato=0 and coalesce(mifOrdRitrasmRec.mifOrdRitrasm,0)=0 then
        messaggioRisultato:=strMessaggioFinale||strMessaggio||' Nessun ordinativo presente in mif_t_ordinativo_ritrasmesso.';
    end if;



     if codiceRisultato=0 and coalesce(mifOrdRitrasmRec.mifOrdRitrasm,0)!=0 then
     strMessaggio:='Richiamo fnc_mif_ordinativo_entrata_splus interno mifOrdRitrasmElabId='||mifOrdRitrasmRec.mifOrdRitrasmElabId||'.';
  	 select *  into mifOrdinativoRec
     from fnc_mif_ordinativo_entrata_splus
          (enteProprietarioId,
	 	   nomeEnte,
		   annobilancio,
		   loginOperazione,
		   dataElaborazione,
           mifOrdRitrasmRec.mifOrdRitrasmElabId);

     if mifOrdinativoRec.codiceRisultato=0 then
         if mifOrdinativoRec.flussoElabMifId is null or mifOrdinativoRec.flussoElabMifId=0 then
	     	codiceRisultato:=-1;
            messaggioRisultato:=strMessaggioFinale||strMessaggio||' Identificativo elaborazione trasmissione non valido.';
         else
    	 	flussoElabMifId:=mifOrdinativoRec.flussoElabMifId;
          	numeroOrdinativiTrasm:=mifOrdinativoRec.numeroOrdinativiTrasm;
		  	nomeFileMif:=mifOrdinativoRec.nomeFileMif;
            -- 27.05.2016 Sofia - JIRA-3619
            flussoElabMifDistOilId:=mifOrdinativoRec.flussoElabMifDistOilId;
         end if;
     else
     	 codiceRisultato:=-1;
         messaggioRisultato:=mifOrdinativoRec.messaggioRisultato;
     end if;
    end if;


	if codiceRisultato=0 and coalesce(numeroOrdinativiTrasm,0)!=0 then
        strMessaggio:='Lettura dati ente OIL per generaXml.';
    	select ( case when ente_oil_genera_xml=true then 'true' else 'false' end) into generaXml
        from siac_t_ente_oil
        where ente_proprietario_id=enteProprietarioId;

        if generaXml is null then
        	raise exception ' Errore in lettura.';
        end if;
    end if;

    messaggioResult   :='codiceRes='||coalesce(codiceRisultato,-1)::varchar||'|'||
						'flussoElabMifDistOilId='||coalesce(flussoElabMifDistOilId,0)::varchar||'|'||    -- 27.05.2016 Sofia - JIRA-3619
                        'flussoElabMifId='||coalesce(flussoElabMifId,0)::varchar||'|'||
                        'generaXml='||generaXml||'|'||
                        'numOrdTrasm='||coalesce(numeroOrdinativiTrasm,0)::varchar||'|'||
                        'nomeFileMif='||coalesce(nomeFileMif,'NO_FILE')||'|'||
                        'messaggioRes='||coalesce(messaggioRisultato,'');




    return messaggioResult;



exception
	when others  THEN
    	messaggioRisultato:=
        strMessaggioFinale||' '||coalesce(strMessaggio,'')||' '||coalesce(substring(upper(SQLERRM) from 1 for 500),'')||'.' ;
	    messaggioRisultato:=upper(messaggioRisultato);
        messaggioResult:='codiceRes=-1'||'|'||
        				 'flussoElabMifDistOilId=0'||'|'|| 	-- 27.05.2016 Sofia - JIRA-3619
                         'flussoElabMifId=0'||'|'||
                         'generaXml=false'||'|'||
                         'numOrdTrasm=0'||'|'||
                         'nomeFileMif=NO_FILE'||'|'||
                         'messaggioRes='||coalesce(messaggioRisultato,'');
	    return messaggioResult;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


-- 12.12.2017 Sofia - SIOPE+ - FINE

-- 13.12.2017 Sofia - SIAC-5276 INIZIO

-- vincoli tra impegni-accertamenti - inizio

ALTER TABLE fase_bil_t_gest_apertura_vincoli
  ALTER COLUMN movgest_orig_ts_a_id DROP NOT NULL,
  ALTER COLUMN movgest_orig_ts_b_id DROP NOT NULL;


CREATE OR REPLACE FUNCTION fnc_siac_add_column()
returns void
AS 
$body$
declare
 stm varchar;
begin
 
 select  'ALTER TABLE fase_bil_t_gest_apertura_vincoli ADD COLUMN avav_id integer;' into stm
 where 
 not exists 
 (
 SELECT 1 
 FROM information_schema.columns
 WHERE table_name = 'fase_bil_t_gest_apertura_vincoli'
 AND column_name = 'avav_id'
 );
 if stm is not null then
 	execute stm;
 end if;
 
 stm:=null;
 select 'alter table fase_bil_t_gest_apertura_vincoli
add CONSTRAINT  siac_r_movgest_ts_siac_t_avanzovincolo FOREIGN KEY (avav_id)
    REFERENCES siac_t_avanzovincolo(avav_id)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION
    NOT DEFERRABLE;' into stm
 where 
 not exists
 (select 1 
  from pg_constraint
  where conname='siac_r_movgest_ts_siac_t_avanzovincolo'
 );
 if stm is not null then
 	execute stm;
 end if;
end;
$body$ LANGUAGE 'plpgsql' volatile called ON NULL input security invoker cost 100;

select * from fnc_siac_add_column();


CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_apertura_vincoli_popola(
  enteProprietarioId     integer,
  annoBilancio           integer,
  loginOperazione        varchar,
  dataElaborazione       timestamp,
  out faseBilElabRetId   integer,
  out codiceRisultato    integer,
  out messaggioRisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';

	codResult         integer:=null;

    movGestRec record;
    faseBilElabId     integer:=null;

    bilancioId        integer:=null;
  	bilancioPrecId    integer:=null;
    periodoId         integer:=null;
    periodoPrecId     integer:=null;
	dataInizioVal     timestamp:=null;

	faseOp            varchar(10):=null;

	movgestStatoAId   integer:=null;
	movGestTsDetTipoAId   integer:=null;

	movGestTipoIId        integer:=null;
    movGestTipoAId        integer:=null;
	movGestTsAId          integer:=null;

    -- tipo periodo annuale
    SY_PER_TIPO       CONSTANT varchar:='SY';
    -- tipo anno ordinario annuale
	BIL_ORD_TIPO      CONSTANT varchar:='BIL_ORD';


    APE_GEST_VINCOLI    CONSTANT varchar:='APE_GEST_VINCOLI';

	A_IMP_STATO       CONSTANT varchar:='A';
	IMPOATT_TIPO    CONSTANT varchar:='A';

    I_MOVGEST_TIPO  CONSTANT varchar:='I';
    A_MOVGEST_TIPO  CONSTANT varchar:='A';
    E_FASE CONSTANT varchar:='E';
    G_FASE CONSTANT varchar:='G';
BEGIN
	faseBilElabRetId:=null;
    codiceRisultato:=null;
    messaggioRisultato:=null;

    dataInizioVal:= clock_timestamp();

	strMessaggioFinale:='Apertura bilancio gestione.Ribaltamento vincoli da Gestione precedente. Anno bilancio='||annoBilancio::varchar||'. POPOLA.';

    strMessaggio:='Verifica esistenza fase elaborazione '||APE_GEST_VINCOLI||' IN CORSO.';
    select 1 into codResult
    from fase_bil_t_elaborazione fase, fase_bil_d_elaborazione_tipo tipo
    where tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.fase_bil_elab_tipo_code=APE_GEST_VINCOLI
    and   fase.fase_bil_elab_tipo_id=tipo.fase_bil_elab_tipo_id
    and   fase.fase_bil_elab_esito like 'IN%'
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null
    and   tipo.data_cancellazione is null
    and   tipo.validita_fine is null;
    if codResult is not null then
    	raise exception ' Esistenza fase in corso.';
    end if;

    -- inserimento fase_bil_t_elaborazione
	strMessaggio:='Inserimento fase elaborazione [fase_bil_t_elaborazione].';
    insert into fase_bil_t_elaborazione
    (fase_bil_elab_esito, fase_bil_elab_esito_msg,
     fase_bil_elab_tipo_id,
     ente_proprietario_id,validita_inizio, login_operazione)
    (select 'IN','ELABORAZIONE FASE BILANCIO '||APE_GEST_VINCOLI||' IN CORSO.',
            tipo.fase_bil_elab_tipo_id,enteProprietarioId, dataInizioVal, loginOperazione
     from fase_bil_d_elaborazione_tipo tipo
     where tipo.ente_proprietario_id=enteProprietarioId
     and   tipo.fase_bil_elab_tipo_code=APE_GEST_VINCOLI
     and   tipo.data_cancellazione is null
     and   tipo.validita_fine is null)
     returning fase_bil_elab_id into faseBilElabId;

     if faseBilElabId is null then
     	raise exception ' Inserimento non effettuato.';
     end if;


    strMessaggio:='Inserimento LOG.';
	codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggioFinale||' INIZIO.',clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;


	 strMessaggio:='Lettura bilancioId e periodoId  per annoBilancio='||annoBilancio::varchar||'.';
     select bil.bil_id , per.periodo_id into strict bilancioId, periodoId
     from siac_t_bil bil, siac_t_periodo per
     where bil.ente_proprietario_id=enteProprietarioId
     and   per.periodo_id=bil.periodo_id
     and   per.anno::INTEGER=annoBilancio
     and   bil.data_cancellazione is null
     and   per.data_cancellazione is null;


	 strMessaggio:='Verifica fase di bilancio di corrente.';
	 select fase.fase_operativa_code into faseOp
     from siac_r_bil_fase_operativa r, siac_d_fase_operativa fase
     where r.bil_id=bilancioId
     and   fase.fase_operativa_id=r.fase_operativa_id
     and   r.data_cancellazione is null
     and   r.validita_fine is null;
     if faseOp is null or faseOp not in (E_FASE,G_FASE) then
     	raise exception ' Il bilancio deve essere in fase % o %.',E_FASE,G_FASE;
     end if;

     strMessaggio:='Lettura bilancioId e periodoId  per annoBilancio-1='||(annoBilancio-1)::varchar||'.';
     select bil.bil_id , per.periodo_id into strict bilancioPrecId, periodoPrecId
     from siac_t_bil bil, siac_t_periodo per
     where bil.ente_proprietario_id=enteProprietarioId
     and   per.periodo_id=bil.periodo_id
     and   per.anno::INTEGER=annoBilancio-1
     and   bil.data_cancellazione is null
     and   per.data_cancellazione is null;




     strMessaggio:='Lettura id identificativo per movgestStatoAId='||A_IMP_STATO||'.';
     select stato.movgest_stato_id into strict movgestStatoAId
     from siac_d_movgest_stato stato
     where stato.ente_proprietario_id=enteProprietarioId
     and   stato.movgest_stato_code=A_IMP_STATO
     and   stato.data_cancellazione is null
     and   stato.validita_fine is null;


     strMessaggio:='Lettura id identificativo per movGestTipoIId='||I_MOVGEST_TIPO||'.';
     select tipo.movgest_tipo_id into strict movGestTipoIId
     from siac_d_movgest_tipo tipo
     where tipo.ente_proprietario_id=enteProprietarioId
     and   tipo.movgest_tipo_code=I_MOVGEST_TIPO
     and   tipo.data_cancellazione is null
     and   tipo.validita_fine is null;

     strMessaggio:='Lettura id identificativo per movGestTipoAId='||A_MOVGEST_TIPO||'.';
     select tipo.movgest_tipo_id into strict movGestTipoAId
     from siac_d_movgest_tipo tipo
     where tipo.ente_proprietario_id=enteProprietarioId
     and   tipo.movgest_tipo_code=A_MOVGEST_TIPO
     and   tipo.data_cancellazione is null
     and   tipo.validita_fine is null;

     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;



    strMessaggio:='Verifica esistenza vincoli su movimenti da ribaltare INIZIO.';
    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
    end if;

    -- 06.12.2017 Sofia siac-5276 - revisione ribaltamento vincoli tra impegni-accertamenti
    codResult:=null;
	select 1 into codResult
    from siac_r_movgest_ts r,
         siac_t_movgest mb,siac_t_movgest_ts tsb
    where mb.ente_proprietario_id=enteProprietarioId
    and   mb.movgest_tipo_id=movGestTipoIId
    and   mb.bil_id=bilancioPrecId
    and   mb.movgest_anno::INTEGER>=annoBilancio
    and   tsb.movgest_id=mb.movgest_id
    and   r.movgest_ts_b_id=tsb.movgest_ts_id
    and   mb.data_cancellazione is null
    and   mb.validita_fine is null
    and   tsb.data_cancellazione is null
    and   tsb.validita_fine is null
    and   r.data_cancellazione is null
    and   r.validita_fine is null
    and   exists (select 1 from siac_t_movgest mnew, siac_t_movgest_ts tsnew, siac_r_movgest_ts_stato rs
   				  where mnew.bil_id=bilancioId
                  and   mnew.movgest_tipo_id=mb.movgest_tipo_id
                  and   mnew.movgest_anno=mb.movgest_anno
                  and   mnew.movgest_numero=mb.movgest_numero
                  and   tsnew.movgest_id=mnew.movgest_id
                  and   tsnew.movgest_ts_tipo_id=tsb.movgest_ts_tipo_id
                  and   tsnew.movgest_ts_code=tsb.movgest_ts_code
                  and   rs.movgest_ts_id=tsnew.movgest_ts_id
                  and   rs.movgest_stato_id!=movgestStatoAId
                  and   rs.data_cancellazione is null
                  and   rs.validita_fine is null
                  and   mnew.data_cancellazione is null
                  and   mnew.validita_fine is null
                  and   tsnew.data_cancellazione is null
                  and   tsnew.validita_fine is null);

	 if codResult is null then
     	raise exception ' Nessun vincolo da ribaltare.';
     end if;

     strMessaggio:='Verifica esistenza vincoli su movimenti da ribaltare FINE.';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;


     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - INIZIO inserimenti';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - INIZIO inserimenti - caso 1';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     -- caso 1
	 -- il movimento nel bilancio precedente presentava un legame ad avanzo_tipo FPVCC conto capitale o FPVSC spesa corrente:
	 --  in questo caso ricreare un vincolo analogo nel
	 --  nuovo bilancio per la stessa quota senza legame ad accertamento ( solo movgest_ts_id_b )
     insert into fase_bil_t_gest_apertura_vincoli
     (fase_bil_elab_id,
      movgest_orig_ts_b_id,
      movgest_orig_ts_r_id,
      bil_orig_id,
      importo_orig_vinc,
      movgest_ts_b_id,
      importo_vinc,
	  avav_id,
      bil_id,
      validita_inizio,
      login_operazione,
      ente_proprietario_id
      )
      (
      with
      vincPrec as
      (
      select mb.movgest_anno::integer, mb.movgest_numero::integer,
             tsb.movgest_ts_code::integer,
             tsb.movgest_ts_tipo_id,
             mb.movgest_id, tsb.movgest_ts_id,
             r.movgest_ts_r_id,
             r.avav_id, r.movgest_ts_importo
      from siac_r_movgest_ts r,
           siac_t_movgest mb,siac_t_movgest_ts tsb ,siac_t_avanzovincolo av,siac_d_avanzovincolo_tipo tipo
      where mb.bil_id=bilancioPrecId
      and   mb.movgest_tipo_id=movGestTipoIId
      and   mb.movgest_anno::INTEGER>=annoBilancio
	  and   tsb.movgest_id=mb.movgest_id
	  and   r.movgest_ts_b_id=tsb.movgest_ts_id
      and   r.movgest_ts_a_id is null
      and   av.avav_id=r.avav_id
      and   tipo.avav_tipo_id=av.avav_tipo_id
      and   tipo.avav_tipo_code in ('FPVCC','FPVSC')
	  and   mb.data_cancellazione is null
	  and   mb.validita_fine is null
	  and   tsb.data_cancellazione is null
	  and   tsb.validita_fine is null
	  and   r.data_cancellazione is null
      and   r.validita_fine is null
      ),
      impNew as
      (select mnew.movgest_anno::integer, mnew.movgest_numero::integer,
              tsnew.movgest_ts_code::integer,
              tsnew.movgest_ts_tipo_id,
              mnew.movgest_id, tsnew.movgest_ts_id
       from siac_t_movgest mnew, siac_t_movgest_ts tsnew, siac_r_movgest_ts_stato rs
       where mnew.bil_id=bilancioId
       and   mnew.movgest_tipo_id=movGestTipoIId
       and   mnew.movgest_anno::integer>=annoBilancio
       and   tsnew.movgest_id=mnew.movgest_id
       and   rs.movgest_ts_id=tsnew.movgest_ts_id
       and   rs.movgest_stato_id!=movgestStatoAId
       and   rs.data_cancellazione is null
       and   rs.validita_fine is null
       and   mnew.data_cancellazione is null
       and   mnew.validita_fine is null
       and   tsnew.data_cancellazione is null
       and   tsnew.validita_fine is null
      )
      select faseBilElabId, 				-- fase_bil_elab_id
             vincPrec.movgest_ts_id, 		-- movgest_orig_ts_b_id
             vincPrec.movgest_ts_r_id,  	-- movgest_orig_ts_r_id
             bilancioPrecId, 				-- bil_orig_id
             vincPrec.movgest_ts_importo, 	-- importo_orig_vinc
             impNew.movgest_ts_id, 			-- movgest_ts_b_id
             vincPrec.movgest_ts_importo, 	-- importo_vinc
             vincPrec.avav_id,  			-- avav_id
             bilancioId, 					-- bil_id
       		 dataInizioVal,
	         loginOperazione,
	         enteProprietarioId
      from vincPrec, impNew
      where vincPrec.movgest_anno=impNew.movgest_anno
      and   vincPrec.movgest_numero=impNew.movgest_numero
      and   vincPrec.movgest_ts_code=impNew.movgest_ts_code
      and   vincPrec.movgest_ts_tipo_id=impNew.movgest_ts_tipo_id
      );

     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - FINE inserimenti - caso 1';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - INIZIO inserimenti - caso 2.a';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;
     -- caso 2.a
     -- il movimento nel bilancio precedente presentava un legame ad
     -- avanzo_tipo Avanzo di amministrazione
     -- creare un legame nuovo bilancio del tipo FPV  per la stessa quota
     -- (la tipologia conto capitale o spesa corrente da determinare sulla base del titolo di spesa)
     -- titolo 1 e 4 - FPVSC corrente
     -- titolo 2 e 3 - FPVCC in conto capitale
     insert into fase_bil_t_gest_apertura_vincoli
     (fase_bil_elab_id,
      movgest_orig_ts_b_id,
      movgest_orig_ts_r_id,
      bil_orig_id,
      importo_orig_vinc,
      movgest_ts_b_id,
      importo_vinc,
	  avav_id,
      bil_id,
      validita_inizio,
      login_operazione,
      ente_proprietario_id
      )
      (
      with
      vincPrec as
      (
      select mb.movgest_anno::integer, mb.movgest_numero::integer,
             tsb.movgest_ts_code::integer,
             tsb.movgest_ts_tipo_id,
             mb.movgest_id, tsb.movgest_ts_id,
             r.movgest_ts_r_id,
             r.avav_id, r.movgest_ts_importo
      from siac_r_movgest_ts r,
           siac_t_movgest mb,siac_t_movgest_ts tsb ,siac_t_avanzovincolo av,siac_d_avanzovincolo_tipo tipo
      where mb.bil_id=bilancioPrecId
	  and   mb.movgest_tipo_id=movGestTipoIId
      and   mb.movgest_anno::INTEGER>=annoBilancio
	  and   tsb.movgest_id=mb.movgest_id
	  and   r.movgest_ts_b_id=tsb.movgest_ts_id
      and   r.movgest_ts_a_id is null
      and   av.avav_id=r.avav_id
      and   tipo.avav_tipo_id=av.avav_tipo_id
      and   tipo.avav_tipo_code='AAM'
	  and   mb.data_cancellazione is null
	  and   mb.validita_fine is null
	  and   tsb.data_cancellazione is null
	  and   tsb.validita_fine is null
	  and   r.data_cancellazione is null
      and   r.validita_fine is null
      ),
      impNew as
      (select mnew.movgest_anno::integer, mnew.movgest_numero::integer,
              tsnew.movgest_ts_code::integer,
              tsnew.movgest_ts_tipo_id,
              mnew.movgest_id, tsnew.movgest_ts_id
       from siac_t_movgest mnew, siac_t_movgest_ts tsnew, siac_r_movgest_ts_stato rs
       where mnew.bil_id=bilancioId
       and   mnew.movgest_tipo_id=movGestTipoIId
       and   mnew.movgest_anno::integer>=annoBilancio
       and   tsnew.movgest_id=mnew.movgest_id
       and   rs.movgest_ts_id=tsnew.movgest_ts_id
       and   rs.movgest_stato_id!=movgestStatoAId
       and   rs.data_cancellazione is null
       and   rs.validita_fine is null
       and   mnew.data_cancellazione is null
       and   mnew.validita_fine is null
       and   tsnew.data_cancellazione is null
       and   tsnew.validita_fine is null
      ),
      titoloNew as
      (
      	select rmov.movgest_id, cTitolo.classif_code::integer titolo_uscita,
               ( case when cTitolo.classif_code::integer in (1,4)  -- titolo 1 e 4 - FPVSC corrente
                      then 'FPVSC'
                      when cTitolo.classif_code::integer in (2,3)  -- titolo 2 e 3 - FPVCC in conto capitale
                      then 'FPVCC'
                      else null end ) tipo_avanzo
        from siac_t_bil_elem e, siac_d_bil_elem_tipo tipo,
             siac_r_bil_elem_class rc,siac_t_class cMacro, siac_d_class_tipo tipoMacro,
             siac_r_class_fam_tree rfam,
             siac_t_class cTitolo, siac_d_class_tipo tipoTitolo,
             siac_r_movgest_bil_elem rmov
        where tipo.ente_proprietario_id=enteProprietarioId
        and   tipo.elem_tipo_code='CAP-UG'
        and   e.elem_tipo_id=tipo.elem_tipo_id
        and   e.bil_id=bilancioId
        and   rc.elem_id=e.elem_id
        and   cMacro.classif_id=rc.classif_id
        and   tipoMacro.classif_tipo_id=cMacro.classif_tipo_id
        and   tipomacro.classif_tipo_code='MACROAGGREGATO'
        and   rfam.classif_id=cMacro.classif_id
        and   cTitolo.classif_id=rfam.classif_id_padre
        and   tipoTitolo.classif_tipo_id=cTitolo.classif_tipo_id
        and   tipoTitolo.classif_tipo_code='TITOLO_SPESA'
        and   rmov.elem_id=e.elem_id
        and   e.data_cancellazione is null
        and   e.validita_fine is null
        and   rc.data_cancellazione is null
        and   rc.validita_fine is null
        and   rfam.data_cancellazione is null
        and   rfam.validita_fine is null
        and   rmov.data_cancellazione is null
        and   rmov.validita_fine is null
      ),
      tipoAv as
      (
       select av.avav_id, tipoav.avav_tipo_code
       from siac_t_avanzovincolo av, siac_d_avanzovincolo_tipo tipoav
       where tipoav.ente_proprietario_id=enteProprietarioId
       and   av.avav_tipo_id=tipoav.avav_tipo_id
       and   tipoav.avav_tipo_code in ('FPVSC','FPVCC')
      )
      select faseBilElabId, 				-- fase_bil_elab_id
             vincPrec.movgest_ts_id, 		-- movgest_orig_ts_b_id
             vincPrec.movgest_ts_r_id,  	-- movgest_orig_ts_r_id
             bilancioPrecId, 				-- bil_orig_id
             vincPrec.movgest_ts_importo, 	-- importo_orig_vinc
             impNew.movgest_ts_id, 			-- movgest_ts_b_id
             vincPrec.movgest_ts_importo, 	-- importo_vinc
             tipoAv.avav_id,  				-- avav_id
             bilancioId, 					-- bil_id
       		 dataInizioVal,
	         loginOperazione,
	         enteProprietarioId
      from vincPrec, impNew, titoloNew, tipoAv
      where vincPrec.movgest_anno=impNew.movgest_anno
      and   vincPrec.movgest_numero=impNew.movgest_numero
      and   vincPrec.movgest_ts_code=impNew.movgest_ts_code
      and   vincPrec.movgest_ts_tipo_id=impNew.movgest_ts_tipo_id
      and   titoloNew.movgest_id=impNew.movgest_id
      and   tipoAv.avav_tipo_code=titoloNew.tipo_avanzo
      );

     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - FINE inserimenti - caso 2.a';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

	 strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - INIZIO inserimenti - caso 2.b';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;
     -- caso 2.b
     -- il movimento nel bilancio precedente presentava un legame ad
     -- un accertamento con anno < del nuovo bilancio:
     -- creare un legame nuovo bilancio del tipo FPV  per la stessa quota
     -- (la tipologia conto capitale o spesa corrente da determinare sulla base del titolo di spesa)
     -- titolo 1 e 4 - FPVSC corrente
     -- titolo 2 e 3 - FPVCC in conto capitale
     insert into fase_bil_t_gest_apertura_vincoli
     (fase_bil_elab_id,
      movgest_orig_ts_b_id,
      movgest_orig_ts_a_id,
      movgest_orig_ts_r_id,
      bil_orig_id,
      importo_orig_vinc,
      movgest_ts_b_id,
      importo_vinc,
	  avav_id,
      bil_id,
      validita_inizio,
      login_operazione,
      ente_proprietario_id
      )
      (
      with
      vincPrec as
      (
      select mb.movgest_anno::integer, mb.movgest_numero::integer,
             tsb.movgest_ts_code::integer,
             tsb.movgest_ts_tipo_id,
             mb.movgest_id, tsb.movgest_ts_id,
             ma.movgest_id movgest_a_id, tsa.movgest_ts_id movgest_ts_a_id,
             r.movgest_ts_r_id,
             r.movgest_ts_importo
      from siac_r_movgest_ts r,
           siac_t_movgest mb,siac_t_movgest_ts tsb ,
           siac_t_movgest ma,siac_t_movgest_ts tsa
      where mb.bil_id=bilancioPrecId
	  and   mb.movgest_tipo_id=movGestTipoIId
      and   mb.movgest_anno::INTEGER>=annoBilancio
	  and   tsb.movgest_id=mb.movgest_id
	  and   r.movgest_ts_b_id=tsb.movgest_ts_id
      and   tsa.movgest_ts_id=r.movgest_ts_a_id
      and   ma.movgest_id=tsa.movgest_id
      and   ma.movgest_tipo_id=movGestTipoAId
      and   ma.bil_id=bilancioPrecId
      and   ma.movgest_anno::INTEGER<annoBilancio
	  and   mb.data_cancellazione is null
	  and   mb.validita_fine is null
	  and   tsb.data_cancellazione is null
	  and   tsb.validita_fine is null
	  and   ma.data_cancellazione is null
	  and   ma.validita_fine is null
	  and   tsa.data_cancellazione is null
	  and   tsa.validita_fine is null
	  and   r.data_cancellazione is null
      and   r.validita_fine is null
      ),
      impNew as
      (select mnew.movgest_anno::integer, mnew.movgest_numero::integer,
              tsnew.movgest_ts_code::integer,
              tsnew.movgest_ts_tipo_id,
              mnew.movgest_id, tsnew.movgest_ts_id
       from siac_t_movgest mnew, siac_t_movgest_ts tsnew, siac_r_movgest_ts_stato rs
       where mnew.bil_id=bilancioId
       and   mnew.movgest_tipo_id=movGestTipoIId
       and   mnew.movgest_anno::integer>=annoBilancio
       and   tsnew.movgest_id=mnew.movgest_id
       and   rs.movgest_ts_id=tsnew.movgest_ts_id
       and   rs.movgest_stato_id!=movgestStatoAId
       and   rs.data_cancellazione is null
       and   rs.validita_fine is null
       and   mnew.data_cancellazione is null
       and   mnew.validita_fine is null
       and   tsnew.data_cancellazione is null
       and   tsnew.validita_fine is null
      ),
      titoloNew as
      (
      	select rmov.movgest_id, cTitolo.classif_code::integer titolo_uscita,
               ( case when cTitolo.classif_code::integer in (1,4)  -- titolo 1 e 4 - FPVSC corrente
                      then 'FPVSC'
                      when cTitolo.classif_code::integer in (2,3)  -- titolo 2 e 3 - FPVCC in conto capitale
                      then 'FPVCC'
                      else null end ) tipo_avanzo
        from siac_t_bil_elem e, siac_d_bil_elem_tipo tipo,
             siac_r_bil_elem_class rc,siac_t_class cMacro, siac_d_class_tipo tipoMacro,
             siac_r_class_fam_tree rfam,
             siac_t_class cTitolo, siac_d_class_tipo tipoTitolo,
             siac_r_movgest_bil_elem rmov
        where tipo.ente_proprietario_id=enteProprietarioId
        and   tipo.elem_tipo_code='CAP-UG'
        and   e.elem_tipo_id=tipo.elem_tipo_id
        and   e.bil_id=bilancioId
        and   rc.elem_id=e.elem_id
        and   cMacro.classif_id=rc.classif_id
        and   tipoMacro.classif_tipo_id=cMacro.classif_tipo_id
        and   tipomacro.classif_tipo_code='MACROAGGREGATO'
        and   rfam.classif_id=cMacro.classif_id
        and   cTitolo.classif_id=rfam.classif_id_padre
        and   tipoTitolo.classif_tipo_id=cTitolo.classif_tipo_id
        and   tipoTitolo.classif_tipo_code='TITOLO_SPESA'
        and   rmov.elem_id=e.elem_id
        and   e.data_cancellazione is null
        and   e.validita_fine is null
        and   rc.data_cancellazione is null
        and   rc.validita_fine is null
        and   rfam.data_cancellazione is null
        and   rfam.validita_fine is null
        and   rmov.data_cancellazione is null
        and   rmov.validita_fine is null
      ),
      tipoAv as
      (
       select av.avav_id, tipoav.avav_tipo_code
       from siac_t_avanzovincolo av, siac_d_avanzovincolo_tipo tipoav
       where tipoav.ente_proprietario_id=enteProprietarioId
       and   av.avav_tipo_id=tipoav.avav_tipo_id
       and   tipoav.avav_tipo_code in ('FPVSC','FPVCC')
      )
      select faseBilElabId, 				-- fase_bil_elab_id
             vincPrec.movgest_ts_id, 		-- movgest_orig_ts_b_id
             vincPrec.movgest_ts_a_id, 		-- movgest_orig_ts_a_id
             vincPrec.movgest_ts_r_id,  	-- movgest_orig_ts_r_id
             bilancioPrecId, 				-- bil_orig_id
             vincPrec.movgest_ts_importo, 	-- importo_orig_vinc
             impNew.movgest_ts_id, 			-- movgest_ts_b_id
             vincPrec.movgest_ts_importo, 	-- importo_vinc
             tipoAv.avav_id,  				-- avav_id
             bilancioId, 					-- bil_id
             dataInizioVal,
	         loginOperazione,
	         enteProprietarioId
      from vincPrec, impNew, titoloNew, tipoAv
      where vincPrec.movgest_anno=impNew.movgest_anno
      and   vincPrec.movgest_numero=impNew.movgest_numero
      and   vincPrec.movgest_ts_code=impNew.movgest_ts_code
      and   vincPrec.movgest_ts_tipo_id=impNew.movgest_ts_tipo_id
      and   titoloNew.movgest_id=impNew.movgest_id
      and   tipoAv.avav_tipo_code=titoloNew.tipo_avanzo
      );

     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - FINE inserimenti - caso 2.b';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;


     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - INIZIO inserimenti - caso 3';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     -- caso 3
	 -- il movimento nel bilancio precedente presentava un legame ad un accertamento di competenza/pluriennale rispetto al nuovo bilancio: ricreare lo stesso vincolo per la
	 --  quota cosi' come presente nel vecchio bilancio ( l'accertamento deve esistere nel nuovo bilancio ) movgest_ts_id_b e movgest_ts_id_a
	 insert into fase_bil_t_gest_apertura_vincoli
     (fase_bil_elab_id,
      movgest_orig_ts_b_id,
      movgest_orig_ts_a_id,
      movgest_orig_ts_r_id,
      bil_orig_id,
      importo_orig_vinc,
      movgest_ts_b_id,
      movgest_ts_a_id,
      importo_vinc,
	  avav_id,
      bil_id,
      validita_inizio,
      login_operazione,
      ente_proprietario_id
      )
      (
      with
      vincPrec as
      (
      select mb.movgest_anno::integer, mb.movgest_numero::integer,
             tsb.movgest_ts_code::integer,
             tsb.movgest_ts_tipo_id,
             mb.movgest_id, tsb.movgest_ts_id,
             ma.movgest_anno::integer movgest_anno_a, ma.movgest_numero::integer movgest_numero_a,
             tsa.movgest_ts_code::integer movgest_ts_code_a,
             tsa.movgest_ts_tipo_id movgest_ts_tipo_a_id,
             ma.movgest_id movgest_a_id, tsa.movgest_ts_id movgest_ts_a_id,
             r.movgest_ts_r_id,
             r.movgest_ts_importo,
             r.avav_id
      from siac_r_movgest_ts r,
           siac_t_movgest mb,siac_t_movgest_ts tsb ,
           siac_t_movgest ma,siac_t_movgest_ts tsa
      where mb.bil_id=bilancioPrecId
	  and   mb.movgest_tipo_id=movGestTipoIId
      and   mb.movgest_anno::INTEGER>=annoBilancio
	  and   tsb.movgest_id=mb.movgest_id
	  and   r.movgest_ts_b_id=tsb.movgest_ts_id
      and   tsa.movgest_ts_id=r.movgest_ts_a_id
      and   ma.movgest_id=tsa.movgest_id
      and   ma.movgest_tipo_id=movGestTipoAId
      and   ma.bil_id=bilancioPrecId
      and   ma.movgest_anno::INTEGER>=annoBilancio
	  and   mb.data_cancellazione is null
	  and   mb.validita_fine is null
	  and   tsb.data_cancellazione is null
	  and   tsb.validita_fine is null
	  and   ma.data_cancellazione is null
	  and   ma.validita_fine is null
	  and   tsa.data_cancellazione is null
	  and   tsa.validita_fine is null
	  and   r.data_cancellazione is null
      and   r.validita_fine is null
      ),
      impNew as
      (select mnew.movgest_anno::integer, mnew.movgest_numero::integer,
              tsnew.movgest_ts_code::integer,
              tsnew.movgest_ts_tipo_id,
              mnew.movgest_id, tsnew.movgest_ts_id
       from siac_t_movgest mnew, siac_t_movgest_ts tsnew, siac_r_movgest_ts_stato rs
       where mnew.bil_id=bilancioId
       and   mnew.movgest_tipo_id=movGestTipoIId
       and   mnew.movgest_anno::integer>=annoBilancio
       and   tsnew.movgest_id=mnew.movgest_id
       and   rs.movgest_ts_id=tsnew.movgest_ts_id
       and   rs.movgest_stato_id!=movgestStatoAId
       and   rs.data_cancellazione is null
       and   rs.validita_fine is null
       and   mnew.data_cancellazione is null
       and   mnew.validita_fine is null
       and   tsnew.data_cancellazione is null
       and   tsnew.validita_fine is null
      ),
      accNew as
      (select mnew.movgest_anno::integer, mnew.movgest_numero::integer,
              tsnew.movgest_ts_code::integer,
              tsnew.movgest_ts_tipo_id,
              mnew.movgest_id, tsnew.movgest_ts_id
       from siac_t_movgest mnew, siac_t_movgest_ts tsnew, siac_r_movgest_ts_stato rs
       where mnew.bil_id=bilancioId
       and   mnew.movgest_tipo_id=movGestTipoAId
       and   mnew.movgest_anno::integer>=annoBilancio
       and   tsnew.movgest_id=mnew.movgest_id
       and   rs.movgest_ts_id=tsnew.movgest_ts_id
       and   rs.movgest_stato_id!=movgestStatoAId
       and   rs.data_cancellazione is null
       and   rs.validita_fine is null
       and   mnew.data_cancellazione is null
       and   mnew.validita_fine is null
       and   tsnew.data_cancellazione is null
       and   tsnew.validita_fine is null
      )
      select faseBilElabId, 				-- fase_bil_elab_id
             vincPrec.movgest_ts_id, 		-- movgest_orig_ts_b_id
             vincPrec.movgest_ts_a_id, 		-- movgest_orig_ts_a_id
             vincPrec.movgest_ts_r_id,  	-- movgest_orig_ts_r_id
             bilancioPrecId, 				-- bil_orig_id
             vincPrec.movgest_ts_importo, 	-- importo_orig_vinc
             impNew.movgest_ts_id, 			-- movgest_ts_b_id
             accNew.movgest_ts_id,          -- movgest_ts_a_id
             vincPrec.movgest_ts_importo, 	-- importo_vinc
             vincPrec.avav_id,  			-- avav_id
             bilancioId, 					-- bil_id
       		 dataInizioVal,
	         loginOperazione,
	         enteProprietarioId
      from vincPrec, impNew, accNew
      where vincPrec.movgest_anno=impNew.movgest_anno
      and   vincPrec.movgest_numero=impNew.movgest_numero
      and   vincPrec.movgest_ts_code=impNew.movgest_ts_code
      and   vincPrec.movgest_ts_tipo_id=impNew.movgest_ts_tipo_id
      and   vincPrec.movgest_anno_a=accNew.movgest_anno
      and   vincPrec.movgest_numero_a=accNew.movgest_numero
      and   vincPrec.movgest_ts_code_a=accNew.movgest_ts_code
      and   vincPrec.movgest_ts_tipo_a_id=accNew.movgest_ts_tipo_id
      );

     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - FINE inserimenti - caso 3';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;




     strMessaggio:='Inserimento fase_bil_t_gest_apertura_vincoli - FINE inserimenti';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;


     codResult:=null;
	 strMessaggio:='Verifica inserimento dati in fase_bil_t_gest_apertura_vincoli.';
	 select  1 into codResult
     from fase_bil_t_gest_apertura_vincoli vinc
     where vinc.fase_bil_elab_id=faseBilElabId
     and   vinc.data_cancellazione is null
     and   vinc.validita_fine is null;

     if codResult is null then
     	raise exception ' Nessun inserimento effettuato.';
     end if;


     strMessaggio:='Aggiornamento stato fase bilancio IN-1.';
     update fase_bil_t_elaborazione fase
     set fase_bil_elab_esito='IN-1',
         fase_bil_elab_esito_msg='ELABORAZIONE FASE BILANCIO '||APE_GEST_VINCOLI||' IN CORSO IN-1.POPOLA VINCOLI.'
     where fase.fase_bil_elab_id=faseBilElabId;


     faseBilElabRetId:=faseBilElabId;
     codiceRisultato:=0;
     messaggioRisultato:=strMessaggioFinale||' FINE';
     return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_apertura_vincoli_elabora(
  enteProprietarioId     integer,
  annoBilancio           integer,
  faseBilElabId          integer,
  loginOperazione        varchar,
  dataElaborazione       timestamp,
  out codiceRisultato    integer,
  out messaggioRisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio       VARCHAR(1500):='';
    strMessaggioTemp   VARCHAR(1000):='';
	strMessaggioFinale VARCHAR(1500):='';
	dataInizioVal      timestamp:=null;
	codResult          integer:=null;

    IMP_MOVGEST_TIPO  CONSTANT varchar:='I';
    ACC_MOVGEST_TIPO  CONSTANT varchar:='A';
    IMP_MOVGEST       CONSTANT varchar:='IMP';
    ACC_MOVGEST       CONSTANT varchar:='ACC';

    APE_GEST_VINCOLI    CONSTANT varchar:='APE_GEST_VINCOLI';

    bilancioPrecId    integer:=null;

BEGIN
    codiceRisultato:=null;
    messaggioRisultato:=null;

    dataInizioVal:= clock_timestamp();

    strMessaggioFinale:='Apertura bilancio gestione.Ribaltamento vincoli da Gestione precedente. Anno bilancio='
                        ||annoBilancio::varchar||'. ELABORA.';


    codResult:=null;
    strMessaggio:='Verifica stato fase_bil_t_elaborazione.';
    select 1  into codResult
    from fase_bil_t_elaborazione fase
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.fase_bil_elab_esito like 'IN-%'
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null;
    if codResult is null then
      raise exception ' Nessuna elaborazione in corso [IN-n].';
    end if;


    codResult:=null;
    strMessaggio:='Verifica esistenza movimenti da creare in fase_bil_t_gest_apertura_vincoli.';
    select 1 into codResult
    from fase_bil_t_gest_apertura_vincoli fase
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null;
    if codResult is null then
      raise exception ' Nessun  vincolo da creare.';
    end if;


	strMessaggio:='Inserimento LOG.';
    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggioFinale||' INIZIO.',clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;


    strMessaggio:='Lettura bilancioId e periodoId  per annoBilancio-1='||(annoBilancio-1)::varchar||'.';
    select bil.bil_id into strict bilancioPrecId
    from siac_t_bil bil, siac_t_periodo per
    where bil.ente_proprietario_id=enteProprietarioId
    and   per.periodo_id=bil.periodo_id
    and   per.anno::INTEGER=annoBilancio-1
    and   bil.data_cancellazione is null
    and   per.data_cancellazione is null;



    strMessaggio:='Verifica scarti per accertamento non esistente';
    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;

	update  fase_bil_t_gest_apertura_vincoli fase
    set    fl_elab='X',
           scarto_code='ACC',
           scarto_desc='ACCERTAMENTO NON ESISTENTE O NON VALIDO'
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.fl_elab='N'
    and   fase.movgest_ts_a_id is not null -- 06.12.2017 Sofia jira siac-5276
    and   not exists (select 1 from siac_t_movgest_ts ts, siac_r_movgest_ts_stato r, siac_d_movgest_stato stato
                      where ts.movgest_ts_id=fase.movgest_ts_a_id
                      and   r.movgest_ts_id=ts.movgest_ts_id
                      and   stato.movgest_stato_id=r.movgest_stato_id
                      and   stato.movgest_stato_code!='A'
                      and   r.data_cancellazione is null
                      and   r.validita_fine is null
                      and   ts.data_cancellazione is null
                      and   ts.validita_fine is null
                     )
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null;

    strMessaggio:='Verifica scarti per impegno non esistente';
    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;


	update  fase_bil_t_gest_apertura_vincoli fase
    set    fl_elab='X',
           scarto_code='IMP',
           scarto_desc='IMPEGNO NON ESISTENTE O NON VALIDO'
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.fl_elab='N'
    and   not exists (select 1 from siac_t_movgest_ts ts, siac_r_movgest_ts_stato r, siac_d_movgest_stato stato
                      where ts.movgest_ts_id=fase.movgest_ts_b_id
                      and   r.movgest_ts_id=ts.movgest_ts_id
                      and   stato.movgest_stato_id=r.movgest_stato_id
                      and   stato.movgest_stato_code!='A'
                      and   r.data_cancellazione is null
                      and   r.validita_fine is null
                      and   ts.data_cancellazione is null
                      and   ts.validita_fine is null
                     )
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null;

    strMessaggio:='Inserimento siac_r_movgest_ts. INIZIO.';
    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;

	insert into siac_r_movgest_ts
    (
     movgest_ts_a_id,
     movgest_ts_b_id,
     movgest_ts_importo,
     avav_id,
     validita_inizio,
     login_operazione,
     ente_proprietario_id
    )
    (select fase.movgest_ts_a_id,
            fase.movgest_ts_b_id,
            fase.importo_vinc,
            fase.avav_id, -- 06.12.2017 Sofia jira siac-5276
            dataInizioVal,
            loginOperazione||'_APE_VINC@'||fase.fase_bil_gest_ape_vinc_id::varchar, -- 06.12.2017 Sofia jira siac-5276
            enteProprietarioId
     from fase_bil_t_gest_apertura_vincoli fase
     where fase.fase_bil_elab_id=faseBilElabId
     and   fase.fl_elab='N'
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null
    );




    strMessaggio:='Aggiornamento fase_bil_t_gest_apertura_vincoli.';
    update  fase_bil_t_gest_apertura_vincoli fase
    set    movgest_ts_r_id=r.movgest_ts_r_id,
           fl_elab='S'
    from  siac_r_movgest_ts r
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.fl_elab='N'
    and   r.ente_proprietario_id=fase.ente_proprietario_id
    -- 06.12.2017 Sofia jira siac-5276
    and   r.login_operazione like '%_APE_VINC@%'
    and   substring(r.login_operazione , position('@' in r.login_operazione)+1)::integer=fase.fase_bil_gest_ape_vinc_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null;


    strMessaggio:='Inserimento siac_r_movgest_ts. INIZIO.';
    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;

    strMessaggio:='Aggiornamento stato fase bilancio IN-2.';
    update fase_bil_t_elaborazione
    set fase_bil_elab_esito='IN-2',
        fase_bil_elab_esito_msg='ELABORAZIONE FASE BILANCIO '||APE_GEST_VINCOLI||' IN CORSO IN-2.'
    where fase_bil_elab_id=faseBilElabId;

    codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggioFinale||' FINE.',clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;


    codiceRisultato:=0;
    messaggioRisultato:=strMessaggioFinale||' FINE';
    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,coalesce(strMessaggio,'');
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,coalesce(strMessaggio,''),SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_apertura_vincoli
(
  annobilancio           integer,
  enteproprietarioid     integer,
  aggiorna_utilizzabile boolean,
  loginoperazione        varchar,
  dataelaborazione       timestamp,
  out faseBilElabIdRet   integer,
  out codicerisultato    integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';

	codResult         integer:=null;
    faseBilElabId     integer:=null;

    strRec record;

	APE_GEST_VINCOLI    CONSTANT varchar:='APE_GEST_VINCOLI';

BEGIN
	messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;


	strMessaggioFinale:='Apertura bilancio gestione per Anno bilancio='||annoBilancio::varchar||
                        '. Ribaltamento vincoli - residui e pluriennali.';

	strmessaggio:='Popola.';
    select * into strRec
    from fnc_fasi_bil_gest_apertura_vincoli_popola
    (enteproprietarioid,
     annobilancio,
     loginoperazione,
	 dataelaborazione
    );
    if strRec.codiceRisultato=0 then
    	faseBilElabId:=strRec.faseBilElabRetId;
    else
        strMessaggio:=strRec.messaggioRisultato;
        codiceRisultato:=strRec.codiceRisultato;
    end if;


    if codiceRisultato=0 and faseBilElabId is not null then
        strMessaggio:='Elabora.';
    	select * into strRec
	    from fnc_fasi_bil_gest_apertura_vincoli_elabora
        (enteProprietarioId,
	     annoBilancio,
	     faseBilElabId,
	     loginOperazione,
	     dataElaborazione
        );
        if strRec.codiceRisultato!=0 then
	        strMessaggio:=strRec.messaggioRisultato;
    	    codiceRisultato:=strRec.codiceRisultato;
	    end if;
    end if;

    -- 06.12.2017 Sofia jira siac-5276
    /*if codiceRisultato=0
       and faseBilElabId is not null
       and aggiorna_utilizzabile=true then
        strMessaggio:='Aggiorna Utilizzabile.';
        raise notice '%',strMessaggio;
    	select * into strRec
        from fnc_siac_aggiorna_utilizzabile_acc
        (enteProprietarioId,
	     annoBilancio,
	     loginOperazione,
	     dataElaborazione
        );
        if strRec.codiceRisultato!=0 then
	        strMessaggio:=strRec.messaggioRisultato;
    	    codiceRisultato:=strRec.codiceRisultato;
	    end if;
    else
            raise notice 'Non aggiorna utilizzabile.';
    end if;*/

    if codiceRisultato=0 and faseBilElabId is not null then
	   strMessaggio:='Aggiornamento stato fase bilancio OK.';
       insert into fase_bil_t_elaborazione_log
	   (fase_bil_elab_id,fase_bil_elab_log_operazione,
        validita_inizio, login_operazione, ente_proprietario_id
	   )
	   values
       (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
	   returning fase_bil_elab_log_id into codResult;

	   if codResult is null then
    	 	raise exception ' Errore in inserimento LOG.';
	   end if;

       update fase_bil_t_elaborazione
       set fase_bil_elab_esito='OK',
           fase_bil_elab_esito_msg='ELABORAZIONE FASE BILANCIO '||APE_GEST_VINCOLI||'TERMINATA CON SUCCESSO.'
       where fase_bil_elab_id=faseBilElabId;

       insert into fase_bil_t_elaborazione_log
	   (fase_bil_elab_id,fase_bil_elab_log_operazione,
        validita_inizio, login_operazione, ente_proprietario_id
	   )
	   values
       (faseBilElabId,strMessaggioFinale||' FINE.',clock_timestamp(),loginOperazione,enteProprietarioId)
	   returning fase_bil_elab_log_id into codResult;

	   if codResult is null then
    	 	raise exception ' Errore in inserimento LOG.';
	   end if;

    end if;

    if codiceRisultato=0 then
    	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
        faseBilElabIdRet:=faseBilElabId;
    else messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 1500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 1000) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 1500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 1000) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

-- vincoli tra impegni-accertamenti - inizio

-- bilancio gestione - inizio

CREATE OR replace FUNCTION fnc_fasi_bil_provv_apertura_struttura ( annobilancio      INTEGER,
                                                                  euelemtipo         VARCHAR,
                                                                  bilelemgesttipo    VARCHAR,
                                                                  checkgest          BOOLEAN, -- TRUE: il dato provvisorio esistente viene aggiornato al dato di gestione prec, FALSE il dato provvisorio esistente non viene aggiornato.
                                                                  enteproprietarioid INTEGER,
                                                                  loginoperazione    VARCHAR,
                                                                  dataelaborazione TIMESTAMP,
                                                                  OUT fasebilelabidret   INTEGER,
                                                                  OUT codicerisultato    INTEGER,
                                                                  OUT messaggiorisultato VARCHAR )
returns RECORD
AS
  $body$
  DECLARE
    strmessaggio       VARCHAR(1500):='';
    strmessaggiofinale VARCHAR(1500):='';
    -- tipo periodo annuale
    sy_per_tipo CONSTANT VARCHAR:='SY';
    -- tipo anno ordinario annuale
    bil_ord_tipo     CONSTANT VARCHAR:='BIL_ORD';
    provvisorio_fase CONSTANT VARCHAR:='E';
    elembil RECORD;
    -- CLASSIFICATORI
    cl_macroaggregato         CONSTANT VARCHAR :='MACROAGGREGATO';
    cl_programma              CONSTANT VARCHAR :='PROGRAMMA';
    cl_categoria              CONSTANT VARCHAR :='CATEGORIA';
    cl_cdc                    CONSTANT VARCHAR :='CDC';
    cl_cdr                    CONSTANT VARCHAR :='CDR';
    cl_ricorrente_spesa       CONSTANT VARCHAR:='RICORRENTE_SPESA';
    cl_ricorrente_entrata     CONSTANT VARCHAR:='RICORRENTE_ENTRATA';
    cl_transazione_ue_spesa   CONSTANT VARCHAR:='TRANSAZIONE_UE_SPESA';
    cl_transazione_ue_entrata CONSTANT VARCHAR:='TRANSAZIONE_UE_ENTRATA';
    cl_pdc_fin_quarto         CONSTANT VARCHAR :='PDC_IV';
    cl_pdc_fin_quinto         CONSTANT VARCHAR :='PDC_V';
    cl_cofog                  CONSTANT VARCHAR :='GRUPPO_COFOG';
    cl_siope_spesa_terzo      CONSTANT VARCHAR:='SIOPE_SPESA_I';
    cl_siope_entrata_terzo    CONSTANT VARCHAR:='SIOPE_ENTRATA_I';
    tipo_elab_p               CONSTANT VARCHAR :='P'; -- previsione
    tipo_elab_g               CONSTANT VARCHAR :='G'; -- gestione
    tipo_elem_eu              CONSTANT VARCHAR:='U';
    ape_prov_da_gest          CONSTANT VARCHAR:='APE_PROV';
    macroaggrtipoid           INTEGER:=NULL;
    programmatipoid           INTEGER:=NULL;
    categoriatipoid           INTEGER:=NULL;
    cdctipoid                 INTEGER:=NULL;
    cdrtipoid                 INTEGER:=NULL;
    ricorrentespesaid         INTEGER:=NULL;
    transazioneuespesaid      INTEGER:=NULL;
    ricorrenteentrataid       INTEGER:=NULL;
    transazioneueentrataid    INTEGER:=NULL;
    pdcfinivid                INTEGER:=NULL;
    pdcfinvid                 INTEGER:=NULL;
    cofogtipoid               INTEGER:=NULL;
    siopespesatipoid          INTEGER:=NULL;
    siopeentratatipoid        INTEGER:=NULL;
    bilelemgesttipoid         INTEGER:=NULL;
    bilelemidret              INTEGER:=NULL;
    bilancioid                INTEGER:=NULL;
    periodoid                 INTEGER:=NULL;
    bilancioprecid            INTEGER:=NULL;
    periodoprecid             INTEGER:=NULL;
    codresult                 INTEGER:=NULL;
    datainizioval timestamp:=NULL;
    fasebilelabid    INTEGER:=NULL;
    categoria_std    CONSTANT VARCHAR := 'STD';
    categoriacapcode VARCHAR :=NULL;
    -- 04.11.2016 Anto JIRA-SIAC-4161
    bilelemstatoan CONSTANT VARCHAR:='AN';
    -- 04.11.2016 Anto JIRA-SIAC-4161
    bilelemstatoanid INTEGER:=NULL;
    -- Anto JIRA-SIAC-4167 15.11.2016
    datainiziovalclass timestamp:=NULL;
    datafinevalclass timestamp:=NULL;
    _row_count INTEGER:=0;

    v_dataprimogiornoanno timestamp:=NULL;

  BEGIN
    -- Sofia JIRA-SIAC-4167 15.11.2016
    datainiziovalclass:= clock_timestamp();
    datafinevalclass:= (annobilancio
    ||'-01-01')::timestamp;

     v_dataprimogiornoanno:= (annobilancio
    ||'-01-01')::timestamp;

    messaggiorisultato:='';
    codicerisultato:=0;
    fasebilelabidret:=0;
    datainizioval:= clock_timestamp();
    strmessaggiofinale:='Apertura bilancio provvisorio.Creazione struttura Provvisorio '
    ||bilelemgesttipo
    ||' da Gestione precedente '
    ||bilelemgesttipo
    || '.Anno bilancio='
    ||annobilancio::VARCHAR
    ||'.';
    -- inserimento fase_bil_t_elaborazione
    strmessaggio:='Inserimento fase elaborazione [fase_bil_t_elaborazione].';
    INSERT INTO fase_bil_t_elaborazione
                (
                            fase_bil_elab_esito,
                            fase_bil_elab_esito_msg,
                            fase_bil_elab_tipo_id,
                            ente_proprietario_id,
                            validita_inizio,
                            login_operazione
                )
                (
                       SELECT 'IN',
                              'ELABORAZIONE FASE BILANCIO '
                                     ||ape_prov_da_gest
                                     ||' IN CORSO : CREAZIONE STRUTTURE.',
                              tipo.fase_bil_elab_tipo_id,
                              enteproprietarioid,
                              datainizioval,
                              loginoperazione
                       FROM   fase_bil_d_elaborazione_tipo tipo
                       WHERE  tipo.ente_proprietario_id=enteproprietarioid
                       AND    tipo.fase_bil_elab_tipo_code=ape_prov_da_gest
                       AND    tipo.data_cancellazione IS NULL
                       AND    tipo.validita_fine IS NULL)
    returning   fase_bil_elab_id
    INTO        fasebilelabid;

    IF fasebilelabid IS NULL THEN
      RAISE
    EXCEPTION
      ' Inserimento non effettuato.';
    END IF;
    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    -- 04.11.2016 Anto JIRA-SIAC-4161
    strmessaggio:='Lettura bilElemStatoAN  per tipo='
    ||bilelemstatoan
    ||'.';
    SELECT tipo.elem_stato_id
    INTO   strict bilelemstatoanid
    FROM   siac_d_bil_elem_stato tipo
    WHERE  tipo.elem_stato_code=bilelemstatoan
    AND    tipo.ente_proprietario_id=enteproprietarioid
    AND    tipo.data_cancellazione IS NULL
    AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
    AND    (
                  date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
           OR     tipo.validita_fine IS NULL);

    strmessaggio:='Lettura bilElemGestTipo  per tipo='
    ||bilelemgesttipo
    ||'.';
    SELECT tipo.elem_tipo_id
    INTO   strict bilelemgesttipoid
    FROM   siac_d_bil_elem_tipo tipo
    WHERE  tipo.elem_tipo_code=bilelemgesttipo
    AND    tipo.ente_proprietario_id=enteproprietarioid
    AND    tipo.data_cancellazione IS NULL
    AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
    AND    (
                  date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
           OR     tipo.validita_fine IS NULL);

    strmessaggio:='Lettura cdcTipoId  per classif='
    ||cl_cdc
    ||'.';
    SELECT tipo.classif_tipo_id
    INTO   strict cdctipoid
    FROM   siac_d_class_tipo tipo
    WHERE  tipo.ente_proprietario_id=enteproprietarioid
    AND    tipo.classif_tipo_code=cl_cdc
    AND    tipo.data_cancellazione IS NULL
    AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
    AND    (
                  date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
           OR     tipo.validita_fine IS NULL);

    strmessaggio:='Lettura cdcTipoId  per classif='
    ||cl_cdr
    ||'.';
    SELECT tipo.classif_tipo_id
    INTO   strict cdrtipoid
    FROM   siac_d_class_tipo tipo
    WHERE  tipo.ente_proprietario_id=enteproprietarioid
    AND    tipo.classif_tipo_code=cl_cdr
    AND    tipo.data_cancellazione IS NULL
    AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
    AND    (
                  date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
           OR     tipo.validita_fine IS NULL);

    strmessaggio:='Lettura pdcFinIVId  per classif='
    ||cl_pdc_fin_quarto
    ||'.';
    SELECT tipo.classif_tipo_id
    INTO   strict pdcfinivid
    FROM   siac_d_class_tipo tipo
    WHERE  tipo.ente_proprietario_id=enteproprietarioid
    AND    tipo.classif_tipo_code=cl_pdc_fin_quarto
    AND    tipo.data_cancellazione IS NULL
    AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
    AND    (
                  date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
           OR     tipo.validita_fine IS NULL);

    strmessaggio:='Lettura pdcFinVId  per classif='
    ||cl_pdc_fin_quinto
    ||'.';
    SELECT tipo.classif_tipo_id
    INTO   strict pdcfinvid
    FROM   siac_d_class_tipo tipo
    WHERE  tipo.ente_proprietario_id=enteproprietarioid
    AND    tipo.classif_tipo_code=cl_pdc_fin_quinto
    AND    tipo.data_cancellazione IS NULL
    AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
    AND    (
                  date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
           OR     tipo.validita_fine IS NULL);

    IF euelemtipo=tipo_elem_eu THEN
      strmessaggio:='Lettura macroAggrTipoId  per classif='
      ||cl_macroaggregato
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict macroaggrtipoid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_macroaggregato
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura programmaTipoId  per classif='
      ||cl_programma
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict programmatipoid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_programma
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura ricorrenteSpesaId  per classif='
      ||cl_ricorrente_spesa
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict ricorrentespesaid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_ricorrente_spesa
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura transazioneUeSpesaId  per classif='
      ||cl_transazione_ue_spesa
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict transazioneuespesaid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_transazione_ue_spesa
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura cofogTipoId  per classif='
      ||cl_cofog
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict cofogtipoid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_cofog
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura siopeSpesaTipoId  per classif='
      ||cl_siope_spesa_terzo
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict siopespesatipoid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_siope_spesa_terzo
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

    ELSE
      strmessaggio:='Lettura categoriaTipoId  per classif='
      ||cl_categoria
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict categoriatipoid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_categoria
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura ricorrenteEntrataId  per classif='
      ||cl_ricorrente_entrata
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict ricorrenteentrataid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_ricorrente_entrata
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura transazioneUeEntrataId  per classif='
      ||cl_transazione_ue_entrata
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict transazioneueentrataid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_transazione_ue_entrata
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

      strmessaggio:='Lettura siopeEntrataTipoId  per classif='
      ||cl_siope_entrata_terzo
      ||'.';
      SELECT tipo.classif_tipo_id
      INTO   strict siopeentratatipoid
      FROM   siac_d_class_tipo tipo
      WHERE  tipo.ente_proprietario_id=enteproprietarioid
      AND    tipo.classif_tipo_code=cl_siope_entrata_terzo
      AND    tipo.data_cancellazione IS NULL
      AND    date_trunc('day',dataelaborazione)>=date_trunc('day',tipo.validita_inizio)
      AND    (
                    date_trunc('day',dataelaborazione)<=date_trunc('day',tipo.validita_fine)
             OR     tipo.validita_fine IS NULL);

    END IF;
    -- fine lettura classificatori Tipo Id
    strmessaggio:='Inserimento LOG per lettura classificatori tipo.';
    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    strmessaggio:='Inserimento bilancio  per annoBilancio='
    ||annobilancio::VARCHAR
    ||'.';
    INSERT INTO siac_t_bil
                (
                            bil_code,
                            bil_desc,
                            bil_tipo_id,
                            periodo_id,
                            validita_inizio,
                            ente_proprietario_id,
                            login_operazione
                )
                (
                       SELECT 'BIL_'
                                     ||annobilancio::VARCHAR,
                              'Bilancio '
                                     ||annobilancio::VARCHAR,
                              btipo.bil_tipo_id,
                              per.periodo_id,
                              datainizioval,
                              per.ente_proprietario_id,
                              loginoperazione
                       FROM   siac_t_periodo per ,
                              siac_d_periodo_tipo tipo,
                              siac_d_bil_tipo btipo
                       WHERE  per.ente_proprietario_id=enteproprietarioid
                       AND    per.anno::INTEGER=annobilancio
                       AND    tipo.periodo_tipo_id=per.periodo_tipo_id
                       AND    tipo.periodo_tipo_code=sy_per_tipo
                       AND    btipo.ente_proprietario_id=per.ente_proprietario_id
                       AND    btipo.bil_tipo_code=bil_ord_tipo
                       AND    per.data_cancellazione IS NULL
                       AND    NOT EXISTS
                              (
                                     SELECT 1
                                     FROM   siac_t_bil bil
                                     WHERE  bil.ente_proprietario_id=per.ente_proprietario_id
                                     AND    bil.bil_tipo_id=btipo.bil_tipo_id
                                     AND    bil.periodo_id=per.periodo_id
                                     AND    bil.data_cancellazione IS NULL));

    strmessaggio:='Inserimento periodo  per annoBilancio+2='
    ||(annobilancio+2)::VARCHAR
    ||'.';
    INSERT INTO siac_t_periodo
                (
                            periodo_code,
                            periodo_desc,
                            data_inizio,
                            data_fine,
                            validita_inizio,
                            periodo_tipo_id,
                            anno,
                            ente_proprietario_id,
                            login_operazione
                )
                (
                       SELECT 'anno'
                                     ||(annobilancio+2)::VARCHAR,
                              'anno'
                                     ||(annobilancio+2)::VARCHAR,
                              ((annobilancio+2)::VARCHAR
                                     ||'-01-01')::timestamp,
                              ((annobilancio+2)::VARCHAR
                                     ||'-12-31')::timestamp,
                              datainizioval,
                              tipo.periodo_tipo_id,
                              (annobilancio+2)::VARCHAR,
                              tipo.ente_proprietario_id,
                              loginoperazione
                       FROM   siac_d_periodo_tipo tipo
                       WHERE  tipo.ente_proprietario_id=enteproprietarioid
                       AND    tipo.periodo_tipo_code=sy_per_tipo
                       AND    NOT EXISTS
                              (
                                     SELECT 1
                                     FROM   siac_t_periodo per1
                                     WHERE  per1.periodo_tipo_id=tipo.periodo_tipo_id
                                     AND    per1.anno::INTEGER=annobilancio+2
                                     AND    per1.data_cancellazione IS NULL));

    codresult:=NULL;
    strmessaggio:='Inserimento annoBilancio='
    ||annobilancio::VARCHAR
    ||' periodo per annoCompetenza='
    ||(annobilancio+2)::VARCHAR
    ||'.';
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    strmessaggio:='Lettura bilancioId e periodoId  per annoBilancio='
    ||annobilancio::VARCHAR
    ||'.';
    SELECT bil.bil_id ,
           per.periodo_id
    INTO   strict bilancioid,
           periodoid
    FROM   siac_t_bil bil,
           siac_t_periodo per
    WHERE  bil.ente_proprietario_id=enteproprietarioid
    AND    per.periodo_id=bil.periodo_id
    AND    per.anno::INTEGER=annobilancio
    AND    bil.data_cancellazione IS NULL
    AND    per.data_cancellazione IS NULL;

    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    strmessaggio:='Cancellazione fase tipo diversa da '
    ||provvisorio_fase
    ||' per bilancio annoBilancio='
    ||annobilancio::VARCHAR
    ||'.';
    DELETE
    FROM   siac_r_bil_fase_operativa r
    WHERE  r.ente_proprietario_id=enteproprietarioid
    AND    r.data_cancellazione IS NULL
    AND    r.validita_fine IS NULL
    AND    r.bil_id=bilancioid
    AND    EXISTS
           (
                  SELECT 1
                  FROM   siac_d_fase_operativa d
                  WHERE  d.fase_operativa_id=r.fase_operativa_id
                  AND    d.fase_operativa_code!=provvisorio_fase);

    strmessaggio:='Inserimento fase tipo='
    ||provvisorio_fase
    ||' per bilancio annoBilancio='
    ||annobilancio::VARCHAR
    ||'.';
    INSERT INTO siac_r_bil_fase_operativa
                (
                            bil_id,
                            fase_operativa_id,
                            validita_inizio,
                            ente_proprietario_id,
                            login_operazione
                )
                (
                       SELECT bilancioid,
                              f.fase_operativa_id,
                              datainizioval,
                              f.ente_proprietario_id,
                              loginoperazione
                       FROM   siac_d_fase_operativa f
                       WHERE  f.ente_proprietario_id=enteproprietarioid
                       AND    f.fase_operativa_code=provvisorio_fase
                       AND    NOT EXISTS
                              (
                                     SELECT 1
                                     FROM   siac_r_bil_fase_operativa r
                                     WHERE  r.bil_id=bilancioid
                                            --and    r.fase_operativa_id=f.fase_operativa_id
                                     AND    r.data_cancellazione IS NULL));

    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    strmessaggio:='Lettura bilancioId e periodoId  per annoBilancio-1='
    ||(annobilancio-1)::VARCHAR
    ||'.';
    SELECT bil.bil_id ,
           per.periodo_id
    INTO   strict bilancioprecid,
           periodoprecid
    FROM   siac_t_bil bil,
           siac_t_periodo per
    WHERE  bil.ente_proprietario_id=enteproprietarioid
    AND    per.periodo_id=bil.periodo_id
    AND    per.anno::INTEGER=annobilancio-1
    AND    per.data_cancellazione IS NULL;

    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    -- capitoli gestione provvisoria nuovi non esistenti in gestione corrente
    strmessaggio:='Popolamento fase_bil_t_gest_apertura_provv.Provvisorio nuovo con gestione eq anno precedente. Non esistenti in gestione corrente.';
    INSERT INTO fase_bil_t_gest_apertura_provv
                (
                            elem_id,
                            elem_code,
                            elem_code2,
                            elem_code3,
                            bil_id,
                            fase_bil_elab_id,
                            ente_proprietario_id,
                            validita_inizio,
                            login_operazione
                )
                (
                         SELECT   gest.elem_id,
                                  gest.elem_code,
                                  gest.elem_code2,
                                  gest.elem_code3,
                                  bilancioid,
                                  fasebilelabid,
                                  gest.ente_proprietario_id,
                                  datainizioval,
                                  loginoperazione
                         FROM     siac_t_bil_elem gest
                         WHERE    gest.ente_proprietario_id=enteproprietarioid
                         AND      gest.elem_tipo_id=bilelemgesttipoid
                         AND      gest.bil_id=bilancioprecid
                         AND      gest.data_cancellazione IS NULL
                         AND      date_trunc('day',dataelaborazione)>=date_trunc('day',gest.validita_inizio)
                         AND      (
                                           date_trunc('day',dataelaborazione)<=date_trunc('day',gest.validita_fine)
                                  OR       gest.validita_fine IS NULL)
                         AND      EXISTS
                                  (
                                         SELECT 1
                                         FROM   siac_r_bil_elem_stato rstato -- 04.11.2016 Anto JIRA-SIAC-4161
                                         WHERE  rstato.elem_id=gest.elem_id
                                         AND    rstato.elem_stato_id!=bilelemstatoanid
                                         AND    rstato.data_cancellazione IS NULL
                                         AND    rstato.validita_fine isnull )
                         AND      NOT EXISTS
                                  (
                                           SELECT   1
                                           FROM     siac_t_bil_elem gestcorr
                                           WHERE    gestcorr.ente_proprietario_id=gest.ente_proprietario_id
                                           AND      gestcorr.bil_id=bilancioid
                                           AND      gestcorr.elem_tipo_id=gest.elem_tipo_id
                                           AND      gestcorr.elem_code=gest.elem_code
                                           AND      gestcorr.elem_code2=gest.elem_code2
                                           AND      gestcorr.elem_code3=gest.elem_code3
                                           AND      EXISTS
                                                    (
                                                           SELECT 1
                                                           FROM   siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                                                           WHERE  rstato.elem_id=gestcorr.elem_id
                                                           AND    rstato.elem_stato_id!=bilelemstatoanid
                                                           AND    rstato.data_cancellazione IS NULL
                                                           AND    rstato.validita_fine isnull )
                                           AND      gestcorr.data_cancellazione IS NULL
                                           AND      date_trunc('day',dataelaborazione)>=date_trunc('day',gestcorr.validita_inizio)
                                           AND      (
                                                             date_trunc('day',dataelaborazione)<=date_trunc('day',gestcorr.validita_fine)
                                                    OR       gestcorr.validita_fine IS NULL)
                                           ORDER BY gestcorr.elem_id limit 1 )
                         ORDER BY gest.elem_code:: INTEGER,
                                  gest.elem_code2::INTEGER,
                                  gest.elem_code3 );

    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    -- verifica apertura con gestione corrente pre-esistente ( rielaborazione )
    IF checkgest=TRUE THEN
      -- capitoli gestione corrente esistenti con gestione eq anno precendente esistente - da aggiornare
      strmessaggio:='Popolamento fase_bil_t_gest_apertura_provv.Provvisorio esistente con gestione eq anno precedente.';
      INSERT INTO fase_bil_t_gest_apertura_provv
                  (
                              elem_id,
                              elem_code,
                              elem_code2,
                              elem_code3,
                              elem_prov_id,
                              bil_id,
                              fase_bil_elab_id,
                              ente_proprietario_id,
                              validita_inizio,
                              login_operazione
                  )
                  (
                           SELECT   gest.elem_id,
                                    gest.elem_code,
                                    gest.elem_code2,
                                    gest.elem_code3,
                                    gestcorr.elem_id,
                                    bilancioid,
                                    fasebilelabid,
                                    enteproprietarioid,
                                    datainizioval,
                                    loginoperazione
                           FROM     siac_t_bil_elem gest,
                                    siac_t_bil_elem gestcorr
                           WHERE    gest.ente_proprietario_id=enteproprietarioid
                           AND      gest.elem_tipo_id=bilelemgesttipoid
                           AND      gest.bil_id=bilancioprecid
                           AND      gestcorr.ente_proprietario_id=gest.ente_proprietario_id
                           AND      gestcorr.bil_id=bilancioid
                           AND      gestcorr.elem_tipo_id=gest.elem_tipo_id
                           AND      gestcorr.elem_code=gest.elem_code
                           AND      gestcorr.elem_code2=gest.elem_code2
                           AND      gestcorr.elem_code3=gest.elem_code3
                           AND      gest.data_cancellazione IS NULL
                           AND      date_trunc('day',dataelaborazione)>=date_trunc('day',gest.validita_inizio)
                           AND      (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',gest.validita_fine)
                                    OR       gest.validita_fine IS NULL)
                           AND      gestcorr.data_cancellazione IS NULL
                           AND      date_trunc('day',dataelaborazione)>=date_trunc('day',gestcorr.validita_inizio)
                           AND      (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',gestcorr.validita_fine)
                                    OR       gestcorr.validita_fine IS NULL)
                           AND      EXISTS
                                    (
                                           SELECT 1
                                           FROM   siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                                           WHERE  rstato.elem_id=gestcorr.elem_id
                                           AND    rstato.elem_stato_id!=bilelemstatoanid
                                           AND    rstato.data_cancellazione IS NULL
                                           AND    rstato.validita_fine isnull )
                           AND      EXISTS
                                    (
                                           SELECT 1
                                           FROM   siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                                           WHERE  rstato.elem_id=gest.elem_id
                                           AND    rstato.elem_stato_id!=bilelemstatoanid
                                           AND    rstato.data_cancellazione IS NULL
                                           AND    rstato.validita_fine IS NULL )
                           ORDER BY gest.elem_code:: INTEGER,
                                    gest.elem_code2::INTEGER,
                                    gest.elem_code3 );

      codresult:=NULL;
      INSERT INTO fase_bil_t_elaborazione_log
                  (
                              fase_bil_elab_id,
                              fase_bil_elab_log_operazione,
                              validita_inizio,
                              login_operazione,
                              ente_proprietario_id
                  )
                  VALUES
                  (
                              fasebilelabid,
                              strmessaggio,
                              clock_timestamp(),
                              loginoperazione,
                              enteproprietarioid
                  )
      returning   fase_bil_elab_log_id
      INTO        codresult;

      IF codresult IS NULL THEN
        RAISE
      EXCEPTION
        ' Errore in inserimento LOG.';
      END IF;
      -- capitoli gestione corrente esistenti con gestione eq anno precendente non esistente - da aggiornare
      strmessaggio:='Popolamento fase_bil_t_gest_apertura_provv.Provvisorio esistente con gestione eq anno precedente non esistente.';
      INSERT INTO fase_bil_t_gest_apertura_provv
                  (
                              elem_prov_id,
                              elem_code,
                              elem_code2,
                              elem_code3,
                              bil_id,
                              fase_bil_elab_id,
                              ente_proprietario_id,
                              validita_inizio,
                              login_operazione
                  )
                  (
                           SELECT   gestcorr.elem_id,
                                    gestcorr.elem_code,
                                    gestcorr.elem_code2,
                                    gestcorr.elem_code3,
                                    bilancioid,
                                    fasebilelabid,
                                    enteproprietarioid,
                                    datainizioval,
                                    loginoperazione
                           FROM     siac_t_bil_elem gestcorr
                           WHERE    gestcorr.ente_proprietario_id=enteproprietarioid
                           AND      gestcorr.bil_id=bilancioid
                           AND      gestcorr.elem_tipo_id=bilelemgesttipoid
                           AND      gestcorr.data_cancellazione IS NULL
                           AND      date_trunc('day',dataelaborazione)>=date_trunc('day',gestcorr.validita_inizio)
                           AND      (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',gestcorr.validita_fine)
                                    OR       gestcorr.validita_fine IS NULL)
                           AND      EXISTS
                                    (
                                           SELECT 1
                                           FROM   siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                                           WHERE  rstato.elem_id=gestcorr.elem_id
                                           AND    rstato.elem_stato_id!=bilelemstatoanid
                                           AND    rstato.data_cancellazione IS NULL
                                           AND    rstato.validita_fine IS NULL )
                           AND      NOT EXISTS
                                    (
                                           SELECT 1
                                           FROM   siac_t_bil_elem gest
                                           WHERE  gest.ente_proprietario_id=gestcorr.ente_proprietario_id
                                           AND    gest.bil_id=bilancioprecid
                                           AND    gest.elem_tipo_id=gestcorr.elem_tipo_id
                                           AND    gest.elem_code=gestcorr.elem_code
                                           AND    gest.elem_code2=gestcorr.elem_code2
                                           AND    gest.elem_code3=gestcorr.elem_code3
                                           AND    gest.data_cancellazione IS NULL
                                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',gest.validita_inizio)
                                           AND    (
                                                         date_trunc('day',dataelaborazione)<=date_trunc('day',gest.validita_fine)
                                                  OR     gest.validita_fine IS NULL)
                                           AND    EXISTS
                                                  (
                                                         SELECT 1
                                                         FROM   siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                                                         WHERE  rstato.elem_id=gest.elem_id
                                                         AND    rstato.elem_stato_id!=bilelemstatoanid
                                                         AND    rstato.data_cancellazione IS NULL
                                                         AND    rstato.validita_fine IS NULL ))
                           ORDER BY gestcorr.elem_code:: INTEGER,
                                    gestcorr.elem_code2::INTEGER,
                                    gestcorr.elem_code3 );

      codresult:=NULL;
      INSERT INTO fase_bil_t_elaborazione_log
                  (
                              fase_bil_elab_id,
                              fase_bil_elab_log_operazione,
                              validita_inizio,
                              login_operazione,
                              ente_proprietario_id
                  )
                  VALUES
                  (
                              fasebilelabid,
                              strmessaggio,
                              clock_timestamp(),
                              loginoperazione,
                              enteproprietarioid
                  )
      returning   fase_bil_elab_log_id
      INTO        codresult;

      IF codresult IS NULL THEN
        RAISE
      EXCEPTION
        ' Errore in inserimento LOG.';
      END IF;
    END IF;
    codresult:=NULL;
    strmessaggio:='Popolamento fase_bil_t_gest_apertura_provv.Verifica esistenza capitoli di gestione da creare/aggiornare da gestione eq precedente.';
    SELECT   1
    INTO     codresult
    FROM     fase_bil_t_gest_apertura_provv fase
    WHERE    fase.ente_proprietario_id=enteproprietarioid
    AND      fase.bil_id=bilancioid
    AND      fase.fase_bil_elab_id=fasebilelabid
    AND      fase.data_cancellazione IS NULL
    AND      fase.validita_fine IS NULL
    ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

    IF codresult IS NOT NULL THEN
      -- inserimento nuove strutture
      -- capitoli gestione non esistenti da gestione eq anno precedente
      strmessaggio:='Inserimento nuove strutture per tipo='
      ||bilelemgesttipo
      ||'.';
      codresult:=NULL;
      INSERT INTO fase_bil_t_elaborazione_log
                  (
                              fase_bil_elab_id,
                              fase_bil_elab_log_operazione,
                              validita_inizio,
                              login_operazione,
                              ente_proprietario_id
                  )
                  VALUES
                  (
                              fasebilelabid,
                              strmessaggio,
                              clock_timestamp(),
                              loginoperazione,
                              enteproprietarioid
                  )
      returning   fase_bil_elab_log_id
      INTO        codresult;

      IF codresult IS NULL THEN
        RAISE
      EXCEPTION
        ' Errore in inserimento LOG.';
      END IF;
      FOR elembil IN
      (
               SELECT   elem_id,
                        elem_code,
                        elem_code2,
                        elem_code3
               FROM     fase_bil_t_gest_apertura_provv
               WHERE    ente_proprietario_id=enteproprietarioid
               AND      bil_id=bilancioid
               AND      elem_id IS NOT NULL
               AND      elem_prov_id IS NULL     -- non esistente in gestione corrente
               AND      elem_prov_new_id IS NULL -- non ancora elaborato con nuovo inserimento in gestione corrente
               AND      fase_bil_elab_id=fasebilelabid
               AND      data_cancellazione IS NULL
               AND      validita_fine IS NULL
               ORDER BY elem_code:: INTEGER,
                        elem_code2::INTEGER,
                        elem_code3
      )
      LOOP
        bilelemidret:=NULL;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_t_bil_elem.' ;
        -- siac_t_bil_elem
        INSERT INTO siac_t_bil_elem
                    (
                                elem_code,
                                elem_code2,
                                elem_code3,
                                elem_desc,
                                elem_desc2,
                                elem_tipo_id,
                                bil_id,
                                ordine,
                                livello,
                                validita_inizio ,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT gest.elem_code,
                                  gest.elem_code2,
                                  gest.elem_code3,
                                  gest.elem_desc,
                                  gest.elem_desc2,
                                  gest.elem_tipo_id,
                                  bilancioid,
                                  gest.ordine,
                                  gest.livello,
                                  datainizioval,
                                  gest.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_t_bil_elem gest
                           WHERE  gest.elem_id=elembil.elem_id)
        returning   elem_id
        INTO        bilelemidret;

        IF bilelemidret IS NULL THEN
          RAISE
        EXCEPTION
          ' Inserimento non effettuato.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_stato.' ;
        -- siac_r_bil_elem_stato
        strmessaggio:='Inserimento siac_r_bil_elem_stato.';
        INSERT INTO siac_r_bil_elem_stato
                    (
                                elem_id,
                                elem_stato_id,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT bilelemidret,
                                  stato.elem_stato_id,
                                  datainizioval,
                                  stato.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_stato stato
                           WHERE  stato.elem_id=elembil.elem_id
                           AND    stato.data_cancellazione IS NULL
                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',stato.validita_inizio)
                           AND    (
                                         date_trunc('day',dataelaborazione)<=date_trunc('day',stato.validita_fine)
                                  OR     stato.validita_fine IS NULL) )
        returning   bil_elem_stato_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Inserimento non effettuato.';
        END IF;
        codresult:=NULL;
        -- siac_r_bil_elem_categoria
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_categoria.' ;
        INSERT INTO siac_r_bil_elem_categoria
                    (
                                elem_id,
                                elem_cat_id,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT bilelemidret,
                                  cat.elem_cat_id,
                                  datainizioval,
                                  cat.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_categoria cat
                           WHERE  cat.elem_id=elembil.elem_id
                           AND    cat.data_cancellazione IS NULL
                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',cat.validita_inizio)
                           AND    (
                                         date_trunc('day',dataelaborazione)<=date_trunc('day',cat.validita_fine)
                                  OR     cat.validita_fine IS NULL) )
        returning   bil_elem_r_cat_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Inserimento non effettuato.';
        END IF;
        -- salvataggio della categoria per successivi controlli su classificatori obbligatori
        SELECT d.elem_cat_code
        INTO   categoriacapcode
        FROM   siac_r_bil_elem_categoria r,
               siac_d_bil_elem_categoria d
        WHERE  d.elem_cat_id=r.elem_cat_id
        AND    r.bil_elem_r_cat_id=codresult;

        codresult:=NULL;
        -- siac_r_bil_elem_attr
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_attr.' ;
        INSERT INTO siac_r_bil_elem_attr
                    (
                                elem_id,
                                attr_id,
                                tabella_id,
                                BOOLEAN,
                                percentuale,
                                testo,
                                numerico,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT bilelemidret,
                                  attr.attr_id,
                                  attr.tabella_id,
                                  attr.BOOLEAN,
                                  attr.percentuale,
                                  attr.testo,
                                  attr.numerico,
                                  datainizioval,
                                  attr.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_attr attr
                           WHERE  attr.elem_id=elembil.elem_id
                           AND    attr.data_cancellazione IS NULL
                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',attr.validita_inizio)
                           AND    (
                                         date_trunc('day',dataelaborazione)<=date_trunc('day',attr.validita_fine)
                                  OR     attr.validita_fine IS NULL) );

        codresult:=NULL;
        SELECT   1
        INTO     codresult
        FROM     siac_r_bil_elem_attr
        WHERE    elem_id=bilelemidret
        AND      data_cancellazione IS NULL
        AND      validita_fine IS NULL
        ORDER BY elem_id limit 1;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Nessun attributo inserito.';
        END IF;
        /* SIAC-5590
codResult:=null;
-- siac_r_vincolo_bil_elem
strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
'.Elemento di bilancio '||elemBil.elem_code||' '
||elemBil.elem_code2||' '
||elemBil.elem_code3||' : siac_r_vincolo_bil_elem.' ;
insert into siac_r_vincolo_bil_elem
( elem_id,vincolo_id, validita_inizio,ente_proprietario_id,login_operazione
)
(select bilElemIdRet, v.vincolo_id, dataInizioVal,v.ente_proprietario_id, loginOperazione
from siac_r_vincolo_bil_elem v
where v.elem_id=elemBil.elem_id
and   v.data_cancellazione is null
and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
);
codResult:=null;
strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
'.Elemento di bilancio '||elemBil.elem_code||' '
||elemBil.elem_code2||' '
||elemBil.elem_code3||' : siac_r_vincolo_bil_elem.Verifica inserimento.' ;
select  1  into codResult
from  siac_r_vincolo_bil_elem v
where v.elem_id=elemBil.elem_id
and   v.data_cancellazione is null
and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
and   not exists (select 1 from siac_r_vincolo_bil_elem v1
where v1.elem_id= bilElemIdRet
and   v1.data_cancellazione is null
and   date_trunc('day',dataElaborazione)>=date_trunc('day',v1.validita_inizio)
and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v1.validita_fine) or v1.validita_fine is null)
order by v1.elem_id
limit 1
)
order by v.elem_id
limit 1;
if codResult is not null then raise exception ' Non effettuato.'; end if;
*/
        codresult:=NULL;
        -- siac_r_bil_elem_atto_legge
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_atto_legge.' ;
        INSERT INTO siac_r_bil_elem_atto_legge
                    (
                                elem_id,
                                attolegge_id,
                                descrizione,
                                gerarchia,
                                finanziamento_inizio,
                                finanziamento_fine,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT bilelemidret,
                                  v.attolegge_id,
                                  v.descrizione,
                                  v.gerarchia,
                                  v.finanziamento_inizio,
                                  v.finanziamento_fine,
                                  datainizioval,
                                  v.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_atto_legge v
                           WHERE  v.elem_id=elembil.elem_id
                           AND    v.data_cancellazione IS NULL
                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',v.validita_inizio)
                           AND    (
                                         date_trunc('day',dataelaborazione)<=date_trunc('day',v.validita_fine)
                                  OR     v.validita_fine IS NULL) );

        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_atto_legge.Verifica inserimento.' ;
        SELECT   1
        INTO     codresult
        FROM     siac_r_bil_elem_atto_legge v
        WHERE    v.elem_id=elembil.elem_id
        AND      v.data_cancellazione IS NULL
        AND      date_trunc('day',dataelaborazione)>=date_trunc('day',v.validita_inizio)
        AND      (
                          date_trunc('day',dataelaborazione)<=date_trunc('day',v.validita_fine)
                 OR       v.validita_fine IS NULL)
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_atto_legge v1
                          WHERE    v1.elem_id= bilelemidret
                          AND      v1.data_cancellazione IS NULL
                          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',v1.validita_inizio)
                          AND      (
                                            date_trunc('day',dataelaborazione)<=date_trunc('day',v1.validita_fine)
                                   OR       v1.validita_fine IS NULL)
                          ORDER BY v1.elem_id limit 1 )
        ORDER BY v.elem_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Non effettuato.';
        END IF;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_rel_tempo.' ;
        INSERT INTO siac_r_bil_elem_rel_tempo
                    (
                                elem_id,
                                elem_id_old,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT bilelemidret,
                                  v.elem_id_old,
                                  datainizioval,
                                  v.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_rel_tempo v
                           WHERE  v.elem_id=elembil.elem_id
                           AND    v.data_cancellazione IS NULL
                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',v.validita_inizio)
                           AND    (
                                         date_trunc('day',dataelaborazione)<=date_trunc('day',v.validita_fine)
                                  OR     v.validita_fine IS NULL));

        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_rel_tempo.Verifica inserimento.' ;
        SELECT   1
        INTO     codresult
        FROM     siac_r_bil_elem_rel_tempo v
        WHERE    v.elem_id=elembil.elem_id
        AND      v.data_cancellazione IS NULL
        AND      date_trunc('day',dataelaborazione)>=date_trunc('day',v.validita_inizio)
        AND      (
                          date_trunc('day',dataelaborazione)<=date_trunc('day',v.validita_fine)
                 OR       v.validita_fine IS NULL)
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_rel_tempo v1
                          WHERE    v1.elem_id= bilelemidret
                          AND      v1.data_cancellazione IS NULL
                          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',v1.validita_inizio)
                          AND      (
                                            date_trunc('day',dataelaborazione)<=date_trunc('day',v1.validita_fine)
                                   OR       v1.validita_fine IS NULL)
                          ORDER BY v1.elem_id limit 1 )
        ORDER BY v.elem_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Non effettuato.';
        END IF;
        codresult:=NULL;
        -- siac_r_bil_elem_class
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : siac_r_bil_elem_class.' ;
        /*
insert into siac_r_bil_elem_class
(elem_id,classif_id, validita_inizio, ente_proprietario_id,login_operazione)
(select bilElemIdRet, class.classif_id,dataInizioVal,class.ente_proprietario_id,loginOperazione
from siac_r_bil_elem_class class
where class.elem_id=elemBil.elem_id
and   class.data_cancellazione is null
and   date_trunc('day',dataElaborazione)>=date_trunc('day',class.validita_inizio)
and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',class.validita_fine) or class.validita_fine is null));
*/
        /*
select 1 into codResult
from siac_r_bil_elem_class
where elem_id=bilElemIdRet
and   data_cancellazione is null
and   validita_fine is null
order by elem_id
limit 1;
if codResult is null then raise exception ' Nessun classificatore inserito.'; end if;
*/
        /** JIRA-SIAC-4167 - aggiunto controllo su validita classificatore **/
        INSERT INTO siac_r_bil_elem_class
                    (
                                elem_id,
                                classif_id,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT bilelemidret,
                                  class.classif_id,
                                  datainizioval,
                                  class.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_class class,
                                  siac_t_class c
                           WHERE  class.elem_id=elembil.elem_id
                           AND    c.classif_id=class.classif_id
                           AND    class.data_cancellazione IS NULL
                           AND    date_trunc('day',dataelaborazione)>=date_trunc('day',class.validita_inizio)
                           AND    (
                                         date_trunc('day',dataelaborazione)<=date_trunc('day',class.validita_fine)
                                  OR     class.validita_fine IS NULL)
                           AND    c.data_cancellazione IS NULL
                           AND    date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                           AND    (
                                         date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                  OR     c.validita_fine IS NULL));
	    select 1 into codResult
		from siac_r_bil_elem_class
		where elem_id=bilElemIdRet
		and   data_cancellazione is null
		and   validita_fine is null
		order by elem_id
		limit 1;
		if codResult is null then raise exception ' Nessun classificatore inserito.'; end if;





        -- controlli sui classificatori obbligatori
        -- CL_CDC, CL_CDR
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : verifica classificatore '
        ||cl_cdc
        ||' '
        ||cl_cdr
        ||'.' ;
        /** JIRA-SIAC-4167  **/
        SELECT   1
        INTO     codresult
        FROM     siac_r_bil_elem_class r,
                 siac_t_class c
        WHERE    r.elem_id=bilelemidret
        AND      c.classif_id=r.classif_id
        AND      c.classif_tipo_id IN (cdctipoid,
                                       cdrtipoid)
        AND      c.data_cancellazione IS NULL
        AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
        AND      (
                          date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                 OR       c.validita_fine IS NULL)
        ORDER BY r.elem_id limit 1;

        IF codresult IS NULL THEN
          --provo a collegare il capitolo con il classificatore equivalente nuovo
          --siac-5297
          -- Sofia 21.11.2017
          INSERT INTO siac_r_bil_elem_class
                      (
                                  elem_id,
                                  classif_id,
                                  validita_inizio,
                                  ente_proprietario_id,
                                  login_operazione
                      )
                      (
                             SELECT bilelemidret,
                                    c.classif_id,
                                    datainizioval,
                                    c.ente_proprietario_id,
                                    loginoperazione
                             FROM   siac_t_class c ,
                                    siac_r_bil_elem_class rprec,
                                    siac_t_class cprec
                             WHERE  rprec.elem_id=elembil.elem_id
                             AND    cprec.classif_id=rprec.classif_id
                             AND    cprec.classif_tipo_id IN (cdctipoid,
                                                              cdrtipoid)
                             AND    rprec.data_cancellazione IS NULL
                             AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                             AND    (
                                           date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                    OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                             AND    cprec.data_cancellazione IS NULL
                             AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                             AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                             AND    c.classif_tipo_id=cprec.classif_tipo_id
                             AND    c.classif_code=cprec.classif_code
                             AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                             AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                             AND    (
                                           date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                    OR     c.validita_fine IS NULL) );

          GET diagnostics _row_count = row_count;
          IF _row_count <1 THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT capitolo.elem_id,
                                      capitolo.elem_code,
                                      capitolo.elem_code2,
                                      capitolo.elem_code3,
                                      capitolo.bil_id,
                                      fasebilelabid,
                                      'SAC',
                                      'Sac mancante',
                                      datainizioval,
                                      capitolo.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_bil_elem capitolo
                               WHERE  capitolo.elem_id=bilelemidret )
            returning   fase_bil_prev_ape_seg_id
            INTO        codresult;

            IF codresult IS NULL THEN
              RAISE
            EXCEPTION
              'Nessuno inserimento effettuato.';
            END IF;
          END IF;
          /*
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
'SAC',
'Sac mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is null then raise exception 'Nessuno inserimento effettuato.'; end if;
*/
        END IF;
        /** FINE **/
        -- CL_PDC_FIN_QUINTO, CL_PDC_FIN_QUARTO
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : verifica classificatore '
        ||cl_pdc_fin_quarto
        ||' '
        ||cl_pdc_fin_quinto
        ||'.' ;
        /** JIRA-SIAC-4167 **/
        SELECT   1
        INTO     codresult
        FROM     siac_r_bil_elem_class r,
                 siac_t_class c
        WHERE    r.elem_id=bilelemidret
        AND      c.classif_id=r.classif_id
        AND      c.classif_tipo_id IN (pdcfinivid,
                                       pdcfinvid)
        AND      c.data_cancellazione IS NULL
        AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
        AND      (
                          date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                 OR       c.validita_fine IS NULL)
        ORDER BY r.elem_id limit 1;

        -- Obbligatorieta  del classificatore vale solo per capitolo STANDARD
        IF categoriacapcode = categoria_std THEN
          --  JIRA-SIAC-4167  if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
          IF codresult IS NULL THEN
		  /*
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
'PDCFIN',
'PdcFin mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is null then raise exception 'Nessuno inserimento effettuato.'; end if;
*/
			--provo a collegare il capitolo con il classificatore equivalente nuovo
			--siac-5297
			-- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id IN (pdcfinivid,
                                                                pdcfinvid)
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        'PDCFIN',
                                        'PdcFin mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                'Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
        END IF;
        IF euelemtipo=tipo_elem_eu THEN
          -- CL_PROGRAMMA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_programma
          ||'.' ;
          /** JIRA-SIAC-4167 **/
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=bilelemidret
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=programmatipoid
          AND      c.data_cancellazione IS NULL
          AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)
          ORDER BY r.elem_id limit 1;

          -- Obbligatorieta' del classificatore vale solo per il capitolo STANDARD
          IF categoriacapcode = categoria_std THEN
            -- JIRA-SIAC-4167 if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
            IF codresult IS NULL THEN
              /*
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_PROGRAMMA,
CL_PROGRAMMA||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is null then raise exception 'Nessuno inserimento effettuato.'; end if;
*/
              --provo a collegare il capitolo con il classificatore equivalente nuovo
              --siac-5297
              -- Sofia 21.11.2017
              INSERT INTO siac_r_bil_elem_class
                          (
                                      elem_id,
                                      classif_id,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT bilelemidret,
                                        c.classif_id,
                                        datainizioval,
                                        c.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_class c ,
                                        siac_r_bil_elem_class rprec,
                                        siac_t_class cprec
                                 WHERE  rprec.elem_id=elembil.elem_id
                                 AND    cprec.classif_id=rprec.classif_id
                                 AND    cprec.classif_tipo_id =programmatipoid
                                 AND    rprec.data_cancellazione IS NULL
                                 AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                                 AND    (
                                               date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                        OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                                 AND    cprec.data_cancellazione IS NULL
                                 AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                                 AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                                 AND    c.classif_tipo_id=cprec.classif_tipo_id
                                 AND    c.classif_code=cprec.classif_code
                                 AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                                 AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                                 AND    (
                                               date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                        OR     c.validita_fine IS NULL) );

              GET diagnostics _row_count = row_count;
              IF _row_count <1 THEN
                strmessaggio:=strmessaggio
                ||' Inserimento segnalazione mancanza classif.';
                INSERT INTO fase_bil_t_prev_apertura_segnala
                            (
                                        elem_id,
                                        elem_code,
                                        elem_code2,
                                        elem_code3,
                                        bil_id,
                                        fase_bil_elab_id,
                                        segnala_codice,
                                        segnala_desc,
                                        validita_inizio,
                                        ente_proprietario_id,
                                        login_operazione
                            )
                            (
                                   SELECT capitolo.elem_id,
                                          capitolo.elem_code,
                                          capitolo.elem_code2,
                                          capitolo.elem_code3,
                                          capitolo.bil_id,
                                          fasebilelabid,
                                          cl_programma,
                                          cl_programma
                                                 ||' mancante',
                                          datainizioval,
                                          capitolo.ente_proprietario_id,
                                          loginoperazione
                                   FROM   siac_t_bil_elem capitolo
                                   WHERE  capitolo.elem_id=bilelemidret )
                returning   fase_bil_prev_ape_seg_id
                INTO        codresult;

                IF codresult IS NULL THEN
                  RAISE
                EXCEPTION
                  'Nessuno inserimento effettuato.';
                END IF;
              END IF;
            END IF;
          END IF;
          -- CL_MACROAGGREGATO
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_macroaggregato
          ||'.' ;
          /** JIRA-SIAC-4167 **/
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=bilelemidret
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=macroaggrtipoid
          AND      c.data_cancellazione IS NULL
          AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)
          ORDER BY r.elem_id limit 1;

          -- Obbligatorieta del classificatore vale solo per capitolo STANDARD
          IF categoriacapcode = categoria_std THEN
            -- JIRA-SIAC-4167 if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
            IF codresult IS NULL THEN
              /*
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_MACROAGGREGATO,
CL_MACROAGGREGATO||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is null then raise exception 'Nessuno inserimento effettuato.';  end if;
*/
              --provo a collegare il capitolo con il classificatore equivalente nuovo
              --siac-5297
              -- Sofia 21.11.2017
              INSERT INTO siac_r_bil_elem_class
                          (
                                      elem_id,
                                      classif_id,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT bilelemidret,
                                        c.classif_id,
                                        datainizioval,
                                        c.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_class c ,
                                        siac_r_bil_elem_class rprec,
                                        siac_t_class cprec
                                 WHERE  rprec.elem_id=elembil.elem_id
                                 AND    cprec.classif_id=rprec.classif_id
                                 AND    cprec.classif_tipo_id =macroaggrtipoid
                                 AND    rprec.data_cancellazione IS NULL
                                 AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                                 AND    (
                                               date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                        OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                                 AND    cprec.data_cancellazione IS NULL
                                 AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                                 AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                                 AND    c.classif_tipo_id=cprec.classif_tipo_id
                                 AND    c.classif_code=cprec.classif_code
                                 AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                                 AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                                 AND    (
                                               date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                        OR     c.validita_fine IS NULL) );

              GET diagnostics _row_count = row_count;
              IF _row_count <1 THEN
                strmessaggio:=strmessaggio
                ||' Inserimento segnalazione mancanza classif.';
                INSERT INTO fase_bil_t_prev_apertura_segnala
                            (
                                        elem_id,
                                        elem_code,
                                        elem_code2,
                                        elem_code3,
                                        bil_id,
                                        fase_bil_elab_id,
                                        segnala_codice,
                                        segnala_desc,
                                        validita_inizio,
                                        ente_proprietario_id,
                                        login_operazione
                            )
                            (
                                   SELECT capitolo.elem_id,
                                          capitolo.elem_code,
                                          capitolo.elem_code2,
                                          capitolo.elem_code3,
                                          capitolo.bil_id,
                                          fasebilelabid,
                                          cl_macroaggregato,
                                          cl_macroaggregato
                                                 ||' mancante',
                                          datainizioval,
                                          capitolo.ente_proprietario_id,
                                          loginoperazione
                                   FROM   siac_t_bil_elem capitolo
                                   WHERE  capitolo.elem_id=bilelemidret )
                returning   fase_bil_prev_ape_seg_id
                INTO        codresult;

                IF codresult IS NULL THEN
                  RAISE
                EXCEPTION
                  'Nessuno inserimento effettuato.';
                END IF;
              END IF;
            END IF;
          END IF;
          -- CL_COFOG
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_cofog
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=cofogtipoid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                                   SELECT DISTINCT 1
                                   FROM            siac_r_bil_elem_class r,
                                                   siac_t_class c
                                   WHERE           r.elem_id=bilelemidret
                                   AND             c.classif_id=r.classif_id
                                   AND             c.classif_tipo_id=cofogtipoid
                                   AND             c.data_cancellazione IS NULL
                                   /*AND             date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                   AND             (
                                                                   date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                   OR              c.validita_fine IS NULL) */)
          ORDER BY r.elem_id limit 1;

          -- --JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_COFOG,
CL_COFOG||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =cofogtipoid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_cofog,
                                        cl_cofog
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
          -- CL_RICORRENTE_SPESA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_ricorrente_spesa
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=ricorrentespesaid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                                   SELECT DISTINCT 1
                                   FROM            siac_r_bil_elem_class r,
                                                   siac_t_class c
                                   WHERE           r.elem_id=bilelemidret
                                   AND             c.classif_id=r.classif_id
                                   AND             c.classif_tipo_id=ricorrentespesaid
                                   AND             c.data_cancellazione IS NULL
                                   /*AND             date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                   AND             (
                                                                   date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                   OR              c.validita_fine IS NULL)*/ )
          ORDER BY r.elem_id limit 1;

          -- JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_RICORRENTE_SPESA,
CL_RICORRENTE_SPESA||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =ricorrentespesaid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_ricorrente_spesa,
                                        cl_ricorrente_spesa
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
          -- CL_SIOPE_SPESA_TERZO
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_siope_spesa_terzo
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=siopespesatipoid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                                   SELECT DISTINCT 1
                                   FROM            siac_r_bil_elem_class r,
                                                   siac_t_class c
                                   WHERE           r.elem_id=bilelemidret
                                   AND             c.classif_id=r.classif_id
                                   AND             c.classif_tipo_id=siopespesatipoid
                                   AND             c.data_cancellazione IS NULL
                                   /*AND             date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                   AND             (
                                                                   date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                   OR              c.validita_fine IS NULL) */)
          ORDER BY r.elem_id limit 1;

          -- JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_SIOPE_SPESA_TERZO,
CL_SIOPE_SPESA_TERZO||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =siopespesatipoid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_siope_spesa_terzo,
                                        cl_siope_spesa_terzo
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
          -- CL_TRANSAZIONE_UE_SPESA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_transazione_ue_spesa
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=transazioneuespesaid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                                   SELECT DISTINCT 1
                                   FROM            siac_r_bil_elem_class r,
                                                   siac_t_class c
                                   WHERE           r.elem_id=bilelemidret
                                   AND             c.classif_id=r.classif_id
                                   AND             c.classif_tipo_id=transazioneuespesaid
                                   AND             c.data_cancellazione IS NULL
                                   /*AND             date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                   AND             (
                                                                   date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                   OR              c.validita_fine IS NULL)*/ )
          ORDER BY r.elem_id limit 1;

          -- JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_TRANSAZIONE_UE_SPESA,
CL_TRANSAZIONE_UE_SPESA||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =transazioneuespesaid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            if elembil.elem_id=55447 then
            	raise notice 'SOFIA SOFIA SOFIA _row_count=%',_row_count;
            end if;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_transazione_ue_spesa,
                                        cl_transazione_ue_spesa
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;
			 raise notice 'fase_bil_prev_ape_seg_id=%',codresult;
              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
        ELSE
          -- CL_CATEGORIA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_categoria
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=bilelemidret
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=categoriatipoid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          ORDER BY r.elem_id limit 1;

          -- Obbligatorieta  del classificatore vale solo per capitolo STANDARD
          IF categoriacapcode = categoria_std THEN
            -- JIRA-SIAC-4167 14.11.2016 Sofia
            -- if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
            IF codresult IS NULL THEN
              /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_CATEGORIA,
CL_CATEGORIA||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
              --provo a collegare il capitolo con il classificatore equivalente nuovo
              --siac-5297
              -- Sofia 21.11.2017
              INSERT INTO siac_r_bil_elem_class
                          (
                                      elem_id,
                                      classif_id,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT bilelemidret,
                                        c.classif_id,
                                        datainizioval,
                                        c.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_class c ,
                                        siac_r_bil_elem_class rprec,
                                        siac_t_class cprec
                                 WHERE  rprec.elem_id=elembil.elem_id
                                 AND    cprec.classif_id=rprec.classif_id
                                 AND    cprec.classif_tipo_id =categoriatipoid
                                 AND    rprec.data_cancellazione IS NULL
                                 AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                                 AND    (
                                               date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                        OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                                 AND    cprec.data_cancellazione IS NULL
                                 AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                                 AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                                 AND    c.classif_tipo_id=cprec.classif_tipo_id
                                 AND    c.classif_code=cprec.classif_code
                                 AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                                 AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                                 AND    (
                                               date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                        OR     c.validita_fine IS NULL) );

              GET diagnostics _row_count = row_count;
              IF _row_count <1 THEN
                codresult:=NULL;
                strmessaggio:=strmessaggio
                ||' Inserimento segnalazione mancanza classif.';
                INSERT INTO fase_bil_t_prev_apertura_segnala
                            (
                                        elem_id,
                                        elem_code,
                                        elem_code2,
                                        elem_code3,
                                        bil_id,
                                        fase_bil_elab_id,
                                        segnala_codice,
                                        segnala_desc,
                                        validita_inizio,
                                        ente_proprietario_id,
                                        login_operazione
                            )
                            (
                                   SELECT capitolo.elem_id,
                                          capitolo.elem_code,
                                          capitolo.elem_code2,
                                          capitolo.elem_code3,
                                          capitolo.bil_id,
                                          fasebilelabid,
                                          cl_categoria,
                                          cl_categoria
                                                 ||' mancante',
                                          datainizioval,
                                          capitolo.ente_proprietario_id,
                                          loginoperazione
                                   FROM   siac_t_bil_elem capitolo
                                   WHERE  capitolo.elem_id=bilelemidret )
                returning   fase_bil_prev_ape_seg_id
                INTO        codresult;

                IF codresult IS NULL THEN
                  RAISE
                EXCEPTION
                  ' Nessuno inserimento effettuato.';
                END IF;
              END IF;
            END IF;
          END IF;
          -- CL_RICORRENTE_ENTRATA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_ricorrente_entrata
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=ricorrenteentrataid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                                   SELECT DISTINCT 1
                                   FROM            siac_r_bil_elem_class r,
                                                   siac_t_class c
                                   WHERE           r.elem_id=bilelemidret
                                   AND             c.classif_id=r.classif_id
                                   AND             c.classif_tipo_id=ricorrenteentrataid
                                   AND             c.data_cancellazione IS NULL
                                   /*AND             date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                   AND             (
                                                                   date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                   OR              c.validita_fine IS NULL) */)
          ORDER BY r.elem_id limit 1;

          -- JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_RICORRENTE_ENTRATA,
CL_RICORRENTE_ENTRATA||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =ricorrenteentrataid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_ricorrente_entrata,
                                        cl_ricorrente_entrata
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
          -- CL_SIOPE_ENTRATA_TERZO
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_siope_entrata_terzo
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=siopeentratatipoid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class r,
                                     siac_t_class c
                            WHERE    r.elem_id=bilelemidret
                            AND      c.classif_id=r.classif_id
                            AND      c.classif_tipo_id=siopeentratatipoid
                            AND      c.data_cancellazione IS NULL
                            /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)*/
                            ORDER BY r.elem_id limit 1)
          ORDER BY r.elem_id limit 1;

          -- JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_SIOPE_ENTRATA_TERZO,
CL_SIOPE_ENTRATA_TERZO||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =siopeentratatipoid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_siope_entrata_terzo,
                                        cl_siope_entrata_terzo
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
          -- CL_TRANSAZIONE_UE_ENTRATA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture per tipo='
          ||bilelemgesttipo
          || '.Elemento di bilancio '
          ||elembil.elem_code
          ||' '
          ||elembil.elem_code2
          ||' '
          ||elembil.elem_code3
          ||' : verifica classificatore '
          ||cl_transazione_ue_entrata
          ||'.' ;
          SELECT   1
          INTO     codresult
          FROM     siac_r_bil_elem_class r,
                   siac_t_class c
          WHERE    r.elem_id=elembil.elem_id
          AND      c.classif_id=r.classif_id
          AND      c.classif_tipo_id=transazioneueentrataid
          AND      r.data_cancellazione IS NULL
          AND      date_trunc('day',dataelaborazione)>=date_trunc('day',r.validita_inizio)
          AND      (
                            date_trunc('day',dataelaborazione)<=date_trunc('day',r.validita_fine)
                   OR       r.validita_fine IS NULL)
          AND      c.data_cancellazione IS NULL
          /*AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
          AND      (
                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                   OR       c.validita_fine IS NULL)*/
          AND      NOT EXISTS
                   (
                                   SELECT DISTINCT 1
                                   FROM            siac_r_bil_elem_class r,
                                                   siac_t_class c
                                   WHERE           r.elem_id=bilelemidret
                                   AND             c.classif_id=r.classif_id
                                   AND             c.classif_tipo_id=transazioneueentrataid
                                   AND             c.data_cancellazione IS NULL
                                   /*AND             date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                   AND             (
                                                                   date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                   OR              c.validita_fine IS NULL) */)
          ORDER BY r.elem_id limit 1;

          -- JIRA-SIAC-4167 14.11.2016 Sofia
          IF codresult IS NOT NULL THEN
            /*
codResult:=null;
strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
insert into fase_bil_t_prev_apertura_segnala
(elem_id,
elem_code,
elem_code2,
elem_code3,
bil_id,
fase_bil_elab_id,
segnala_codice,
segnala_desc,
validita_inizio,
ente_proprietario_id,
login_operazione)
(select capitolo.elem_id,
capitolo.elem_code,
capitolo.elem_code2,
capitolo.elem_code3,
capitolo.bil_id,
faseBilElabId,
CL_TRANSAZIONE_UE_ENTRATA,
CL_TRANSAZIONE_UE_ENTRATA||' mancante',
dataInizioVal,
capitolo.ente_proprietario_id,
loginOperazione
from siac_t_bil_elem capitolo
where  capitolo.elem_id=bilElemIdRet
)
returning fase_bil_prev_ape_seg_id into codresult;
if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
*/
            --provo a collegare il capitolo con il classificatore equivalente nuovo
            --siac-5297
            -- Sofia 21.11.2017
            INSERT INTO siac_r_bil_elem_class
                        (
                                    elem_id,
                                    classif_id,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT bilelemidret,
                                      c.classif_id,
                                      datainizioval,
                                      c.ente_proprietario_id,
                                      loginoperazione
                               FROM   siac_t_class c ,
                                      siac_r_bil_elem_class rprec,
                                      siac_t_class cprec
                               WHERE  rprec.elem_id=elembil.elem_id
                               AND    cprec.classif_id=rprec.classif_id
                               AND    cprec.classif_tipo_id =transazioneueentrataid
                               AND    rprec.data_cancellazione IS NULL
                               AND    date_trunc('day',dataelaborazione)>=date_trunc('day',rprec.validita_inizio)
                               AND    (
                                             date_trunc('day',dataelaborazione)<=date_trunc('day',rprec.validita_fine)
                                      OR     rprec.validita_fine IS NULL) -- relazione ad oggi valida
                               AND    cprec.data_cancellazione IS NULL
                               AND    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',cprec.validita_fine) -- su classif chiuso in data in anno prec
                               AND    c.ente_proprietario_id=cprec.ente_proprietario_id
                               AND    c.classif_tipo_id=cprec.classif_tipo_id
                               AND    c.classif_code=cprec.classif_code
                               AND    c.data_cancellazione IS NULL -- cercando un classificatore equivalente aperto su anno succ
                               AND    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',c.validita_inizio)
                               AND    (
                                             date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',c.validita_fine)
                                      OR     c.validita_fine IS NULL) );

            GET diagnostics _row_count = row_count;
            IF _row_count <1 THEN
              codresult:=NULL;
              strmessaggio:=strmessaggio
              ||' Inserimento segnalazione mancanza classif.';
              INSERT INTO fase_bil_t_prev_apertura_segnala
                          (
                                      elem_id,
                                      elem_code,
                                      elem_code2,
                                      elem_code3,
                                      bil_id,
                                      fase_bil_elab_id,
                                      segnala_codice,
                                      segnala_desc,
                                      validita_inizio,
                                      ente_proprietario_id,
                                      login_operazione
                          )
                          (
                                 SELECT capitolo.elem_id,
                                        capitolo.elem_code,
                                        capitolo.elem_code2,
                                        capitolo.elem_code3,
                                        capitolo.bil_id,
                                        fasebilelabid,
                                        cl_transazione_ue_entrata,
                                        cl_transazione_ue_entrata
                                               ||' mancante',
                                        datainizioval,
                                        capitolo.ente_proprietario_id,
                                        loginoperazione
                                 FROM   siac_t_bil_elem capitolo
                                 WHERE  capitolo.elem_id=bilelemidret )
              returning   fase_bil_prev_ape_seg_id
              INTO        codresult;

              IF codresult IS NULL THEN
                RAISE
              EXCEPTION
                ' Nessuno inserimento effettuato.';
              END IF;
            END IF;
          END IF;
        END IF;
        strmessaggio:='Inserimento nuove strutture per tipo='
        ||bilelemgesttipo
        || '.Elemento di bilancio '
        ||elembil.elem_code
        ||' '
        ||elembil.elem_code2
        ||' '
        ||elembil.elem_code3
        ||' : aggiornamento relazione tra elem_id_gest prec e elem_prov_id nuovo.' ;
        UPDATE fase_bil_t_gest_apertura_provv
        SET    elem_prov_new_id=bilelemidret
        WHERE  elem_id=elembil.elem_id
        AND    fase_bil_elab_id=fasebilelabid;

      END LOOP;
      strmessaggio:='Conclusione inserimento nuove strutture per tipo='
      ||bilelemgesttipo
      ||'.';
      codresult:=NULL;
      INSERT INTO fase_bil_t_elaborazione_log
                  (
                              fase_bil_elab_id,
                              fase_bil_elab_log_operazione,
                              validita_inizio,
                              login_operazione,
                              ente_proprietario_id
                  )
                  VALUES
                  (
                              fasebilelabid,
                              strmessaggio,
                              clock_timestamp(),
                              loginoperazione,
                              enteproprietarioid
                  )
      returning   fase_bil_elab_log_id
      INTO        codresult;

      IF codresult IS NULL THEN
        RAISE
      EXCEPTION
        ' Errore in inserimento LOG.';
      END IF;
    END IF;
    -- verifica apertura gestione provvisorio con gestione pre-esistente ( rielaborazione )
    IF checkgest=TRUE THEN
      codresult:=NULL;
      strmessaggio:='Verifica esistenza elementi di bilancio provvisorio equivalenti da aggiornare da gestione anno prec.';
      SELECT   1
      INTO     codresult
      FROM     fase_bil_t_gest_apertura_provv fase
      WHERE    fase.ente_proprietario_id=enteproprietarioid
      AND      fase.bil_id=bilancioid
      AND      fase.fase_bil_elab_id=fasebilelabid
      AND      fase.data_cancellazione IS NULL
      AND      fase.validita_fine IS NULL
      AND      fase.elem_id IS NOT NULL      -- esistenti in gestione precedente
      AND      fase.elem_prov_new_id IS NULL -- non elaborati per nuovo inserimento in gestione corrente
      AND      fase.elem_prov_id IS NOT NULL -- esistente in gestione corrente
      ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

      IF codresult IS NOT NULL THEN
        -- popolamento tabelle bck per salvataggio precedenti strutture
        -- siac_t_bil_elem
        codresult:=NULL;
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        strmessaggio:='Backup vecchia struttura [siac_t_bil_elem] per capitoli provvisorio equivalente per nuovo aggiornamento.';
        INSERT INTO bck_fase_bil_t_gest_apertura_provv_bil_elem
                    (
                                elem_id,
                                elem_bck_id,
                                elem_bck_code,
                                elem_bck_code2,
                                elem_bck_code3,
                                elem_bck_desc,
                                elem_bck_desc2,
                                elem_bck_bil_id,
                                elem_bck_id_padre,
                                elem_bck_tipo_id,
                                elem_bck_livello,
                                elem_bck_ordine,
                                elem_bck_data_creazione,
                                elem_bck_data_modifica,
                                elem_bck_login_operazione,
                                elem_bck_validita_inizio,
                                elem_bck_validita_fine,
                                fase_bil_elab_id,
                                ente_proprietario_id,
                                login_operazione,
                                validita_inizio
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  elem.elem_id,
                                  elem.elem_code,
                                  elem.elem_code2,
                                  elem.elem_code3,
                                  elem.elem_desc,
                                  elem.elem_desc2,
                                  elem.bil_id,
                                  elem.elem_id_padre,
                                  elem.elem_tipo_id,
                                  elem.livello,
                                  elem.ordine,
                                  elem.data_creazione,
                                  elem.data_modifica,
                                  elem.login_operazione,
                                  elem.validita_inizio,
                                  elem.validita_fine,
                                  fasebilelabid,
                                  elem.ente_proprietario_id,
                                  loginoperazione,
                                  datainizioval
                           FROM   fase_bil_t_gest_apertura_provv fase,
                                  siac_t_bil_elem elem
                           WHERE  fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    elem.elem_id=fase.elem_prov_id
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.validita_fine IS NULL
                           AND    fase.elem_prov_id IS NOT NULL -- esistente in gestione corrente
                           AND    fase.elem_id IS NOT NULL      -- esistente in gestione precedente
                           AND    fase.elem_prov_new_id IS NULL -- non inserito come nuovo gestione
                    );

        -- bck per attributi e classificatori, stato e categoria
        strmessaggio:='Backup vecchia struttura [siac_r_bil_elem_stato] per capitoli provvisorio equivalente per nuovo aggiornamento.';
        INSERT INTO bck_fase_bil_t_gest_apertura_provv_bil_elem_stato
                    (
                                elem_id,
                                elem_bck_id,
                                elem_bck_stato_id,
                                elem_bck_data_creazione,
                                elem_bck_data_modifica,
                                elem_bck_login_operazione,
                                elem_bck_validita_inizio,
                                elem_bck_validita_fine,
                                fase_bil_elab_id,
                                ente_proprietario_id,
                                login_operazione,
                                validita_inizio
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  elem.elem_id,
                                  elem.elem_stato_id,
                                  elem.data_creazione,
                                  elem.data_modifica,
                                  elem.login_operazione,
                                  elem.validita_inizio,
                                  elem.validita_fine,
                                  fasebilelabid,
                                  elem.ente_proprietario_id,
                                  loginoperazione,
                                  datainizioval
                           FROM   fase_bil_t_gest_apertura_provv fase,
                                  siac_r_bil_elem_stato elem
                           WHERE  fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    elem.elem_id=fase.elem_prov_id
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.validita_fine IS NULL
                           AND    fase.elem_prov_id IS NOT NULL -- esistente in gestione corrente
                           AND    fase.elem_id IS NOT NULL      -- esistente in gestione precedente
                           AND    fase.elem_prov_new_id IS NULL -- non inserito come nuovo gestione
                           AND    elem.data_cancellazione IS NULL
                           AND    elem.validita_fine IS NULL );

        strmessaggio:='Backup vecchia struttura [siac_r_bil_elem_attr] per capitoli provvisorio equivalente per nuovo aggiornamento.';
        INSERT INTO bck_fase_bil_t_gest_apertura_provv_bil_elem_attr
                    (
                                elem_id,
                                elem_bck_id,
                                elem_bck_attr_id,
                                elem_bck_tabella_id,
                                elem_bck_boolean,
                                elem_bck_percentuale,
                                elem_bck_testo,
                                elem_bck_numerico,
                                elem_bck_data_creazione,
                                elem_bck_data_modifica,
                                elem_bck_login_operazione,
                                elem_bck_validita_inizio,
                                elem_bck_validita_fine,
                                fase_bil_elab_id,
                                ente_proprietario_id,
                                login_operazione,
                                validita_inizio
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  elem.elem_id,
                                  elem.attr_id,
                                  elem.tabella_id,
                                  elem."boolean",
                                  elem.percentuale,
                                  elem.testo,
                                  elem.numerico,
                                  elem.data_creazione,
                                  elem.data_modifica,
                                  elem.login_operazione,
                                  elem.validita_inizio,
                                  elem.validita_fine,
                                  fasebilelabid,
                                  elem.ente_proprietario_id,
                                  loginoperazione,
                                  datainizioval
                           FROM   fase_bil_t_gest_apertura_provv fase,
                                  siac_r_bil_elem_attr elem
                           WHERE  fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    elem.elem_id=fase.elem_prov_id
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.validita_fine IS NULL
                           AND    fase.elem_prov_id IS NOT NULL -- esistente in gestione corrente
                           AND    fase.elem_id IS NOT NULL      -- esistente in gestione precedente
                           AND    fase.elem_prov_new_id IS NULL -- non inserito come nuovo gestione
                           AND    elem.data_cancellazione IS NULL
                           AND    elem.validita_fine IS NULL );

        strmessaggio:='Backup vecchia struttura [siac_r_bil_elem_class] per capitoli provvisorio equivalente per nuovo aggiornamento.';
        INSERT INTO bck_fase_bil_t_gest_apertura_provv_bil_elem_class
                    (
                                elem_id,
                                elem_bck_id,
                                elem_bck_classif_id,
                                elem_bck_data_creazione,
                                elem_bck_data_modifica,
                                elem_bck_login_operazione,
                                elem_bck_validita_inizio,
                                elem_bck_validita_fine,
                                fase_bil_elab_id,
                                ente_proprietario_id,
                                login_operazione,
                                validita_inizio
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  elem.elem_id,
                                  elem.classif_id,
                                  elem.data_creazione,
                                  elem.data_modifica,
                                  elem.login_operazione,
                                  elem.validita_inizio,
                                  elem.validita_fine,
                                  fasebilelabid,
                                  elem.ente_proprietario_id,
                                  loginoperazione,
                                  datainizioval
                           FROM   fase_bil_t_gest_apertura_provv fase,
                                  siac_r_bil_elem_class elem
                           WHERE  fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    elem.elem_id=fase.elem_prov_id
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.validita_fine IS NULL
                           AND    fase.elem_prov_id IS NOT NULL -- esistente in gestione corrente
                           AND    fase.elem_id IS NOT NULL      -- esistente in gestione precedente
                           AND    fase.elem_prov_new_id IS NULL -- non inserito come nuovo gestione
                           AND    elem.data_cancellazione IS NULL
                           AND    elem.validita_fine IS NULL );

        strmessaggio:='Backup vecchia struttura [siac_r_bil_elem_categoria] per capitoli provvisorio equivalente per nuovo aggiornamento.';
        INSERT INTO bck_fase_bil_t_gest_apertura_provv_bil_elem_categ
                    (
                                elem_id,
                                elem_bck_id,
                                elem_bck_cat_id,
                                elem_bck_data_creazione,
                                elem_bck_data_modifica,
                                elem_bck_login_operazione,
                                elem_bck_validita_inizio,
                                elem_bck_validita_fine,
                                fase_bil_elab_id,
                                ente_proprietario_id,
                                login_operazione,
                                validita_inizio
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  elem.elem_id,
                                  elem.elem_cat_id,
                                  elem.data_creazione,
                                  elem.data_modifica,
                                  elem.login_operazione,
                                  elem.validita_inizio,
                                  elem.validita_fine,
                                  fasebilelabid,
                                  elem.ente_proprietario_id,
                                  loginoperazione,
                                  datainizioval
                           FROM   fase_bil_t_gest_apertura_provv fase,
                                  siac_r_bil_elem_categoria elem
                           WHERE  fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    elem.elem_id=fase.elem_prov_id
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.validita_fine IS NULL
                           AND    fase.elem_prov_id IS NOT NULL -- esistente in gestione corrente
                           AND    fase.elem_id IS NOT NULL      -- esistente in gestione precedente
                           AND    fase.elem_prov_new_id IS NULL -- non inserito come nuovo gestione
                           AND    elem.data_cancellazione IS NULL
                           AND    elem.validita_fine IS NULL );

        codresult:=NULL;
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inizio cancellazione logica vecchie strutture provvisorio esistenti.';
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        -- cancellazione logica precendenti relazioni
        -- siac_r_bil_elem_stato
        /* per queste relazioni si va in aggiornamento fatti bck prima
strMessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_bil_elem_stato].';
update siac_r_bil_elem_stato canc  set
data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
where canc.ente_proprietario_id=enteProprietarioId
and   canc.data_cancellazione is null and canc.validita_fine is null
and   exists (select 1 from fase_bil_t_gest_apertura_provv fase
where fase.ente_proprietario_id=enteProprietarioId
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.elem_prov_id=canc.elem_id
and   fase.elem_prov_id is not null
and   fase.elem_id is not null
and   fase.elem_prov_new_id is null
and   fase.data_cancellazione is null
order by fase.fase_bil_gest_ape_prov_id
limit 1);
-- siac_r_bil_elem_categoria
strMessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_bil_elem_categoria].';
update  siac_r_bil_elem_categoria canc set
data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
where canc.ente_proprietario_id=enteProprietarioId
and   canc.data_cancellazione is null and canc.validita_fine is null
and   exists (select 1 from fase_bil_t_gest_apertura_provv fase
where fase.ente_proprietario_id=enteProprietarioId
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.elem_prov_id=canc.elem_id
and   fase.elem_prov_id is not null
and   fase.elem_id is not null
and   fase.elem_prov_new_id is null
and   fase.data_cancellazione is null
order by fase.fase_bil_gest_ape_prov_id
limit 1);
-- siac_r_bil_elem_attr
strMessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_bil_elem_attr].';
update siac_r_bil_elem_attr canc set
data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
where canc.ente_proprietario_id=enteProprietarioId
and   canc.data_cancellazione is null and canc.validita_fine is null
and   exists (select 1 from fase_bil_t_gest_apertura_provv fase
where fase.ente_proprietario_id=enteProprietarioId
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.elem_prov_id=canc.elem_id
and   fase.elem_prov_id is not null
and   fase.elem_id is not null
and   fase.elem_prov_new_id is null
and   fase.data_cancellazione is null
order by fase.fase_bil_gest_ape_prov_id
limit 1);
-- siac_r_bil_elem_class
strMessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_bil_elem_class].';
update siac_r_bil_elem_class canc set
data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
where canc.ente_proprietario_id=enteProprietarioId
and   canc.data_cancellazione is null and canc.validita_fine is null
and   exists (select 1 from fase_bil_t_gest_apertura_provv fase
where fase.ente_proprietario_id=enteProprietarioId
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.elem_prov_id=canc.elem_id
and   fase.elem_prov_id is not null
and   fase.elem_id is not null
and   fase.elem_prov_new_id is null
and   fase.data_cancellazione is null
order by fase.fase_bil_gest_ape_prov_id
limit 1);
*/
        /*--SIAC-5590
-- siac_r_vincolo_bil_elem
strMessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_vincolo_bil_elem].';
update siac_r_vincolo_bil_elem canc set
data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
where canc.ente_proprietario_id=enteProprietarioId
and   canc.data_cancellazione is null and canc.validita_fine is null
and   exists (select 1 from fase_bil_t_gest_apertura_provv fase
where fase.ente_proprietario_id=enteProprietarioId
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.elem_prov_id=canc.elem_id
and   fase.elem_prov_id is not null
and   fase.elem_id is not null
and   fase.elem_prov_new_id is null
and   fase.data_cancellazione is null
order by fase.fase_bil_gest_ape_prov_id
limit 1);
*/
        -- siac_r_bil_elem_atto_legge
        strmessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_bil_elem_atto_legge].';
        UPDATE siac_r_bil_elem_atto_legge canc
        SET    data_cancellazione=now(),
               validita_fine=now(),
               login_operazione=loginoperazione
        WHERE  canc.ente_proprietario_id=enteproprietarioid
        AND    canc.data_cancellazione IS NULL
        AND    canc.validita_fine IS NULL
        AND    EXISTS
               (
                        SELECT   1
                        FROM     fase_bil_t_gest_apertura_provv fase
                        WHERE    fase.ente_proprietario_id=enteproprietarioid
                        AND      fase.bil_id=bilancioid
                        AND      fase.fase_bil_elab_id=fasebilelabid
                        AND      fase.elem_prov_id=canc.elem_id
                        AND      fase.elem_prov_id IS NOT NULL
                        AND      fase.elem_id IS NOT NULL
                        AND      fase.elem_prov_new_id IS NULL
                        AND      fase.data_cancellazione IS NULL
                        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1);

        -- siac_r_bil_elem_rel_tempo
        strmessaggio:='Cancellazione logica vecchie strutture provvisorio esistenti [siac_r_bil_elem_rel_tempo].';
        UPDATE siac_r_bil_elem_rel_tempo canc
        SET    data_cancellazione=now(),
               validita_fine=now(),
               login_operazione=loginoperazione
        WHERE  canc.ente_proprietario_id=enteproprietarioid
        AND    canc.data_cancellazione IS NULL
        AND    canc.validita_fine IS NULL
        AND    EXISTS
               (
                        SELECT   1
                        FROM     fase_bil_t_gest_apertura_provv fase
                        WHERE    fase.ente_proprietario_id=enteproprietarioid
                        AND      fase.bil_id=bilancioid
                        AND      fase.fase_bil_elab_id=fasebilelabid
                        AND      fase.elem_prov_id=canc.elem_id
                        AND      fase.elem_prov_id IS NOT NULL
                        AND      fase.elem_id IS NOT NULL
                        AND      fase.elem_prov_new_id IS NULL
                        AND      fase.data_cancellazione IS NULL
                        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1);

        codresult:=NULL;
        strmessaggio:='Fine cancellazione logica vecchie strutture provvisorio esistenti.';
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        -- cancellazione logica precendenti relazioni
        -- aggiornamento siac_t_bil_elem
        strmessaggio:='Aggiornamento nuova struttura provvisorio esistente da gestione equivalente anno precedente [siac_t_bil_elem].';
        UPDATE siac_t_bil_elem gestcorr
        SET
               (
                      elem_desc,
                      elem_desc2,
                      ordine,
                      livello,
                      data_modifica,
                      login_operazione
               )
               = (gest.elem_desc,gest.elem_desc2,gest.ordine,gest.livello,now(),loginoperazione)
        FROM   fase_bil_t_gest_apertura_provv fase,
               siac_t_bil_elem gest
        WHERE  gestcorr.ente_proprietario_id=enteproprietarioid
        AND    gestcorr.elem_id=fase.elem_prov_id
        AND    gest.elem_id=fase.elem_id
        AND    fase.ente_proprietario_id=enteproprietarioid
        AND    fase.bil_id=bilancioid
        AND    fase.fase_bil_elab_id=fasebilelabid
        AND    fase.data_cancellazione IS NULL
        AND    fase.elem_id IS NOT NULL       -- gestione equivalente anno prec esistente
        AND    fase.elem_prov_id IS NOT NULL  -- gestione equivalente corrente esistente
        AND    fase.elem_prov_new_id IS NULL; -- non inserito come nuova gestione corrente
        codresult:=NULL;
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inizio inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente.';
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        -- update relazioni esistenti
        -- siac_r_bil_elem_stato
        /* strMessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_stato].';
insert into siac_r_bil_elem_stato
(elem_id,elem_stato_id,validita_inizio,ente_proprietario_id,login_operazione)
(select fase.elem_prov_id, stato.elem_stato_id , dataInizioVal, stato.ente_proprietario_id, loginOperazione
from siac_r_bil_elem_stato stato, fase_bil_t_gest_apertura_provv fase
where stato.elem_id=fase.elem_id
and   fase.ente_proprietario_id=enteProprietarioid
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.data_cancellazione is null
and   fase.elem_id is not null
and   fase.elem_prov_id is not null
and   fase.elem_prov_new_id is null
and   stato.data_cancellazione is null
and   stato.validita_fine is null);*/
        -- siac_r_bil_elem_stato
        strmessaggio:='Aggiornamento strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_stato].';
        UPDATE siac_r_bil_elem_stato stato
        SET    elem_stato_id=stato.elem_stato_id,
               data_modifica=now(),
               login_operazione=loginoperazione
        FROM   fase_bil_t_gest_apertura_provv fase,
               siac_r_bil_elem_stato statonew
        WHERE  stato.elem_id=fase.elem_prov_id
        AND    statonew.elem_id=fase.elem_id
        AND    fase.ente_proprietario_id=enteproprietarioid
        AND    fase.bil_id=bilancioid
        AND    fase.fase_bil_elab_id=fasebilelabid
        AND    fase.data_cancellazione IS NULL
        AND    fase.elem_id IS NOT NULL
        AND    fase.elem_prov_id IS NOT NULL
        AND    fase.elem_prov_new_id IS NULL
        AND    stato.data_cancellazione IS NULL
        AND    stato.validita_fine IS NULL
        AND    statonew.data_cancellazione IS NULL
        AND    statonew.validita_fine IS NULL;

        -- siac_r_bil_elem_attr
        strmessaggio:='Cancellazione per nuovo inserimento strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_attr].';
        DELETE
        FROM   siac_r_bil_elem_attr attr
        USING  fase_bil_t_gest_apertura_provv fase
        WHERE  attr.elem_id=fase.elem_prov_id
        AND    fase.ente_proprietario_id=enteproprietarioid
        AND    fase.bil_id=bilancioid
        AND    fase.fase_bil_elab_id=fasebilelabid
        AND    fase.data_cancellazione IS NULL
        AND    fase.elem_id IS NOT NULL
        AND    fase.elem_prov_id IS NOT NULL
        AND    fase.elem_prov_new_id IS NULL
        AND    attr.data_cancellazione IS NULL
        AND    attr.validita_fine IS NULL;

        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_attr].';
        INSERT INTO siac_r_bil_elem_attr
                    (
                                elem_id,
                                attr_id,
                                tabella_id,
                                BOOLEAN,
                                percentuale,
                                testo,
                                numerico,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  attr.attr_id ,
                                  attr.tabella_id,
                                  attr.BOOLEAN,
                                  attr.percentuale,
                                  attr.testo,
                                  attr.numerico,
                                  datainizioval,
                                  attr.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_attr attr,
                                  fase_bil_t_gest_apertura_provv fase
                           WHERE  attr.elem_id=fase.elem_id
                           AND    fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.elem_id IS NOT NULL
                           AND    fase.elem_prov_id IS NOT NULL
                           AND    fase.elem_prov_new_id IS NULL
                           AND    attr.data_cancellazione IS NULL
                           AND    attr.validita_fine IS NULL);

        -- siac_r_bil_elem_categoria
        strmessaggio:='Cancellazione per nuovo inserimento strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_categoria].';
        DELETE
        FROM   siac_r_bil_elem_categoria cat
        USING  fase_bil_t_gest_apertura_provv fase
        WHERE  cat.elem_id=fase.elem_prov_id
        AND    fase.ente_proprietario_id=enteproprietarioid
        AND    fase.bil_id=bilancioid
        AND    fase.fase_bil_elab_id=fasebilelabid
        AND    fase.data_cancellazione IS NULL
        AND    fase.elem_id IS NOT NULL
        AND    fase.elem_prov_id IS NOT NULL
        AND    fase.elem_prov_new_id IS NULL
        AND    cat.data_cancellazione IS NULL
        AND    cat.validita_fine IS NULL;

        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_categoria].';
        INSERT INTO siac_r_bil_elem_categoria
                    (
                                elem_id,
                                elem_cat_id,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  cat.elem_cat_id ,
                                  datainizioval,
                                  cat.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_categoria cat,
                                  fase_bil_t_gest_apertura_provv fase
                           WHERE  cat.elem_id=fase.elem_id
                           AND    fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.elem_id IS NOT NULL
                           AND    fase.elem_prov_id IS NOT NULL
                           AND    fase.elem_prov_new_id IS NULL
                           AND    cat.data_cancellazione IS NULL
                           AND    cat.validita_fine IS NULL);

        -- siac_r_bil_elem_class
        strmessaggio:='Cancellazione per nuovo inserimento strutture provvisorio esistenti da gestione equivalente anno precedente [fase_bil_t_gest_apertura_provv].';
        DELETE
        FROM   siac_r_bil_elem_class class
        USING  fase_bil_t_gest_apertura_provv fase
        WHERE  class.elem_id=fase.elem_prov_id
        AND    fase.ente_proprietario_id=enteproprietarioid
        AND    fase.bil_id=bilancioid
        AND    fase.fase_bil_elab_id=fasebilelabid
        AND    fase.data_cancellazione IS NULL
        AND    fase.elem_id IS NOT NULL
        AND    fase.elem_prov_id IS NOT NULL
        AND    fase.elem_prov_new_id IS NULL
        AND    class.data_cancellazione IS NULL
        AND    class.validita_fine IS NULL;

        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].';
        /*
insert into siac_r_bil_elem_class
(elem_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione)
(select fase.elem_prov_id, class.classif_id , dataInizioVal, class.ente_proprietario_id, loginOperazione
from siac_r_bil_elem_class class, fase_bil_t_gest_apertura_provv fase,siac_t_class c
where class.elem_id=fase.elem_id
and   fase.ente_proprietario_id=enteProprietarioid
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.data_cancellazione is null
and   fase.elem_id is not null
and   fase.elem_prov_id is not null
and   fase.elem_prov_new_id is null
and   class.data_cancellazione is null
and   class.validita_fine is null;
*/
        -- JIRA-SIAC-4167 14.11.2016
        INSERT INTO siac_r_bil_elem_class
                    (
                                elem_id,
                                classif_id,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  class.classif_id ,
                                  datainizioval,
                                  class.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_class class,
                                  fase_bil_t_gest_apertura_provv fase,
                                  siac_t_class c
                           WHERE  class.elem_id=fase.elem_id
                           AND    fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.elem_id IS NOT NULL
                           AND    fase.elem_prov_id IS NOT NULL
                           AND    fase.elem_prov_new_id IS NULL
                           AND    class.data_cancellazione IS NULL
                           AND    class.validita_fine IS NULL
                           AND    c.classif_id=class.classif_id
                           AND    c.data_cancellazione IS NULL
                           AND    date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                           AND    ( date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine) OR     c.validita_fine IS NULL));


    	-- 22.11.2017 Sofia - siac-5297
        strmessaggio:='Inserimento nuove strutture previsione esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Classificazioni equivalenti anno nuovo.';
		INSERT INTO siac_r_bil_elem_class
                    (
                                elem_id,
                                classif_id,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT fase.elem_prev_id,
                                  cnew.classif_id ,
                                  datainizioval,
                                  class.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_class class,
                                  fase_bil_t_gest_apertura_provv fase,
                                  siac_t_class c, siac_t_class cnew
                           WHERE  class.elem_id=fase.elem_gest_id
                           AND    fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    c.classif_id=class.classif_id
                           and    cnew.ente_proprietario_id=c.ente_proprietario_id
                           and    cnew.classif_tipo_id=c.classif_tipo_id
                           and    cnew.classif_code=c.classif_code
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.elem_gest_id IS NOT NULL
                           AND    fase.elem_prev_id IS NOT NULL
                           AND    class.data_cancellazione IS NULL
                           AND    class.validita_fine IS NULL
                           AND    c.data_cancellazione IS NULL
                           and    date_trunc('day',v_dataprimogiornoanno)>date_trunc('day',c.validita_fine)
						   and    cnew.data_cancellazione is null
          				   and    date_trunc('day',v_dataprimogiornoanno)<=date_trunc('day',cnew.validita_inizio)
				           AND    (date_trunc('day',v_dataprimogiornoanno) < date_trunc('day',cnew.validita_fine)or cnew.validita_fine IS NULL)
                           and    not exists
                           (
                           select 1
                           from siac_r_bil_elem_class r1,siac_t_class c1
                           where r1.elem_id=fase.elem_prev_id
                           and   c1.classif_id=r1.classif_id
                           and   c1.classif_tipo_id=c.classif_tipo_id
                           and   r1.data_cancellazione  is null
                           and   r1.validita_fine is null
                           )
           			 );


        /* SIAC-5590
-- inserimento nuove relazioni
-- siac_r_vincolo_bil_elem
strMessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_vincolo_bil_elem].';
insert into siac_r_vincolo_bil_elem
( elem_id,vincolo_id, validita_inizio,ente_proprietario_id,login_operazione)
(select fase.elem_prov_id, v.vincolo_id, dataInizioVal,v.ente_proprietario_id, loginOperazione
from siac_r_vincolo_bil_elem v,fase_bil_t_gest_apertura_provv fase
where v.elem_id=fase.elem_id
and   fase.ente_proprietario_id=enteProprietarioid
and   fase.bil_id=bilancioId
and   fase.fase_bil_elab_id=faseBilElabId
and   fase.data_cancellazione is null
and   fase.elem_id is not null
and   fase.elem_prov_id is not null
and   fase.elem_prov_new_id is null
and   v.data_cancellazione is null
and   v.validita_fine is null
);
*/
        -- siac_r_bil_elem_atto_legge
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_atto_legge].';
        INSERT INTO siac_r_bil_elem_atto_legge
                    (
                                elem_id,
                                attolegge_id,
                                descrizione,
                                gerarchia,
                                finanziamento_inizio,
                                finanziamento_fine,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  v.attolegge_id,
                                  v.descrizione,
                                  v.gerarchia,
                                  v.finanziamento_inizio,
                                  v.finanziamento_fine,
                                  datainizioval,
                                  v.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_atto_legge v,
                                  fase_bil_t_gest_apertura_provv fase
                           WHERE  v.elem_id=fase.elem_id
                           AND    fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.elem_id IS NOT NULL
                           AND    fase.elem_prov_id IS NOT NULL
                           AND    fase.elem_prov_new_id IS NULL
                           AND    v.data_cancellazione IS NULL
                           AND    v.validita_fine IS NULL );

        -- siac_r_bil_elem_rel_tempo
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_rel_tempo].';
        INSERT INTO siac_r_bil_elem_rel_tempo
                    (
                                elem_id,
                                elem_id_old,
                                validita_inizio,
                                ente_proprietario_id,
                                login_operazione
                    )
                    (
                           SELECT fase.elem_prov_id,
                                  v.elem_id_old,
                                  datainizioval,
                                  v.ente_proprietario_id,
                                  loginoperazione
                           FROM   siac_r_bil_elem_rel_tempo v,
                                  fase_bil_t_gest_apertura_provv fase
                           WHERE  v.elem_id=fase.elem_id
                           AND    fase.ente_proprietario_id=enteproprietarioid
                           AND    fase.bil_id=bilancioid
                           AND    fase.fase_bil_elab_id=fasebilelabid
                           AND    fase.data_cancellazione IS NULL
                           AND    fase.elem_id IS NOT NULL
                           AND    fase.elem_prov_id IS NOT NULL
                           AND    fase.elem_prov_new_id IS NULL
                           AND    v.data_cancellazione IS NULL
                           AND    v.validita_fine IS NULL );

        codresult:=NULL;
        strmessaggio:='Fine inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente.';
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        -- verifica dati inseriti
        codresult:=NULL;
        strmessaggio:='Inizio verifica inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente.';
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_stato].Verifica esistenza relazione stati.';
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.data_cancellazione IS NULL
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_stato stato
                          WHERE    stato.elem_id=fase.elem_prov_id
                          AND      stato.data_cancellazione IS NULL
                          AND      stato.validita_fine IS NULL
                          ORDER BY stato.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Elementi di bilancio assenti di relazione.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_attr].Verifica esistenza attributi.';
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.data_cancellazione IS NULL
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_attr attr
                          WHERE    attr.elem_id=fase.elem_prov_id
                          AND      attr.data_cancellazione IS NULL
                          AND      attr.validita_fine IS NULL
                          ORDER BY attr.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Elementi di bilancio assenti di relazione.';
        END IF;
        --ANTO JIRA-SIAC-4167
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni classificatori.';
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.data_cancellazione IS NULL
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_class class,
                                   siac_t_class c
                          WHERE    class.elem_id=fase.elem_prov_id
                          AND      class.data_cancellazione IS NULL
                          AND      class.validita_fine IS NULL
                          AND      c.classif_id=class.classif_id
                          AND      c.data_cancellazione IS NULL
                          AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                          AND      (
                                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                   OR       c.validita_fine IS NULL)
                          ORDER BY class.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Elementi di bilancio assenti di relazione.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_categoria].Verifica esistenza relazioni categoria.';
        SELECT DISTINCT 1
        INTO            codresult
        FROM            fase_bil_t_gest_apertura_provv fase
        WHERE           fase.ente_proprietario_id=enteproprietarioid
        AND             fase.bil_id=bilancioid
        AND             fase.fase_bil_elab_id=fasebilelabid
        AND             fase.elem_id IS NOT NULL
        AND             fase.elem_prov_id IS NOT NULL
        AND             fase.elem_prov_new_id IS NULL
        AND             fase.data_cancellazione IS NULL
        AND             NOT EXISTS
                        (
                               SELECT 1
                               FROM   siac_r_bil_elem_categoria class
                               WHERE  class.elem_id=fase.elem_prov_id
                               AND    class.data_cancellazione IS NULL
                               AND    class.validita_fine IS NULL) limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Elementi di bilancio assenti di relazione.';
        END IF;
        -- verifica se esistono elementi senza classificatori obbligatori (**)
        -- controlli sui classificatori obbligatori
        -- CL_CDC, CL_CDR
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni struttura amministrativa.';
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.data_cancellazione IS NULL
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_class class ,
                                   siac_t_class c
                          WHERE    class.elem_id=fase.elem_prov_id
                          AND      c.classif_id=class.classif_id
                          AND      c.classif_tipo_id IN (cdctipoid,
                                                         cdrtipoid)
                          AND      class.data_cancellazione IS NULL
                          AND      class.validita_fine IS NULL
                          AND      c.data_cancellazione IS NULL
                          AND      c.validita_fine IS NULL
                                   --ANTO JIRA-SIAC-4167
                          AND      c.data_cancellazione IS NULL
                          /*siac-5297
                          AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                          AND      (
                                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                   OR       c.validita_fine IS NULL)
                          */
                          ORDER BY class.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


        --12.12.2016 JIRA-SIAC-4167
        IF codresult IS NOT NULL THEN
          codresult:=NULL;
          strmessaggio:=strmessaggio
          ||' Inserimento segnalazione mancanza classif.';
          INSERT INTO fase_bil_t_prev_apertura_segnala
                      (
                                  elem_id,
                                  elem_code,
                                  elem_code2,
                                  elem_code3,
                                  bil_id,
                                  fase_bil_elab_id,
                                  segnala_codice,
                                  segnala_desc,
                                  validita_inizio,
                                  ente_proprietario_id,
                                  login_operazione
                      )
                      (
                             SELECT fase.elem_prov_id,
                                    fase.elem_code,
                                    fase.elem_code2,
                                    fase.elem_code3,
                                    fase.bil_id,
                                    fasebilelabid,
                                    'SAC',
                                    'SAC'
                                           ||' mancante',
                                    datainizioval,
                                    fase.ente_proprietario_id,
                                    loginoperazione
                             FROM   fase_bil_t_gest_apertura_provv fase
                             WHERE  fase.ente_proprietario_id=enteproprietarioid
                             AND    fase.elem_id IS NOT NULL
                             AND    fase.elem_prov_id IS NOT NULL
                             AND    fase.elem_prov_new_id IS NULL
                             AND    fase.bil_id=bilancioid
                             AND    fase.fase_bil_elab_id=fasebilelabid
                             AND    fase.data_cancellazione IS NULL
                             AND    NOT EXISTS
                                    (
                                             SELECT   1
                                             FROM     siac_r_bil_elem_class class ,
                                                      siac_t_class c
                                             WHERE    class.elem_id=fase.elem_prov_id
                                             AND      c.classif_id=class.classif_id
                                             AND      c.classif_tipo_id IN (cdctipoid,
                                                                            cdrtipoid)
                                             AND      class.data_cancellazione IS NULL
                                             AND      class.validita_fine IS NULL
                                             AND      c.data_cancellazione IS NULL
                                             /*siac-5297
                                             AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                             AND      (date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)OR       c.validita_fine IS NULL)
                                             */
                                             ORDER BY class.elem_id limit 1) );

        END IF;
        -- CL_PDC_FIN_QUINTO, CL_PDC_FIN_QUARTO
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
        ||cl_pdc_fin_quarto
        ||' '
        ||cl_pdc_fin_quinto
        ||'.';
        -- Il classificatore deve essere obbligatoriamente presente solo se capitolo gestione STD
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase ,
                 siac_r_bil_elem_categoria rcat ,
                 siac_d_bil_elem_categoria cat
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.data_cancellazione IS NULL
        AND      rcat.elem_id=fase.elem_prov_id
        AND      rcat.data_cancellazione IS NULL
        AND      rcat.validita_fine IS NULL
        AND      rcat.elem_cat_id=cat.elem_cat_id
        AND      cat.elem_cat_code = categoria_std
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_class class ,
                                   siac_t_class c
                          WHERE    class.elem_id=fase.elem_prov_id
                          AND      c.classif_id=class.classif_id
                          AND      c.classif_tipo_id IN (pdcfinivid,
                                                         pdcfinvid)
                          AND      class.data_cancellazione IS NULL
                          AND      class.validita_fine IS NULL
                          AND      c.data_cancellazione IS NULL
                                   --ANTO JIRA-SIAC-4167
                          AND      c.validita_fine IS NULL
                          /*siac-5297
                          AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                          AND      (
                                            date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                   OR       c.validita_fine IS NULL)
                                   */
                          ORDER BY class.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


        IF codresult IS NOT NULL THEN
          codresult:=NULL;
          strmessaggio:=strmessaggio
          ||' Inserimento segnalazione mancanza classif.';
          INSERT INTO fase_bil_t_prev_apertura_segnala
                      (
                                  elem_id,
                                  elem_code,
                                  elem_code2,
                                  elem_code3,
                                  bil_id,
                                  fase_bil_elab_id,
                                  segnala_codice,
                                  segnala_desc,
                                  validita_inizio,
                                  ente_proprietario_id,
                                  login_operazione
                      )
                      (
                             SELECT fase.elem_prov_id,
                                    fase.elem_code,
                                    fase.elem_code2,
                                    fase.elem_code3,
                                    fase.bil_id,
                                    fasebilelabid,
                                    'PDCFIN',
                                    'PDCFIN'
                                           ||' mancante',
                                    datainizioval,
                                    fase.ente_proprietario_id,
                                    loginoperazione
                             FROM   fase_bil_t_gest_apertura_provv fase ,
                                    siac_r_bil_elem_categoria rcat,
                                    siac_d_bil_elem_categoria cat
                             WHERE  fase.ente_proprietario_id=enteproprietarioid
                             AND    fase.bil_id=bilancioid
                             AND    fase.fase_bil_elab_id=fasebilelabid
                             AND    fase.elem_id IS NOT NULL
                             AND    fase.elem_prov_id IS NOT NULL
                             AND    fase.elem_prov_new_id IS NULL
                             AND    fase.data_cancellazione IS NULL
                             AND    rcat.elem_id=fase.elem_prov_id
                             AND    rcat.data_cancellazione IS NULL
                             AND    rcat.validita_fine IS NULL
                             AND    rcat.elem_cat_id=cat.elem_cat_id
                             AND    cat.elem_cat_code = categoria_std
                             AND    NOT EXISTS
                                    (
                                             SELECT   1
                                             FROM     siac_r_bil_elem_class class ,
                                                      siac_t_class c
                                             WHERE    class.elem_id=fase.elem_prov_id
                                             AND      c.classif_id=class.classif_id
                                             AND      c.classif_tipo_id IN (pdcfinivid,
                                                                            pdcfinvid)
                                             AND      class.data_cancellazione IS NULL
                                             AND      class.validita_fine IS NULL
                                             AND      c.data_cancellazione IS NULL
                                             /*siac-5297
                                             AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                             AND      (
                                                               date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                      OR       c.validita_fine IS NULL)
                                             */
                                             ORDER BY class.elem_id limit 1) );

        END IF;

        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_atto_legge].Verifica esistenza relazioni atti di legge.';
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase,
                 siac_r_bil_elem_atto_legge v
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      v.elem_id=fase.elem_id
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.data_cancellazione IS NULL
        AND      v.data_cancellazione IS NULL
        AND      v.validita_fine IS NULL
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_atto_legge class
                          WHERE    class.elem_id=fase.elem_prov_id
                          AND      class.data_cancellazione IS NULL
                          AND      class.validita_fine IS NULL
                          ORDER BY class.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Elementi di bilancio assenti di relazione.';
        END IF;
        codresult:=NULL;
        strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_rel_tempo].Verifica esistenza relazioni.';
        SELECT   1
        INTO     codresult
        FROM     fase_bil_t_gest_apertura_provv fase,
                 siac_r_bil_elem_rel_tempo v
        WHERE    fase.ente_proprietario_id=enteproprietarioid
        AND      v.elem_id=fase.elem_id
        AND      fase.bil_id=bilancioid
        AND      fase.fase_bil_elab_id=fasebilelabid
        AND      fase.elem_id IS NOT NULL
        AND      fase.elem_prov_id IS NOT NULL
        AND      fase.elem_prov_new_id IS NULL
        AND      fase.data_cancellazione IS NULL
        AND      v.data_cancellazione IS NULL
        AND      v.validita_fine IS NULL
        AND      NOT EXISTS
                 (
                          SELECT   1
                          FROM     siac_r_bil_elem_rel_tempo class
                          WHERE    class.elem_id=fase.elem_prov_id
                          AND      class.data_cancellazione IS NULL
                          AND      class.validita_fine IS NULL
                          ORDER BY class.elem_id limit 1)
        ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

        IF codresult IS NOT NULL THEN
          RAISE
        EXCEPTION
          ' Elementi di bilancio assenti di relazione.';
        END IF;
        IF euelemtipo=tipo_elem_eu THEN
          -- Classificatore necessario solo per capitolo di categoria STD
          -- CL_PROGRAMMA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_programma
          ||'.';
          SELECT 1
          INTO   codresult
          FROM   fase_bil_t_gest_apertura_provv fase,
                 siac_r_bil_elem_categoria rcat,
                 siac_d_bil_elem_categoria cat
          WHERE  fase.ente_proprietario_id=enteproprietarioid
          AND    fase.bil_id=bilancioid
          AND    fase.fase_bil_elab_id=fasebilelabid
          AND    fase.elem_id IS NOT NULL
          AND    fase.elem_prov_id IS NOT NULL
          AND    fase.elem_prov_new_id IS NULL
          AND    fase.data_cancellazione IS NULL
          AND    rcat.elem_id=fase.elem_prov_id
          AND    rcat.data_cancellazione IS NULL
          AND    rcat.validita_fine IS NULL
          AND    rcat.elem_cat_id=cat.elem_cat_id
          AND    cat.elem_cat_code = categoria_std
          AND    NOT EXISTS
                 (
                        SELECT 1
                        FROM   siac_r_bil_elem_class class ,
                               siac_t_class c
                        WHERE  class.elem_id=fase.elem_prov_id
                        AND    c.classif_id=class.classif_id
                        AND    c.classif_tipo_id=programmatipoid
                        AND    class.data_cancellazione IS NULL
                        AND    class.validita_fine IS NULL
                        AND    c.data_cancellazione IS NULL
                        AND    c.validita_fine IS NULL
                               /*siac-5297
                        AND    date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                        AND    (
                                      date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                               OR     c.validita_fine IS NULL) limit 1*/
                        ) limit 1;


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_programma,
                                      cl_programma
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase,
                                      siac_r_bil_elem_categoria rcat,
                                      siac_d_bil_elem_categoria cat
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    rcat.elem_id=fase.elem_prov_id
                               AND    rcat.data_cancellazione IS NULL
                               AND    rcat.validita_fine IS NULL
                               AND    rcat.elem_cat_id=cat.elem_cat_id
                               AND    cat.elem_cat_code = categoria_std
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id =programmatipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)*/
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- Classificatore necessario solo per capitolo di categoria STD
          -- CL_MACROAGGREGATO
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_macroaggregato
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase ,
                   siac_r_bil_elem_categoria rcat ,
                   siac_d_bil_elem_categoria cat
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
          AND      rcat.elem_id=fase.elem_prov_id
          AND      rcat.data_cancellazione IS NULL
          AND      rcat.validita_fine IS NULL
          AND      rcat.elem_cat_id=cat.elem_cat_id
          AND      cat.elem_cat_code = categoria_std
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_tipo_id=macroaggrtipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_macroaggregato,
                                      cl_macroaggregato
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase,
                                      siac_r_bil_elem_categoria rcat,
                                      siac_d_bil_elem_categoria cat
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    rcat.elem_id=fase.elem_prov_id
                               AND    rcat.data_cancellazione IS NULL
                               AND    rcat.validita_fine IS NULL
                               AND    rcat.elem_cat_id=cat.elem_cat_id
                               AND    cat.elem_cat_code = categoria_std
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id =macroaggrtipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- CL_COFOG
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_cofog
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
                   -- Classificatore definito in gestione deve essere stato ribaltato su provvisorio
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=cofogtipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
/*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=cofogtipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL

                                     /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_cofog,
                                      cl_cofog
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=cofogtipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=cofogtipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- CL_RICORRENTE_SPESA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_ricorrente_spesa
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
                   -- Classificatore definito in gestione deve essere stato ribaltato su provvisorio
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=ricorrentespesaid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                                     /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=ricorrentespesaid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                                    /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_ricorrente_spesa,
                                      cl_ricorrente_spesa
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=ricorrentespesaid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=ricorrentespesaid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                               */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- CL_SIOPE_SPESA_TERZO
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_siope_spesa_terzo
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=siopespesatipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                            */
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=siopespesatipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                            */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_siope_spesa_terzo,
                                      cl_siope_spesa_terzo
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=siopespesatipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=siopespesatipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- CL_TRANSAZIONE_UE_SPESA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_transazione_ue_spesa
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
                   -- Classificatore definito in gestione deve essere stato ribaltato su provvisorio
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=transazioneuespesaid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=transazioneuespesaid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                             /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_transazione_ue_spesa,
                                      cl_transazione_ue_spesa
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=transazioneuespesaid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=transazioneuespesaid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
        ELSE
          -- CL_CATEGORIA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_categoria
          ||'.';
          -- Classificatore deve essere obbligatoriamente presente solo se capitolo STD
          SELECT DISTINCT 1
          INTO            codresult
          FROM            fase_bil_t_gest_apertura_provv fase,
                          siac_r_bil_elem_categoria rcat,
                          siac_d_bil_elem_categoria cat
          WHERE           fase.ente_proprietario_id=enteproprietarioid
          AND             fase.bil_id=bilancioid
          AND             fase.fase_bil_elab_id=fasebilelabid
          AND             fase.elem_id IS NOT NULL
          AND             fase.elem_prov_id IS NOT NULL
          AND             fase.elem_prov_new_id IS NULL
          AND             fase.data_cancellazione IS NULL
          AND             rcat.elem_id=fase.elem_prov_id
          AND             rcat.data_cancellazione IS NULL
          AND             rcat.validita_fine IS NULL
          AND             rcat.elem_cat_id=cat.elem_cat_id
          AND             cat.elem_cat_code = categoria_std
          AND             NOT EXISTS
                          (
                                 SELECT 1
                                 FROM   siac_r_bil_elem_class class ,
                                        siac_t_class c
                                 WHERE  class.elem_id=fase.elem_prov_id
                                 AND    c.classif_id=class.classif_id
                                 AND    c.classif_tipo_id=categoriatipoid
                                 AND    class.data_cancellazione IS NULL
                                 AND    class.validita_fine IS NULL
                                 AND    c.data_cancellazione IS NULL
                                 AND    c.validita_fine IS NULL
                                 /*siac-5297
                                 AND    date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                 AND    (
                                               date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                        OR     c.validita_fine IS NULL)
                                        */
                                         limit 1);


          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_categoria,
                                      cl_categoria
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase,
                                      siac_r_bil_elem_categoria rcat,
                                      siac_d_bil_elem_categoria cat
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    rcat.elem_id=fase.elem_prov_id
                               AND    rcat.data_cancellazione IS NULL
                               AND    rcat.validita_fine IS NULL
                               AND    rcat.elem_cat_id=cat.elem_cat_id
                               AND    cat.elem_cat_code = categoria_std
                               AND    NOT EXISTS
                                      (
                                             SELECT 1
                                             FROM   siac_r_bil_elem_class class ,
                                                    siac_t_class c
                                             WHERE  class.elem_id=fase.elem_prov_id
                                             AND    c.classif_id=class.classif_id
                                             AND    c.classif_tipo_id=categoriatipoid
                                             AND    class.data_cancellazione IS NULL
                                             AND    class.validita_fine IS NULL
                                             AND    c.data_cancellazione IS NULL
                                             /*siac-5297
                                             AND    date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                             AND    (
                                                           date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                    OR     c.validita_fine IS NULL)
                                                    */
                                                    limit 1) );

          END IF;
          -- CL_RICORRENTE_ENTRATA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_ricorrente_entrata
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
                   -- Classificatore definito in provvisorio deve essere stato ribaltato su gestione
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=ricorrenteentrataid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)*/
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=ricorrenteentrataid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_ricorrente_entrata,
                                      cl_ricorrente_entrata
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=ricorrenteentrataid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=ricorrenteentrataid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- CL_SIOPE_ENTRATA_TERZO
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_siope_entrata_terzo
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=siopeentratatipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                             /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=siopeentratatipoid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_siope_entrata_terzo,
                                      cl_siope_entrata_terzo
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=siopeentratatipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=siopeentratatipoid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
          -- CL_TRANSAZIONE_UE_ENTRATA
          codresult:=NULL;
          strmessaggio:='Inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente [siac_r_bil_elem_class].Verifica esistenza relazioni '
          ||cl_transazione_ue_entrata
          ||'.';
          SELECT   1
          INTO     codresult
          FROM     fase_bil_t_gest_apertura_provv fase
          WHERE    fase.ente_proprietario_id=enteproprietarioid
          AND      fase.bil_id=bilancioid
          AND      fase.fase_bil_elab_id=fasebilelabid
          AND      fase.elem_id IS NOT NULL
          AND      fase.elem_prov_id IS NOT NULL
          AND      fase.elem_prov_new_id IS NULL
          AND      fase.data_cancellazione IS NULL
                   -- Classificatore definito in gestione deve essere stato ribaltato su provvisorio
          AND      EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=transazioneueentrataid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          AND      NOT EXISTS
                   (
                            SELECT   1
                            FROM     siac_r_bil_elem_class class ,
                                     siac_t_class c
                            WHERE    class.elem_id=fase.elem_prov_id
                            AND      c.classif_id=class.classif_id
                            AND      c.classif_tipo_id=transazioneueentrataid
                            AND      class.data_cancellazione IS NULL
                            AND      class.validita_fine IS NULL
                            AND      c.data_cancellazione IS NULL
                            AND      c.validita_fine IS NULL
                            /*siac-5297
                            AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                            AND      (
                                              date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                     OR       c.validita_fine IS NULL)
                                     */
                            ORDER BY class.elem_id limit 1)
          ORDER BY fase.fase_bil_gest_ape_prov_id limit 1;

          IF codresult IS NOT NULL THEN
            strmessaggio:=strmessaggio
            ||' Inserimento segnalazione mancanza classif.';
            INSERT INTO fase_bil_t_prev_apertura_segnala
                        (
                                    elem_id,
                                    elem_code,
                                    elem_code2,
                                    elem_code3,
                                    bil_id,
                                    fase_bil_elab_id,
                                    segnala_codice,
                                    segnala_desc,
                                    validita_inizio,
                                    ente_proprietario_id,
                                    login_operazione
                        )
                        (
                               SELECT fase.elem_prov_id,
                                      fase.elem_code,
                                      fase.elem_code2,
                                      fase.elem_code3,
                                      fase.bil_id,
                                      fasebilelabid,
                                      cl_transazione_ue_entrata,
                                      cl_transazione_ue_entrata
                                             ||' mancante',
                                      datainizioval,
                                      fase.ente_proprietario_id,
                                      loginoperazione
                               FROM   fase_bil_t_gest_apertura_provv fase
                               WHERE  fase.ente_proprietario_id=enteproprietarioid
                               AND    fase.bil_id=bilancioid
                               AND    fase.fase_bil_elab_id=fasebilelabid
                               AND    fase.elem_id IS NOT NULL
                               AND    fase.elem_prov_id IS NOT NULL
                               AND    fase.elem_prov_new_id IS NULL
                               AND    fase.data_cancellazione IS NULL
                               AND    EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=transazioneueentrataid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1)
                               AND    NOT EXISTS
                                      (
                                               SELECT   1
                                               FROM     siac_r_bil_elem_class class ,
                                                        siac_t_class c
                                               WHERE    class.elem_id=fase.elem_prov_id
                                               AND      c.classif_id=class.classif_id
                                               AND      c.classif_tipo_id=transazioneueentrataid
                                               AND      class.data_cancellazione IS NULL
                                               AND      class.validita_fine IS NULL
                                               AND      c.data_cancellazione IS NULL
                                               /*siac-5297
                                               AND      date_trunc('day',datainiziovalclass)>=date_trunc('day',c.validita_inizio)
                                               AND      (
                                                                 date_trunc('day',datafinevalclass)<=date_trunc('day',c.validita_fine)
                                                        OR       c.validita_fine IS NULL)
                                                        */
                                               ORDER BY class.elem_id limit 1) );

          END IF;
        END IF;
        codresult:=NULL;
        strmessaggio:='Fine verifica inserimento nuove strutture provvisorio esistenti da gestione equivalente anno precedente.';
        INSERT INTO fase_bil_t_elaborazione_log
                    (
                                fase_bil_elab_id,
                                fase_bil_elab_log_operazione,
                                validita_inizio,
                                login_operazione,
                                ente_proprietario_id
                    )
                    VALUES
                    (
                                fasebilelabid,
                                strmessaggio,
                                clock_timestamp(),
                                loginoperazione,
                                enteproprietarioid
                    )
        returning   fase_bil_elab_log_id
        INTO        codresult;

        IF codresult IS NULL THEN
          RAISE
        EXCEPTION
          ' Errore in inserimento LOG.';
        END IF;
      END IF;
    END IF;
    strmessaggio:='Aggiornamento fase elaborazione [fase_bil_t_elaborazione].';
    UPDATE fase_bil_t_elaborazione
    SET    fase_bil_elab_esito='IN2',
           fase_bil_elab_esito_msg='ELABORAZIONE FASE BILANCIO '
                  ||ape_prov_da_gest
                  ||' IN CORSO : AGGIORNAMENTO STRUTTURE COMPLETATO.'
    WHERE  fase_bil_elab_id=fasebilelabid;

    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
                (
                            fase_bil_elab_id,
                            fase_bil_elab_log_operazione,
                            validita_inizio,
                            login_operazione,
                            ente_proprietario_id
                )
                VALUES
                (
                            fasebilelabid,
                            strmessaggio,
                            clock_timestamp(),
                            loginoperazione,
                            enteproprietarioid
                )
    returning   fase_bil_elab_log_id
    INTO        codresult;

    IF codresult IS NULL THEN
      RAISE
    EXCEPTION
      ' Errore in inserimento LOG.';
    END IF;
    fasebilelabidret:= fasebilelabid;
    messaggiorisultato:=strmessaggiofinale
    ||'OK .';
    RETURN;
  EXCEPTION
  WHEN raise_exception THEN
    RAISE notice '% % ERRORE : %',strmessaggiofinale,strmessaggio, substring(upper(SQLERRM) FROM 1 FOR 500);
    messaggiorisultato:=strmessaggiofinale
    ||strmessaggio
    ||'ERRORE :'
    ||' '
    ||substring(upper(SQLERRM) FROM 1 FOR 500) ;
    codicerisultato:=-1;
    RETURN;
  WHEN no_data_found THEN
    RAISE notice ' % % Nessun elemento trovato.' ,strmessaggiofinale,strmessaggio;
    messaggiorisultato:=strmessaggiofinale
    ||strmessaggio
    ||'Nessun elemento trovato.' ;
    codicerisultato:=-1;
    RETURN;
  WHEN OTHERS THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 50);
    messaggiorisultato:=strmessaggiofinale
    ||strmessaggio
    ||'Errore DB '
    ||SQLSTATE
    ||' '
    ||substring(upper(SQLERRM) FROM 1 FOR 50) ;
    codicerisultato:=-1;
    RETURN;
  END;
  $body$ LANGUAGE 'plpgsql' volatile called ON NULL input security invoker cost 100;
 
 
 CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_apertura
(
  annobilancio           integer,
  euElemTipo             varchar,
  bilElemPrevTipo        varchar,
  bilElemGestTipo        varchar,
  faseBilancio           varchar,
  checkGest              boolean,
  impostaImporti         boolean,
  enteproprietarioid     integer,
  loginoperazione        varchar,
  dataelaborazione       timestamp,
  out faseBilElabIdRet   integer,
  out codicerisultato    integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';

	codResult         integer:=null;
    faseBilElabId     integer:=null;
    PROVVISORIO_FASE             CONSTANT varchar:='E';
    PROVVISORIO_DA_PREV_FASE     CONSTANT varchar:='EP';
    GESTIONE_FASE                CONSTANT varchar:='G';

    strRec record;
    importiRec record;

BEGIN
	messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;


	strMessaggioFinale:='Apertura bilancio gestione per Anno bilancio='||annoBilancio::varchar||
                        '. Fase Bilancio di apertura='||faseBilancio||'.';

    -- se la fase di bilancio richiesta ==>  PROVVISORIO (E)
     -- si parte dal bilancio di gestione anno precedente
     -- si crea/aggiorna il nuovo bilancio di gestione provvisorio
    -- se la fase di bilancio richiesta ==>  PROVVISORIO (EP)
     -- si parte dal bilancio di previsione corrente
     -- si crea/aggiorna il nuovo bilancio di gestione provvisorio
    -- se la fase di bilancio richiesta ==> GESTIONE (G)
     -- significa che il bilancio di previsione approvato
     -- si parte dal bilancio di previsione
     -- si crea/aggiorna il nuovo bilancio di gestione defintivo
    if faseBilancio=PROVVISORIO_FASE then
    	strMessaggio:='Apertura bilancio gestione provvisorio - strutture.';
    	select * into strRec
        from fnc_fasi_bil_provv_apertura_struttura
		(annobilancio,
	     euElemTipo,
	     bilElemGestTipo,
	     checkGest,
	     enteproprietarioid,
	     loginoperazione,
	     dataelaborazione);
        if strRec.codiceRisultato=0 then
        	faseBilElabId:=strRec.faseBilElabIdRet;
            strMessaggio:='Apertura bilancio gestione provvisorio - importi.';
        	select * into importiRec
            from fnc_fasi_bil_provv_apertura_importi
			(annobilancio,
		     euElemTipo,
	         bilElemGestTipo,
			 checkGest,
			 impostaImporti,
  			 faseBilElabId,
		     enteproprietarioid,
		     loginoperazione,
		     dataelaborazione);
            if importiRec.codiceRisultato!=0 then
            	strMessaggio:=importiRec.messaggioRisultato;
                codiceRisultato:=importiRec.codiceRisultato;
            end if;
         else
           	strMessaggio:=strRec.messaggioRisultato;
            codiceRisultato:=strRec.codiceRisultato;
         end if;
    elseif faseBilancio=GESTIONE_FASE or faseBilancio=PROVVISORIO_DA_PREV_FASE then -- 13.10.2016 Sofia - aggiunto per gestiore ep da previsione
	    strMessaggio:='Apertura bilancio gestione definitivo - strutture.';
    	select * into strRec
        from fnc_fasi_bil_prev_approva_struttura
	    (annobilancio,
         faseBilancio, -- 13.10.2016 Sofia
		 euElemTipo,
	     bilElemPrevTipo,
		 bilElemGestTipo,
	     checkGest,
	     enteproprietarioid,
	     loginoperazione,
		 dataelaborazione);
         if strRec.codiceRisultato=0 then
         	faseBilElabId:=strRec.faseBilElabIdRet;
            strMessaggio:='Apertura bilancio gestione definitivo - importi.';
            select * into importiRec
            from fnc_fasi_bil_prev_approva_importi
		    (annobilancio,
		     euElemTipo,
			 bilElemPrevTipo,
		     bilElemGestTipo,
			 checkGest,
		     impostaImporti,
		     faseBilElabId,
		     enteproprietarioid,
			 loginoperazione,
			 dataelaborazione);
             if importiRec.codiceRisultato!=0 then
             	strMessaggio:=importiRec.messaggioRisultato;
                codiceRisultato:=importiRec.codiceRisultato;
             end if;
         else
	        strMessaggio:=strRec.messaggioRisultato;
            codiceRisultato:=strRec.codiceRisultato;
         end if;
    else raise exception  'Fase bilancio % non ammessa.',faseBilancio;
    end if;

    if codiceRisultato=0 then
    	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
        faseBilElabIdRet:=faseBilElabId;
    else messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_ribaltamento_vincoli (
  p_tipo_ribaltamento varchar, --'GEST-GEST' 'PREV-GEST'
  p_annobilancio integer,
  p_enteproprietarioid integer,
  p_loginoperazione varchar,
  p_dataelaborazione timestamp,
  out faseBilElabIdRet integer,
  out codicerisultato integer,
  out messaggiorisultato varchar
) returns RECORD
AS
  $body$
  DECLARE
    strmessaggio       			VARCHAR(1500)	:='';
    strmessaggiofinale 			VARCHAR(1500)	:='';
    bilelemidret           		INTEGER  		:=NULL;
    codresult              		INTEGER  		:=NULL;
    datainizioval 				timestamp		:=NULL;
    fasebilelabid    			INTEGER  		:=NULL;
    categoriacapcode 			VARCHAR  		:=NULL;
    bilelemstatoanid 			INTEGER  		:=NULL;
    ape_prev_da_gest            CONSTANT VARCHAR:='APE_PREV';
    --v_dataprimogiornoanno 		timestamp		:=NULL;
    rec_vincoli_prev            RECORD;
    rec_vincoli_gest  			RECORD;
    rec_capitoli_gest 			RECORD;
    rec_capitoli_prev 			RECORD;
    _row_count 					INTEGER;

    --v_vincolo_tipo_id_prev      INTEGER;
    v_vincolo_tipo_id_gest      INTEGER;

    v_bilancio_id          		INTEGER;
    v_bilancio_id_prec     		INTEGER;

    v_periodo_id           		INTEGER;
    v_periodo_id_prec      		INTEGER;

    v_vincolo_id                INTEGER;
    v_elem_id                   INTEGER;
    v_elem_tipo_code            VARCHAR;
    v_elem_tipo_id              INTEGER;
  BEGIN
    messaggiorisultato:='';
    codicerisultato:=0;
    fasebilelabidret:=0;
    datainizioval:= clock_timestamp();
    --v_dataprimogiornoanno:= (p_annobilancio||'-01-01')::timestamp;
    strmessaggiofinale:='Ribaltamento Vincoli.';

    -- inserimento fase_bil_t_elaborazione
    strmessaggio:='Inserimento fase elaborazione [fase_bil_t_elaborazione].';
    INSERT INTO fase_bil_t_elaborazione
    (
      fase_bil_elab_esito,
      fase_bil_elab_esito_msg,
      fase_bil_elab_tipo_id,
      ente_proprietario_id,
      validita_inizio,
      login_operazione
    )
    (
    SELECT 'IN', 'ELABORAZIONE FASE BILANCIO  IN CORSO : RIBALTAMENTO VINCOLI.',
        tipo.fase_bil_elab_tipo_id,
        p_enteproprietarioid,
        datainizioval,
        p_loginoperazione
    FROM
    	fase_bil_d_elaborazione_tipo tipo
    WHERE  tipo.ente_proprietario_id=p_enteproprietarioid
    AND    tipo.fase_bil_elab_tipo_code='APE_GEST_VINCOLI'
    AND    tipo.data_cancellazione IS NULL
    AND    tipo.validita_fine IS NULL)
    returning   fase_bil_elab_id
    INTO        fasebilelabid;


    IF fasebilelabid IS NULL THEN
      RAISE EXCEPTION ' Inserimento non effettuato.';
    END IF;

    faseBilElabIdRet:= fasebilelabid;
    codresult:=NULL;
    INSERT INTO fase_bil_t_elaborazione_log
    (
      fase_bil_elab_id,
      fase_bil_elab_log_operazione,
      validita_inizio,
      login_operazione,
      ente_proprietario_id
    )VALUES(
      fasebilelabid,
      strmessaggio,
      clock_timestamp(),
      p_loginoperazione,
      p_enteproprietarioid
    ) returning   fase_bil_elab_log_id INTO        codresult;

    IF codresult IS NULL THEN
      RAISE EXCEPTION ' Errore in inserimento LOG.';
    END IF;




	--inizio procedura
    strmessaggio:='estraggo il periodo del bilancio in esame = anno-->'||p_annobilancio||'.';
    begin
      select per.periodo_id,bil.bil_id
      into strict v_periodo_id ,v_bilancio_id
      from siac_t_periodo per, siac_t_bil bil
      where  bil.ente_proprietario_id=p_enteproprietarioid
      and    per.periodo_id=bil.periodo_id
      and    per.anno::integer = p_annobilancio;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' periodo inesistente siac_t_periodo ( previsione) anno'||p_annobilancio||'.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' troppi periodi x siac_t_periodo ( previsione) anno'||p_annobilancio||'.';
		 return;
	end;

    strmessaggio:='estraggo il periodo del bilancio anno precedente periodo_code = anno'||p_annobilancio-1||'.';
    begin
      select per.periodo_id,bil.bil_id
      into strict v_periodo_id_prec ,v_bilancio_id_prec
      from siac_t_periodo per, siac_t_bil bil
      where  bil.ente_proprietario_id=p_enteproprietarioid
      and    per.periodo_id=bil.periodo_id
      and    per.anno::integer = p_annobilancio-1;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' periodo inesistente siac_t_periodo ( prec gestione) anno'||p_annobilancio-1||'.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' troppi periodi x siac_t_periodo ( prec gestione) anno'||p_annobilancio-1||'.';
		 return;
	end;


    strmessaggio:='vincolo_tipo_id dei vincoli nuovi di gestione .';
	begin
      select siac_d_vincolo_tipo.vincolo_tipo_id
      into  strict v_vincolo_tipo_id_gest
      from  siac_d_vincolo_tipo
      where siac_d_vincolo_tipo.ente_proprietario_id = p_enteproprietarioid
      and   siac_d_vincolo_tipo.vincolo_tipo_code    = 'G'
      and   siac_d_vincolo_tipo.data_cancellazione is null;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' vincolo_tipo_id inesistente con code G.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' vincolo_tipo_id troppi con code G.';
		 return;
	end;
/*
    strmessaggio:='vincolo_tipo_id dei vincoli di previsione .';
	begin
      select siac_d_vincolo_tipo.vincolo_tipo_id
      into  strict v_vincolo_tipo_id_prev
      from  siac_d_vincolo_tipo
      where siac_d_vincolo_tipo.ente_proprietario_id = p_enteproprietarioid
      and   siac_d_vincolo_tipo.vincolo_tipo_code    = 'P'
      and   siac_d_vincolo_tipo.data_cancellazione is null;
    exception
		when NO_DATA_FOUND then
		 messaggiorisultato:=' vincolo_tipo_id inesistente con code P.';
		 return;
		when TOO_MANY_ROWS THEN
		 messaggiorisultato:=' vincolo_tipo_id troppi con code P.';
		 return;
	end;
*/

   /* execute 'CREATE TABLE IF NOT EXISTS siac_t_vincolo_tmp(id INTEGER);';

    strmessaggio:='cancello eventuale ribaltamento fatto precedentemente';
    delete from siac_r_vincolo_bil_elem using siac_t_vincolo_tmp 	where  siac_r_vincolo_bil_elem.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_r_vincolo_genere using siac_t_vincolo_tmp 		where  siac_r_vincolo_genere.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_r_vincolo_attr using siac_t_vincolo_tmp 		where  siac_r_vincolo_attr.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_r_vincolo_stato using siac_t_vincolo_tmp 		where  siac_r_vincolo_stato.vincolo_id = siac_t_vincolo_tmp.id ;
    delete from siac_t_vincolo using siac_t_vincolo_tmp 			where  siac_t_vincolo.vincolo_id = siac_t_vincolo_tmp.id ;

    -- pulisco la tabella di bck
    execute 'delete from siac_t_vincolo_tmp;';*/


    -- pulizia dati presenti
    strMessaggio:='Pulizia vincoli di gestione. Cancellazione logica siac_r_vincolo_bil_elem.';
    update siac_r_vincolo_bil_elem r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='G'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

    strMessaggio:='Pulizia vincoli di gestione. Cancellazione logica siac_r_vincolo_attr.';
    update siac_r_vincolo_attr r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='G'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

	strMessaggio:='Pulizia vincoli di gestione. Cancellazione logica siac_r_vincolo_genere.';
    update siac_r_vincolo_genere r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='G'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

    strMessaggio:='Pulizia vincoli di gestione. Cancellazione logica siac_r_vincolo_stato.';
    update siac_r_vincolo_stato r
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=r.login_operazione||'-'||p_loginoperazione
    from siac_t_vincolo v,siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='G'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id
    and   r.vincolo_id=v.vincolo_id
    and   r.data_cancellazione is null
    and   r.validita_fine is null;

    strMessaggio:='Pulizia vincoli di gestione. Cancellazione logica siac_t_vincolo.';
    update siac_t_vincolo v
    set    data_cancellazione=now(),
           validita_fine=now(),
           login_operazione=v.login_operazione||'-'||p_loginoperazione
    from siac_d_vincolo_tipo tipo
    where tipo.ente_proprietario_id=p_enteproprietarioid
    and   tipo.vincolo_tipo_code='G'
    and   v.vincolo_tipo_id=tipo.vincolo_tipo_id
    and   v.periodo_id=v_periodo_id
    and   v.data_cancellazione is null
    and   v.validita_fine is null;

	strmessaggio:='ribalto da gestione anno precedente a gestione anno in esame';
	if p_tipo_ribaltamento = 'GEST-GEST' THEN

            strmessaggio:='inizio ciclo sui vincoli di gestione anno precedente';
            FOR rec_vincoli_gest IN(
               select
                   siac_t_vincolo.vincolo_id
                  ,siac_t_vincolo.vincolo_code
                  ,siac_t_vincolo.vincolo_desc
                  ,siac_t_vincolo.vincolo_tipo_id
                  ,siac_t_vincolo.periodo_id
    --              ,siac_d_vincolo_genere.vincolo_gen_id
              from
                   siac_t_vincolo
                  ,siac_d_vincolo_tipo
                  ,siac_r_vincolo_stato
                  ,siac_d_vincolo_stato
--                  ,siac_r_vincolo_genere
  --                ,siac_d_vincolo_genere
              where
                    siac_t_vincolo.ente_proprietario_id=p_enteproprietarioid
              and   siac_d_vincolo_tipo.vincolo_tipo_id=siac_t_vincolo.vincolo_tipo_id
              and   siac_t_vincolo.vincolo_id = siac_r_vincolo_stato.vincolo_id
              and   siac_r_vincolo_stato.vincolo_stato_id = siac_d_vincolo_stato.vincolo_stato_id
--              and   siac_t_vincolo.vincolo_id =  siac_r_vincolo_genere.vincolo_id
--              and   siac_r_vincolo_genere.vincolo_gen_id = siac_d_vincolo_genere.vincolo_gen_id
              and   siac_d_vincolo_stato.vincolo_stato_code!='A'
              and   siac_d_vincolo_tipo.vincolo_tipo_code='G'
              and   siac_t_vincolo.periodo_id = v_periodo_id_prec
              and 	siac_r_vincolo_stato.data_cancellazione is null
              and 	siac_r_vincolo_stato.validita_fine is null
              and 	siac_t_vincolo.data_cancellazione is null
              and 	siac_t_vincolo.validita_fine is null
--              and   siac_r_vincolo_genere.data_cancellazione is null

            )LOOP

                strmessaggio:='inserimento nuovo vincolo su siac_t_vincolo v_vincolo_tipo_id_gest '||v_vincolo_tipo_id_gest||' v_periodo_id '||v_periodo_id||'.';

                insert into siac_t_vincolo (vincolo_code ,vincolo_desc ,vincolo_tipo_id ,periodo_id ,validita_inizio ,validita_fine ,ente_proprietario_id ,data_creazione ,data_modifica ,data_cancellazione ,login_operazione
                )VALUES(
                   rec_vincoli_gest.vincolo_code
                  ,rec_vincoli_gest.vincolo_desc
                  ,v_vincolo_tipo_id_gest
                  ,v_periodo_id
                  ,now()
                  ,null
                  ,p_enteproprietarioid
                  ,now()
                  ,now()
                  ,null
                  ,p_loginoperazione
                ) returning   vincolo_id INTO v_vincolo_id;

                --mi tengo un bck per sicurezza
                execute 'insert into siac_t_vincolo_tmp (id) values('||v_vincolo_id||');';

                strmessaggio:='inserimento del genere.';
                insert into siac_r_vincolo_genere
                ( vincolo_id,
                  vincolo_gen_id,
                  validita_inizio,
                  ente_proprietario_id,
                  login_operazione
                )
                (
                select
                   v_vincolo_id
                  ,r.vincolo_gen_id
                  ,now()
                  ,p_enteproprietarioid
                  ,p_loginoperazione
                from siac_r_vincolo_genere r
                where r.vincolo_id=rec_vincoli_gest.vincolo_id
                and   r.data_cancellazione is null
                and   r.validita_fine is null
                );

                strmessaggio:='inserimento attributi sul vincolo.';
                insert into siac_r_vincolo_attr (vincolo_id,attr_id,tabella_id,boolean ,percentuale,testo,numerico,validita_inizio ,validita_fine,ente_proprietario_id,data_creazione,data_modifica,data_cancellazione,login_operazione)
                select
                   v_vincolo_id
                  ,attr_id
                  ,tabella_id
                  ,boolean
                  ,percentuale
                  ,testo
                  ,numerico
                  ,now()
                  ,null
                  ,p_enteproprietarioid
                  ,now()
                  ,now()
                  ,null
                  ,p_loginoperazione
                from
                    siac_r_vincolo_attr
                where
                    siac_r_vincolo_attr.ente_proprietario_id = p_enteproprietarioid
                and siac_r_vincolo_attr.vincolo_id =  rec_vincoli_gest.vincolo_id
                and siac_r_vincolo_attr.data_cancellazione is null
                and siac_r_vincolo_attr.validita_fine is null;

                strmessaggio:='inserimento dello stato siac_r_vincolo_stato.';
                insert into siac_r_vincolo_stato (vincolo_id,vincolo_stato_id,validita_inizio,validita_fine ,ente_proprietario_id ,data_creazione,data_modifica,data_cancellazione,login_operazione)
                select
                   v_vincolo_id
                  ,vincolo_stato_id
                  ,now()
                  ,null
                  ,p_enteproprietarioid
                  ,now()
                  ,now()
                  ,null
                  ,p_loginoperazione
                from
                siac_r_vincolo_stato
                 where
                    siac_r_vincolo_stato.ente_proprietario_id = p_enteproprietarioid
                and siac_r_vincolo_stato.vincolo_id =  rec_vincoli_gest.vincolo_id
                and siac_r_vincolo_stato.data_cancellazione is null
                and siac_r_vincolo_stato.validita_fine is null;


                strmessaggio:='ciclo capitoli di gestione da ribaltare di  anno precedente .';
                FOR rec_capitoli_gest IN(
                  select siac_t_bil_elem.elem_id,siac_t_bil_elem.elem_code,siac_t_bil_elem.elem_code2,siac_t_bil_elem.elem_code3 ,siac_d_bil_elem_tipo.elem_tipo_code
                  from siac_r_vincolo_bil_elem , siac_t_bil_elem ,siac_d_bil_elem_tipo
                  where
                      siac_r_vincolo_bil_elem.elem_id =  siac_t_bil_elem.elem_id
                  and siac_t_bil_elem.elem_tipo_id    =  siac_d_bil_elem_tipo.elem_tipo_id
                  and siac_t_bil_elem.bil_id          =  v_bilancio_id_prec
                  and siac_r_vincolo_bil_elem.data_cancellazione is null
                  and siac_r_vincolo_bil_elem.validita_fine is null
                  and siac_r_vincolo_bil_elem.vincolo_id = rec_vincoli_gest.vincolo_id
                  and siac_r_vincolo_bil_elem.ente_proprietario_id = p_enteproprietarioid


                )LOOP

                    strmessaggio:='estraggo il tipo nuovo di prev.';
                    raise notice 'tipo=% elem_code=% elem_id=%' ,rec_capitoli_gest.elem_tipo_code,rec_capitoli_gest.elem_code,rec_capitoli_gest.elem_id;

                    select elem_tipo_id into strict v_elem_tipo_id
                    from siac_d_bil_elem_tipo
                    where
                    ente_proprietario_id = p_enteproprietarioid
                    and elem_tipo_code = rec_capitoli_gest.elem_tipo_code;

                    v_elem_id:=null;
                    strmessaggio:='estraggo elem_id v_elem_tipo_id '|| v_elem_tipo_id::varchar||' rec_capitoli_gest.elem_code '||rec_capitoli_gest.elem_code||' rec_capitoli_gest.elem_code2 '||rec_capitoli_gest.elem_code2||' rec_capitoli_gest.elem_code3 '||rec_capitoli_gest.elem_code3||'.';
--                    select siac_t_bil_elem.elem_id into strict v_elem_id
                    select siac_t_bil_elem.elem_id into v_elem_id
                    FROM   siac_t_bil_elem,siac_t_bil
                    where
                        siac_t_bil_elem.bil_id         = siac_t_bil.bil_id
                    and siac_t_bil.bil_code            = 'BIL_'||p_annobilancio
                    and siac_t_bil_elem.elem_code      = rec_capitoli_gest.elem_code
                    and siac_t_bil_elem.elem_code2     = rec_capitoli_gest.elem_code2
                    and siac_t_bil_elem.elem_code3     = rec_capitoli_gest.elem_code3
                    and siac_t_bil_elem.elem_tipo_id   = v_elem_tipo_id
                    and siac_t_bil_elem.ente_proprietario_id = p_enteproprietarioid;

					if v_elem_id is not null then
                     strmessaggio:='inizio inserimenti per i capitoli .';
                     raise notice 'tipo=% elem_code=% elem_id=%' ,v_elem_tipo_code,rec_capitoli_gest.elem_code,v_elem_id;

                     insert into siac_r_vincolo_bil_elem ( vincolo_id,elem_id,validita_inizio,validita_fine,ente_proprietario_id,data_creazione,data_modifica,data_cancellazione ,login_operazione
                     )values(
                         v_vincolo_id
                        ,v_elem_id
                        ,now()
                        ,null
                        ,p_enteproprietarioid
                        ,now()
                        ,now()
                        ,null
                        ,p_loginoperazione
                     );
                    end if;


                end LOOP;
            end LOOP;
 	end if;

	--ribalto da previsione anno in esame a gestione anno in esame

	if p_tipo_ribaltamento = 'PREV-GEST' THEN
    	      strmessaggio:='ribaltamento da previsiione a gestione dello stesso anno';
              FOR rec_vincoli_prev IN(
                 select
                     siac_t_vincolo.vincolo_id
                    ,siac_t_vincolo.vincolo_code
                    ,siac_t_vincolo.vincolo_desc
                    ,siac_t_vincolo.vincolo_tipo_id
                    ,siac_t_vincolo.periodo_id
--                    ,siac_d_vincolo_genere.vincolo_gen_id
                from
                     siac_t_vincolo
                    ,siac_d_vincolo_tipo
                    ,siac_r_vincolo_stato
                    ,siac_d_vincolo_stato
--                    ,siac_r_vincolo_genere
--                    ,siac_d_vincolo_genere
                where
                      siac_t_vincolo.ente_proprietario_id=p_enteproprietarioid
                and   siac_d_vincolo_tipo.vincolo_tipo_id=siac_t_vincolo.vincolo_tipo_id
                and   siac_t_vincolo.vincolo_id = siac_r_vincolo_stato.vincolo_id
                and   siac_r_vincolo_stato.vincolo_stato_id = siac_d_vincolo_stato.vincolo_stato_id
--                and   siac_t_vincolo.vincolo_id =  siac_r_vincolo_genere.vincolo_id
--                and   siac_r_vincolo_genere.vincolo_gen_id = siac_d_vincolo_genere.vincolo_gen_id
                and   siac_d_vincolo_stato.vincolo_stato_code!='A'
                and   siac_d_vincolo_tipo.vincolo_tipo_code='P'
                and   siac_t_vincolo.periodo_id = v_periodo_id
                and 	siac_r_vincolo_stato.data_cancellazione is null
                and 	siac_r_vincolo_stato.validita_fine is null
                and 	siac_t_vincolo.data_cancellazione is null
                and 	siac_t_vincolo.validita_fine is null
  --              and   siac_r_vincolo_genere.data_cancellazione is null

              )LOOP

                  strmessaggio:='inserimento nuovo vincolo su siac_t_vincolo v_vincolo_tipo_id_gest '||v_vincolo_tipo_id_gest||' v_periodo_id '||v_periodo_id||'.';
                  insert into siac_t_vincolo (vincolo_code ,vincolo_desc ,vincolo_tipo_id ,periodo_id ,validita_inizio ,validita_fine ,ente_proprietario_id ,data_creazione ,data_modifica ,data_cancellazione ,login_operazione
                  )VALUES(
                     rec_vincoli_prev.vincolo_code
                    ,rec_vincoli_prev.vincolo_desc
                    ,v_vincolo_tipo_id_gest
                    ,v_periodo_id
                    ,now()
                    ,null
                    ,p_enteproprietarioid
                    ,now()
                    ,now()
                    ,null
                    ,p_loginoperazione
                  ) returning   vincolo_id INTO v_vincolo_id;

                  --mi tengo un bck per sicurezza
                 -- execute 'insert into siac_t_vincolo_tmp (id) values('||v_vincolo_id||');';

                  strmessaggio:='inserimento del genere.';
                  insert into siac_r_vincolo_genere
                  ( vincolo_id,
                    vincolo_gen_id,
                    validita_inizio,
                    ente_proprietario_id,
                    login_operazione
                  )
                  (
                  select
                     v_vincolo_id
                    ,r.vincolo_gen_id
                    ,now()
                    ,p_enteproprietarioid
                    ,p_loginoperazione
                  from siac_r_vincolo_genere r
                  where r.vincolo_id=rec_vincoli_prev.vincolo_id
                  and   r.data_cancellazione is null
                  and   r.validita_fine is null
                  );

                  strmessaggio:='inserimento attributi sul vincolo.';
                  insert into siac_r_vincolo_attr (vincolo_id,attr_id,tabella_id,boolean ,percentuale,testo,numerico,validita_inizio ,validita_fine,ente_proprietario_id,data_creazione,data_modifica,data_cancellazione,login_operazione)
                  select
                     v_vincolo_id
                    ,attr_id
                    ,tabella_id
                    ,boolean
                    ,percentuale
                    ,testo
                    ,numerico
                    ,now()
                    ,null
                    ,p_enteproprietarioid
                    ,now()
                    ,now()
                    ,null
                    ,p_loginoperazione
                  from
                      siac_r_vincolo_attr
                  where
                      siac_r_vincolo_attr.ente_proprietario_id = p_enteproprietarioid
                  and siac_r_vincolo_attr.vincolo_id =  rec_vincoli_prev.vincolo_id
                  and siac_r_vincolo_attr.data_cancellazione is null
                  and siac_r_vincolo_attr.validita_fine is null;

                  strmessaggio:='inserimento dello stato siac_r_vincolo_stato.';
                  insert into siac_r_vincolo_stato (vincolo_id,vincolo_stato_id,validita_inizio,validita_fine ,ente_proprietario_id ,data_creazione,data_modifica,data_cancellazione,login_operazione)
                  select
                     v_vincolo_id
                    ,vincolo_stato_id
                    ,now()
                    ,null
                    ,p_enteproprietarioid
                    ,now()
                    ,now()
                    ,null
                    ,p_loginoperazione
                  from
                  siac_r_vincolo_stato
                   where
                      siac_r_vincolo_stato.ente_proprietario_id = p_enteproprietarioid
                  and siac_r_vincolo_stato.vincolo_id =  rec_vincoli_prev.vincolo_id
                  and siac_r_vincolo_stato.data_cancellazione is null
                  and siac_r_vincolo_stato.validita_fine is null;


                  strmessaggio:='ciclo capitoli di previsione da ribaltare dello stesso anno .';
                  FOR rec_capitoli_prev IN(
                    select siac_t_bil_elem.elem_id,siac_t_bil_elem.elem_code,siac_t_bil_elem.elem_code2,siac_t_bil_elem.elem_code3 ,siac_d_bil_elem_tipo.elem_tipo_code
                    from siac_r_vincolo_bil_elem , siac_t_bil_elem ,siac_d_bil_elem_tipo
                    where
                        siac_r_vincolo_bil_elem.elem_id =  siac_t_bil_elem.elem_id
                    and siac_t_bil_elem.elem_tipo_id    =  siac_d_bil_elem_tipo.elem_tipo_id
                    and siac_t_bil_elem.bil_id          =  v_bilancio_id
                    and siac_r_vincolo_bil_elem.data_cancellazione is null
                    and siac_r_vincolo_bil_elem.validita_fine is null
                    and siac_r_vincolo_bil_elem.vincolo_id = rec_vincoli_prev.vincolo_id
                    and siac_r_vincolo_bil_elem.ente_proprietario_id = p_enteproprietarioid

                  )LOOP

                      strmessaggio:='deduco il codice del capitolo di gestione nuovo.';

                      if rec_capitoli_prev.elem_tipo_code = 'CAP-UP' THEN
                          v_elem_tipo_code := 'CAP-UG';
                      elseif rec_capitoli_prev.elem_tipo_code = 'CAP-EP' THEN
                          v_elem_tipo_code := 'CAP-EG';
                      end if;

                      strmessaggio:='estraggo il tipo nuovo di prev.';
                      raise notice 'tipo=% elem_code=% elem_id=%' ,rec_capitoli_prev.elem_tipo_code,rec_capitoli_prev.elem_code,rec_capitoli_prev.elem_id;
                      select elem_tipo_id into strict v_elem_tipo_id
                      from siac_d_bil_elem_tipo
                      where
                      ente_proprietario_id = p_enteproprietarioid
                      and elem_tipo_code = v_elem_tipo_code ;

                      strmessaggio:='estraggo elem_id v_elem_tipo_id '|| v_elem_tipo_id::varchar||' rec_capitoli_prev.elem_code '||rec_capitoli_prev.elem_code||' rec_capitoli_prev.elem_code2 '||rec_capitoli_prev.elem_code2||' rec_capitoli_prev.elem_code3 '||rec_capitoli_prev.elem_code3||'.';

--                      select siac_t_bil_elem.elem_id into strict v_elem_id
                      v_elem_id:=null;
                      select siac_t_bil_elem.elem_id into v_elem_id
                      FROM   siac_t_bil_elem,siac_t_bil
                      where
                          siac_t_bil_elem.bil_id         = siac_t_bil.bil_id
                      and siac_t_bil.bil_code            = 'BIL_'||p_annobilancio
                      and siac_t_bil_elem.elem_code      = rec_capitoli_prev.elem_code
                      and siac_t_bil_elem.elem_code2     = rec_capitoli_prev.elem_code2
                      and siac_t_bil_elem.elem_code3     = rec_capitoli_prev.elem_code3
                      and siac_t_bil_elem.elem_tipo_id   = v_elem_tipo_id
                      and siac_t_bil_elem.ente_proprietario_id = p_enteproprietarioid;


                      if v_elem_id is not null then
                       strmessaggio:='inizio inserimenti per i capitoli .';
                       raise notice 'tipo=% elem_code=% elem_id=%' ,v_elem_tipo_code,rec_capitoli_prev.elem_code,v_elem_id;

                       insert into siac_r_vincolo_bil_elem ( vincolo_id,elem_id,validita_inizio,validita_fine,ente_proprietario_id,data_creazione,data_modifica,data_cancellazione ,login_operazione
                       )values(
                           v_vincolo_id
                          ,v_elem_id
                          ,now()
                          ,null
                          ,p_enteproprietarioid
                          ,now()
                          ,now()
                          ,null
                          ,p_loginoperazione
                       );
                      end if;

                  end LOOP;
              end LOOP;
/*    ELSE
      	RAISE notice 'PAREAMETRO p_tipo_ribaltamento non valorizzato correttamente valori ammessi GEST-GEST PREV-GEST. ';
      	messaggiorisultato:='PAREAMETRO p_tipo_ribaltamento non valorizzato correttamente valori ammessi GEST-GEST PROV-GEST. ' ;
      	codicerisultato:=-1;
    	return;*/
    end if;
	--Fine procedura

	strMessaggio:='Aggiornamento elaborazione faseBilElabId='||faseBilElabId||' per conclusione OK.';
    update fase_bil_t_elaborazione set
       fase_bil_elab_esito='OK',
       fase_bil_elab_esito_msg='ELABORAZIONE RIBALTAMENTO VINCOLI TERMINATA.'
    where fase_bil_elab_id=faseBilElabId;

	codResult:=null;
   	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),p_loginoperazione,p_enteproprietarioid)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
       	raise exception ' Errore in inserimento LOG.';
    end if;


    messaggiorisultato := 'vincoli ribaltati correttamente';
    codicerisultato := 0 ;
    RETURN;
  EXCEPTION
  WHEN raise_exception THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 1500);
    messaggiorisultato:=strmessaggiofinale||strmessaggio||'ERRORE: . '||SQLSTATE||' '||substring(upper(SQLERRM) FROM 1 FOR 1500) ;
    codicerisultato:=-1;
    RETURN;
  WHEN no_data_found THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 1500);
    messaggiorisultato:=strmessaggiofinale||strmessaggio||'Nessun elemento trovato. '||SQLSTATE||' '||substring(upper(SQLERRM) FROM 1 FOR 1500) ;
    codicerisultato:=-1;
    RETURN;
  WHEN OTHERS THEN
    RAISE notice '% % Errore DB % %',strmessaggiofinale,strmessaggio,SQLSTATE, substring(upper(SQLERRM) FROM 1 FOR 1500);
    messaggiorisultato:=strmessaggiofinale||strmessaggio||'Errore OTHERS DB '||SQLSTATE||' '||substring(upper(SQLERRM) FROM 1 FOR 1500) ;
    codicerisultato:=-1;
    RETURN;
  END;
  $body$ LANGUAGE 'plpgsql' volatile called ON NULL input security invoker cost 100;
  
  
  CREATE OR REPLACE FUNCTION fnc_fasi_bil_prev_approva_struttura (
  annobilancio integer,
  fasebilancio varchar,
  euelemtipo varchar,
  bilelemprevtipo varchar,
  bilelemgesttipo varchar,
  checkgest boolean,
  enteproprietarioid integer,
  loginoperazione varchar,
  dataelaborazione timestamp,
  out fasebilelabidret integer,
  out codicerisultato integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE


	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';


    FLAG_PER_MEM CONSTANT varchar := 'FlagPerMemoria';

	elemBilPrev record;

	-- CLASSIFICATORI
	CL_MACROAGGREGATO CONSTANT varchar :='MACROAGGREGATO';
	CL_PROGRAMMA CONSTANT varchar :='PROGRAMMA';
    CL_CATEGORIA CONSTANT varchar :='CATEGORIA';
    CL_CDC CONSTANT varchar :='CDC';
    CL_CDR CONSTANT varchar :='CDR';
	CL_RICORRENTE_SPESA CONSTANT varchar:='RICORRENTE_SPESA';
    CL_RICORRENTE_ENTRATA CONSTANT varchar:='RICORRENTE_ENTRATA';
	CL_TRANSAZIONE_UE_SPESA CONSTANT varchar:='TRANSAZIONE_UE_SPESA';
  	CL_TRANSAZIONE_UE_ENTRATA CONSTANT varchar:='TRANSAZIONE_UE_ENTRATA';


    CL_PDC_FIN_QUARTO     CONSTANT varchar :='PDC_IV';
    CL_PDC_FIN_QUINTO     CONSTANT varchar :='PDC_V';
	CL_COFOG 			  CONSTANT varchar :='GRUPPO_COFOG';
	CL_SIOPE_SPESA_TERZO  CONSTANT varchar:='SIOPE_SPESA_I';
    CL_SIOPE_ENTRATA_TERZO  CONSTANT varchar:='SIOPE_ENTRATA_I';

	TIPO_ELAB_P CONSTANT varchar :='P'; -- previsione
    TIPO_ELAB_G CONSTANT varchar :='G'; -- gestione

    TIPO_ELEM_EU CONSTANT varchar:='U';

	APPROVA_PREV_SU_GEST CONSTANT varchar:='APROVA_PREV';

    GESTIONE_FASE       CONSTANT varchar:='G';
    PREVISIONE_FASE     CONSTANT varchar:='P'; -- 13.10.2016 Sofia
    PROVVISORIO_FASE    CONSTANT varchar:='E'; -- 13.10.2016 Sofia
    PROVVISORIO_EP_FASE    CONSTANT varchar:='EP'; -- 13.10.2016 Sofia


	macroAggrTipoId     integer:=null;
    programmaTipoId      integer:=null;
    categoriaTipoId      integer:=null;
    cdcTipoId            integer:=null;
    cdrTipoId            integer:=null;
    ricorrenteSpesaId    integer:=null;
    transazioneUeSpesaId INTEGER:=null;
    ricorrenteEntrataId    integer:=null;
    transazioneUeEntrataId INTEGER:=null;

    pdcFinIVId             integer:=null;
    pdcFinVId             integer:=null;
    cofogTipoId          integer:=null;
    siopeSpesaTipoId          integer:=null;
    siopeEntrataTipoId          integer:=null;

    bilElemGestTipoId integer:=null;
    bilElemPrevTipoId integer:=null;
    bilElemIdRet      integer:=null;
    bilancioId        integer:=null;
    periodoId         integer:=null;
    flagPerMemAttrId  integer:=null;

	codResult         integer:=null;
	dataInizioVal     timestamp:=null;
    faseBilElabId     integer:=null;

    CATEGORIA_STD     constant varchar := 'STD';
    categoriaCapCode  varchar :=null;

    faseOpNew         varchar(15):=null; -- 13.10.2016 Sofia

    -- 04.11.2016 anto JIRA-SIAC-4161
    bilElemStatoAN CONSTANT varchar:='AN';
    -- 04.11.2016 anto JIRA-SIAC-4161
	bilElemStatoANId  integer:=null;

    -- anto JIRA-SIAC-4167 15.11.2016
    dataInizioValClass timestamp:=null;
    dataFineValClass   timestamp:=null;
BEGIN



    messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;

--    dataInizioVal:=date_trunc('DAY', now());
    dataInizioVal:= clock_timestamp(); -- now();

    -- 12.12.2016 Sofia
	dataInizioValClass:= clock_timestamp();
    dataFineValClass:=(annoBilancio||'-01-01')::timestamp;

	strMessaggioFinale:='Approvazione bilancio di previsione.Aggiornamento struttura Gestione '||bilElemGestTipo||' da Previsione '||bilElemPrevTipo||
    					'.Anno bilancio='||annoBilancio::varchar||'.';

    -- inserimento fase_bil_t_elaborazione
	strMessaggio:='Inserimento fase elaborazione [fase_bil_t_elaborazione].';
    insert into fase_bil_t_elaborazione
    (fase_bil_elab_esito, fase_bil_elab_esito_msg,
     fase_bil_elab_tipo_id,
     ente_proprietario_id,validita_inizio, login_operazione)
    (select 'IN','ELABORAZIONE FASE BILANCIO '||APPROVA_PREV_SU_GEST||' IN CORSO : AGGIORNAMENTO STRUTTURE.',
            tipo.fase_bil_elab_tipo_id,enteProprietarioId, dataInizioVal, loginOperazione
     from fase_bil_d_elaborazione_tipo tipo
     where tipo.ente_proprietario_id=enteProprietarioId
     and   tipo.fase_bil_elab_tipo_code=APPROVA_PREV_SU_GEST
     and   tipo.data_cancellazione is null
     and   tipo.validita_fine is null)
     returning fase_bil_elab_id into faseBilElabId;

     if faseBilElabId is null then
     	raise exception ' Inserimento non effettuato.';
     end if;

	 codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;




    strMessaggio:='Lettura bilElemStatoAN  per tipo='||bilElemStatoAN||'.';
	select tipo.elem_stato_id into strict bilElemStatoANId
    from siac_d_bil_elem_stato tipo
    where tipo.elem_stato_code=bilElemStatoAN
    and   tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);


	strMessaggio:='Lettura bilElemPrevTipo  per tipo='||bilElemPrevTipo||'.';
	select tipo.elem_tipo_id into strict bilElemPrevTipoId
    from siac_d_bil_elem_tipo tipo
    where tipo.elem_tipo_code=bilElemPrevTipo
    and   tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	strMessaggio:='Lettura bilElemGestTipo  per tipo='||bilElemGestTipo||'.';
	select tipo.elem_tipo_id into strict bilElemGestTipoId
    from siac_d_bil_elem_tipo tipo
    where tipo.elem_tipo_code=bilElemGestTipo
    and   tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);


    -- lettura classificatori Tipo Id
	strMessaggio:='Lettura flagPerMemAttrId  per attr='||FLAG_PER_MEM||'.';
	select attr.attr_id into strict flagPerMemAttrId
    from siac_t_attr attr
    where attr.ente_proprietario_id=enteProprietarioId
	and   attr.attr_code=FLAG_PER_MEM
    and   attr.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',attr.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',attr.validita_fine) or attr.validita_fine is null);

	strMessaggio:='Lettura cdcTipoId  per classif='||CL_CDC||'.';
	select tipo.classif_tipo_id into strict cdcTipoId
    from siac_d_class_tipo tipo
    where tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.classif_tipo_code=CL_CDC
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	strMessaggio:='Lettura cdcTipoId  per classif='||CL_CDR||'.';
	select tipo.classif_tipo_id into strict cdrTipoId
    from siac_d_class_tipo tipo
    where tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.classif_tipo_code=CL_CDR
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

    strMessaggio:='Lettura pdcFinIVId  per classif='||CL_PDC_FIN_QUARTO||'.';
	select tipo.classif_tipo_id into strict pdcFinIVId
    from siac_d_class_tipo tipo
    where tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.classif_tipo_code=CL_PDC_FIN_QUARTO
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

    strMessaggio:='Lettura pdcFinVId  per classif='||CL_PDC_FIN_QUINTO||'.';
	select tipo.classif_tipo_id into strict pdcFinVId
    from siac_d_class_tipo tipo
    where tipo.ente_proprietario_id=enteProprietarioId
    and   tipo.classif_tipo_code=CL_PDC_FIN_QUINTO
    and   tipo.data_cancellazione is null
    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	if euElemTipo=TIPO_ELEM_EU then
		strMessaggio:='Lettura macroAggrTipoId  per classif='||CL_MACROAGGREGATO||'.';
		select tipo.classif_tipo_id into strict macroAggrTipoId
	    from siac_d_class_tipo tipo
    	where tipo.ente_proprietario_id=enteProprietarioId
	    and   tipo.classif_tipo_code=CL_MACROAGGREGATO
    	and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    	and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

		strMessaggio:='Lettura programmaTipoId  per classif='||CL_PROGRAMMA||'.';
		select tipo.classif_tipo_id into strict programmaTipoId
	    from siac_d_class_tipo tipo
    	where tipo.ente_proprietario_id=enteProprietarioId
	    and   tipo.classif_tipo_code=CL_PROGRAMMA
    	and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    	and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

        strMessaggio:='Lettura ricorrenteSpesaId  per classif='||CL_RICORRENTE_SPESA||'.';
		select tipo.classif_tipo_id into strict ricorrenteSpesaId
    	from siac_d_class_tipo tipo
	    where tipo.ente_proprietario_id=enteProprietarioId
    	and   tipo.classif_tipo_code=CL_RICORRENTE_SPESA
	    and   tipo.data_cancellazione is null
    	and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	    strMessaggio:='Lettura transazioneUeSpesaId  per classif='||CL_TRANSAZIONE_UE_SPESA||'.';
		select tipo.classif_tipo_id into strict transazioneUeSpesaId
    	from siac_d_class_tipo tipo
	    where tipo.ente_proprietario_id=enteProprietarioId
    	and   tipo.classif_tipo_code=CL_TRANSAZIONE_UE_SPESA
	    and   tipo.data_cancellazione is null
    	and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

        strMessaggio:='Lettura cofogTipoId  per classif='||CL_COFOG||'.';
		select tipo.classif_tipo_id into strict cofogTipoId
	    from siac_d_class_tipo tipo
    	where tipo.ente_proprietario_id=enteProprietarioId
	    and   tipo.classif_tipo_code=CL_COFOG
    	and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    	and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	    strMessaggio:='Lettura siopeSpesaTipoId  per classif='||CL_SIOPE_SPESA_TERZO||'.';
		select tipo.classif_tipo_id into strict siopeSpesaTipoId
	    from siac_d_class_tipo tipo
    	where tipo.ente_proprietario_id=enteProprietarioId
	    and   tipo.classif_tipo_code=CL_SIOPE_SPESA_TERZO
    	and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    	and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

    else

		strMessaggio:='Lettura categoriaTipoId  per classif='||CL_CATEGORIA||'.';
		select tipo.classif_tipo_id into strict categoriaTipoId
	    from siac_d_class_tipo tipo
    	where tipo.ente_proprietario_id=enteProprietarioId
	    and   tipo.classif_tipo_code=CL_CATEGORIA
    	and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    	and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

        strMessaggio:='Lettura ricorrenteEntrataId  per classif='||CL_RICORRENTE_ENTRATA||'.';
		select tipo.classif_tipo_id into strict ricorrenteEntrataId
    	from siac_d_class_tipo tipo
	    where tipo.ente_proprietario_id=enteProprietarioId
    	and   tipo.classif_tipo_code=CL_RICORRENTE_ENTRATA
	    and   tipo.data_cancellazione is null
    	and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	    strMessaggio:='Lettura transazioneUeEntrataId  per classif='||CL_TRANSAZIONE_UE_ENTRATA||'.';
		select tipo.classif_tipo_id into strict transazioneUeEntrataId
    	from siac_d_class_tipo tipo
	    where tipo.ente_proprietario_id=enteProprietarioId
    	and   tipo.classif_tipo_code=CL_TRANSAZIONE_UE_ENTRATA
	    and   tipo.data_cancellazione is null
    	and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);

	    strMessaggio:='Lettura siopeEntrataTipoId  per classif='||CL_SIOPE_ENTRATA_TERZO||'.';
		select tipo.classif_tipo_id into strict siopeEntrataTipoId
	    from siac_d_class_tipo tipo
    	where tipo.ente_proprietario_id=enteProprietarioId
	    and   tipo.classif_tipo_code=CL_SIOPE_ENTRATA_TERZO
    	and   tipo.data_cancellazione is null
	    and   date_trunc('day',dataElaborazione)>=date_trunc('day',tipo.validita_inizio)
    	and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',tipo.validita_fine) or tipo.validita_fine is null);


    end if;

    -- fine lettura classificatori Tipo Id
    strMessaggio:='Inserimento LOG per lettura classificatori tipo.';
	codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;

  	strMessaggio:='Lettura bilancioId e periodoId  per annoBilancio='||annoBilancio::varchar||'.';
    select bil.bil_id , per.periodo_id into strict bilancioId, periodoId
    from siac_t_bil bil, siac_t_periodo per
    where bil.ente_proprietario_id=enteProprietarioId
    and   per.periodo_id=bil.periodo_id
    and   per.anno::INTEGER=annoBilancio;


	codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
    end if;

	-- 13.10.2016 Sofia testo il tipo elaborazione
    -- faseBilancio=PROVVISORIO_FASE    -- gestione da gestione   -- provvisorio
    -- faseBilancio=PROVVISORIO_EP_FASE -- gestione da previsione -- provvisorio
	-- faseBilancio=GESTIONE_FASE       -- gestione da previsione -- definitivo
    if faseBilancio=PROVVISORIO_FASE or faseBilancio=PROVVISORIO_EP_FASE then
    	faseOpNew:=PROVVISORIO_FASE;
    elsif faseBilancio=GESTIONE_FASE then
    	faseOpNew:=GESTIONE_FASE;
    end if;

--- 29.06.2016 Sofia - aggiunta gestione fase
--- cancellazione della precedente presente se diversa da G
--- inserimento della nuova G se non gia presente
-- 	strMessaggio:='Cancellazione fase tipo diversa da '||GESTIONE_FASE||' per bilancio annoBilancio='||annoBilancio::varchar||'.';
--  13.10.2016 Sofia
 	strMessaggio:='Cancellazione fase tipo diversa da '||faseOpNew||' per bilancio annoBilancio='||annoBilancio::varchar||'.';
    delete from siac_r_bil_fase_operativa r
    where r.ente_proprietario_id=enteproprietarioid
    and   r.data_cancellazione is null
    and   r.validita_fine is null
    and   r.bil_id=bilancioId
    and   exists (select 1 from siac_d_fase_operativa d
                  where  d.fase_operativa_id=r.fase_operativa_id
                  and    d.fase_operativa_code!=faseOpNew);
--                  and    d.fase_operativa_code!=GESTIONE_FASE); -- 13.10.2016 Sofia

--   	strMessaggio:='Inserimento fase tipo='||GESTIONE_FASE||' per bilancio annoBilancio='||annoBilancio::varchar||'.';
-- 13.10.2016 Sofia
   	strMessaggio:='Inserimento fase tipo='||faseOpNew||' per bilancio annoBilancio='||annoBilancio::varchar||'.';
	insert into siac_r_bil_fase_operativa
	(bil_id,fase_operativa_id, validita_inizio, ente_proprietario_id, login_operazione )
	(select bilancioId,f.fase_operativa_id,dataInizioVal,f.ente_proprietario_id,loginOperazione
	 from siac_d_fase_operativa f
     where f.ente_proprietario_id=enteProprietarioId
--	 and   f.fase_operativa_code=GESTIONE_FASE
	 and   f.fase_operativa_code=faseOpNew      -- 13.10.2016 Sofia
	 and   not exists (select 1 from siac_r_bil_fase_operativa r
     	 		       where  r.bil_id=bilancioId
                       and    r.data_cancellazione is null));

---

	codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
    end if;

	-- pulizia e popolamento tabella appoggio

	-- capitoli previsione non esistenti in gestione
-- 16.02.2016 Danie e Anto: la chiusura del record non  necessaria andando sempre per bilancio id
--    strMessaggio:='Pulizia fase_bil_t_prev_approva_str_elem_gest_nuovo.';
--    update fase_bil_t_prev_approva_str_elem_gest_nuovo g set data_cancellazione=now()
--    where ente_proprietario_id=enteProprietarioId
--    and   bil_id=bilancioId;

	codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;

    -- capitoli previsione esistenti in gestione
	strMessaggio:='Pulizia fase_bil_t_prev_approva_str_elem_gest_esiste.';
    update fase_bil_t_prev_approva_str_elem_gest_esiste set data_cancellazione=now()
    where ente_proprietario_id=enteProprietarioId
    and   bil_id=bilancioId;


	codResult:=null;
	insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
     validita_inizio, login_operazione, ente_proprietario_id
    )
    values
    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
    returning fase_bil_elab_log_id into codResult;

    if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
    end if;

    strMessaggio:='Popolamento fase_bil_t_prev_approva_str_elem_gest_nuovo.';
    insert into fase_bil_t_prev_approva_str_elem_gest_nuovo
    (elem_id,elem_code,elem_code2, elem_code3,
     bil_id,fase_bil_elab_id,
     ente_proprietario_id,validita_inizio,login_operazione)
    (select prev.elem_id, prev.elem_code,prev.elem_code2,prev.elem_code3,
            prev.bil_id,faseBilElabId,
            prev.ente_proprietario_id, dataInizioVal,loginOperazione
     from siac_t_bil_elem prev
     where prev.ente_proprietario_id=enteProprietarioId
     and   prev.elem_tipo_id=bilElemPrevTipoId
     and   prev.bil_id=bilancioId
     and   prev.data_cancellazione is null

     and   exists (select 1 from siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                  					 where rstato.elem_id=prev.elem_id
				                     and   rstato.elem_stato_id!=bilElemStatoANId
					                 and   rstato.data_cancellazione is null
					                 and   rstato.validita_fine is null
				                     )

     and   date_trunc('day',dataElaborazione)>=date_trunc('day',prev.validita_inizio)
     and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',prev.validita_fine) or prev.validita_fine is null)
     and   not exists (select 1 from siac_t_bil_elem gest
                       where gest.ente_proprietario_id=prev.ente_proprietario_id
                       and   gest.bil_id=prev.bil_id
                       and   gest.elem_tipo_id=bilElemGestTipoId
                       and   gest.elem_code=prev.elem_code
                       and   gest.elem_code2=prev.elem_code2
                       and   gest.elem_code3=prev.elem_code3
                       and   gest.data_cancellazione is null

                       and   exists (select 1 from siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                  					 where rstato.elem_id=gest.elem_id
				                     and   rstato.elem_stato_id!=bilElemStatoANId
					                 and   rstato.data_cancellazione is null
					                 and   rstato.validita_fine isnull
				                     )

                       and   date_trunc('day',dataElaborazione)>=date_trunc('day',gest.validita_inizio)
   			 		   and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',gest.validita_fine) or gest.validita_fine is null)
                       order by gest.elem_id limit 1
                      )
     order by prev.elem_code::integer,prev.elem_code2::integer,prev.elem_code3
     );


	 codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

    if checkGest=true then

    	strMessaggio:='Popolamento fase_bil_t_prev_approva_str_elem_gest_esiste - previsione con gestione eq esistente.';
	    insert into fase_bil_t_prev_approva_str_elem_gest_esiste
    	(elem_prev_id, elem_gest_id,elem_code,elem_code2, elem_code3,
         bil_id,fase_bil_elab_id,
         ente_proprietario_id,validita_inizio,login_operazione)
	    (select prev.elem_id, gest.elem_id,prev.elem_code,prev.elem_code2,prev.elem_code3,
                prev.bil_id,faseBilElabId,
                enteProprietarioId, dataInizioVal,loginOperazione
    	 from siac_t_bil_elem prev, siac_t_bil_elem gest
	     where prev.ente_proprietario_id=enteProprietarioId
	     and   prev.elem_tipo_id=bilElemPrevTipoId
	     and   prev.bil_id=bilancioId
	     and   gest.ente_proprietario_id=prev.ente_proprietario_id
	     and   gest.bil_id=prev.bil_id
         and   gest.elem_tipo_id=bilElemGestTipoId
    	 and   gest.elem_code=prev.elem_code
	     and   gest.elem_code2=prev.elem_code2
	     and   gest.elem_code3=prev.elem_code3
		 and   prev.data_cancellazione is null
	     and   date_trunc('day',dataElaborazione)>=date_trunc('day',prev.validita_inizio)
    	 and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',prev.validita_fine) or prev.validita_fine is null)
	     and   gest.data_cancellazione is null
    	 and   date_trunc('day',dataElaborazione)>=date_trunc('day',gest.validita_inizio)
	   	 and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',gest.validita_fine) or gest.validita_fine is null)
	   	 and   exists (select 1 from siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                  					 where rstato.elem_id=prev.elem_id
				                     and   rstato.elem_stato_id!=bilElemStatoANId
					                 and   rstato.data_cancellazione is null
					                 and   rstato.validita_fine isnull
				                     )
		and   exists (select 1 from siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                  					 where rstato.elem_id=gest.elem_id
				                     and   rstato.elem_stato_id!=bilElemStatoANId
					                 and   rstato.data_cancellazione is null
					                 and   rstato.validita_fine isnull
				                     )
    	 order by prev.elem_code::integer,prev.elem_code2::integer,prev.elem_code3
	    );


		codResult:=null;
		insert into fase_bil_t_elaborazione_log
	    (fase_bil_elab_id,fase_bil_elab_log_operazione,
	     validita_inizio, login_operazione, ente_proprietario_id
	    )
	    values
	    (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
	    returning fase_bil_elab_log_id into codResult;

	    if codResult is null then
    	 	raise exception ' Errore in inserimento LOG.';
	    end if;

        -- capitoli gestione esistenti senza capitolo eq in previsione
    	strMessaggio:='Popolamento fase_bil_t_prev_approva_str_elem_gest_esiste - gestione senza previsione eq esistente.';
	    insert into fase_bil_t_prev_approva_str_elem_gest_esiste
    	(elem_prev_id, elem_gest_id,elem_code,elem_code2, elem_code3,
         bil_id,fase_bil_elab_id,
         ente_proprietario_id,validita_inizio,login_operazione)
	    (select null, gest.elem_id,gest.elem_code,gest.elem_code2,gest.elem_code3,
        	 	gest.bil_id,faseBilElabId,
                enteProprietarioId,dataInizioVal,loginOperazione
    	 from  siac_t_bil_elem gest
	     where gest.ente_proprietario_id=enteProprietarioId
	     and   gest.elem_tipo_id=bilElemGestTipoId
	     and   gest.bil_id=bilancioId
	     --and   gest.ente_proprietario_id=prev.ente_proprietario_id
	     --and   gest.bil_id=prev.bil_id
	     and   gest.data_cancellazione is null
	     and   exists (select 1 from siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                  					 where rstato.elem_id=gest.elem_id
				                     and   rstato.elem_stato_id!=bilElemStatoANId
					                 and   rstato.data_cancellazione is null
					                 and   rstato.validita_fine isnull
				                     )
    	 and   date_trunc('day',dataElaborazione)>=date_trunc('day',gest.validita_inizio)
	   	 and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',gest.validita_fine) or gest.validita_fine is null)
         and   not exists (select  1 from siac_t_bil_elem prev
  						   where  prev.ente_proprietario_id=gest.ente_proprietario_id
                           and    prev.bil_id=gest.bil_id
                           and    prev.elem_tipo_id=bilElemPrevTipoId
                           and    prev.elem_code=gest.elem_code
						   and    prev.elem_code2=gest.elem_code2
					       and    prev.elem_code3=gest.elem_code3
					       and    prev.data_cancellazione is null
					       and   exists (select 1 from siac_r_bil_elem_stato rstato -- 15.11.2016 Anto JIRA-SIAC-4161
                  					 where rstato.elem_id=prev.elem_id
				                     and   rstato.elem_stato_id!=bilElemStatoANId
					                 and   rstato.data_cancellazione is null
					                 and   rstato.validita_fine isnull
				                     )
				    	   and    date_trunc('day',dataElaborazione)>=date_trunc('day',prev.validita_inizio)
				      	   and    ( date_trunc('day',dataElaborazione)<=date_trunc('day',prev.validita_fine) or prev.validita_fine is null)
                           order by prev.elem_id limit 1)
    	 order by gest.elem_code::integer,gest.elem_code2::integer,gest.elem_code3
	    );

  	    codResult:=null;
 	    insert into fase_bil_t_elaborazione_log
        (fase_bil_elab_id,fase_bil_elab_log_operazione,
         validita_inizio, login_operazione, ente_proprietario_id
        )
	    values
        (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
        returning fase_bil_elab_log_id into codResult;

        if codResult is null then
     	 raise exception ' Errore in inserimento LOG.';
        end if;

	end if;

    codResult:=null;
    strMessaggio:='Popolamento fase_bil_t_prev_approva_str_elem_gest_nuovo.Verifica esistenza capitoli di previsione da approvare.';
    select 1 into codResult
    from fase_bil_t_prev_approva_str_elem_gest_nuovo fase
    where fase.ente_proprietario_id=enteProprietarioId
    and   fase.bil_id=bilancioId
    and   fase.fase_bil_elab_id=faseBilElabId
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null
    order by fase.fase_bil_prev_str_nuovo_id limit 1;


    if codResult is not null then
 	-- inserimento nuove strutture
    -- capitoli previsione non esistenti in gestione
     strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||'.';

	 codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;


    for elemBilPrev in
    (select elem_id, elem_code,elem_code2,elem_code3
     from fase_bil_t_prev_approva_str_elem_gest_nuovo
     where ente_proprietario_id=enteProprietarioId
     and   bil_id=bilancioId
     and   fase_bil_elab_id=faseBilElabId
     and   data_cancellazione is NULL
     and   validita_fine is null
     order by elem_code::integer,elem_code2::integer,elem_code3
    )
    loop
    	bilElemIdRet:=null;
        strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			  '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                              ||elemBilPrev.elem_code2||' '
                                              ||elemBilPrev.elem_code3||' : siac_t_bil_elem.' ;
        -- siac_t_bil_elem
    	insert into siac_t_bil_elem
	    (elem_code,elem_code2,elem_code3, elem_desc,elem_desc2,
    	 elem_tipo_id, bil_id,ordine,livello,
	     validita_inizio , ente_proprietario_id,login_operazione)
        (select prev.elem_code,prev.elem_code2,prev.elem_code3,prev.elem_desc, prev.elem_desc2,
	            bilElemGestTipoId,bilancioId,prev.ordine,prev.livello,
                dataInizioVal,prev.ente_proprietario_id,loginOperazione
         from siac_t_bil_elem prev
         where prev.elem_id=elemBilPrev.elem_id)
         returning elem_id into bilElemIdRet;

        if bilElemIdRet is null then raise exception ' Inserimento non effettuato.';  end if;

        codResult:=null;
        strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			  '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                              ||elemBilPrev.elem_code2||' '
                                              ||elemBilPrev.elem_code3||' : siac_r_bil_elem_stato.' ;

        -- siac_r_bil_elem_stato
	    strMessaggio:='Inserimento siac_r_bil_elem_stato.';
	    insert into siac_r_bil_elem_stato
    	(elem_id,elem_stato_id,validita_inizio,ente_proprietario_id,login_operazione)
    	(select bilElemIdRet,stato.elem_stato_id,dataInizioVal,stato.ente_proprietario_id, loginOperazione
         from siac_r_bil_elem_stato stato
         where stato.elem_id=elemBilPrev.elem_id
         and   stato.data_cancellazione is null
         and   date_trunc('day',dataElaborazione)>=date_trunc('day',stato.validita_inizio)
	   	 and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',stato.validita_fine) or stato.validita_fine is null)
         )
         returning bil_elem_stato_id into codResult;
         if codResult is null then raise exception ' Inserimento non effettuato.'; end if;

         codResult:=null;
         -- siac_r_bil_elem_categoria
         strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			   '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                              ||elemBilPrev.elem_code2||' '
                                              ||elemBilPrev.elem_code3||' : siac_r_bil_elem_categoria.' ;

         insert into siac_r_bil_elem_categoria
	     (elem_id,  elem_cat_id, validita_inizio,ente_proprietario_id, login_operazione)
         (select bilElemIdRet, cat.elem_cat_id,dataInizioVal,cat.ente_proprietario_id,loginOperazione
          from siac_r_bil_elem_categoria cat
          where cat.elem_id=elemBilPrev.elem_id
          and   cat.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',cat.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',cat.validita_fine) or cat.validita_fine is null)
         )
         returning bil_elem_r_cat_id into codResult;
         if codResult is null then raise exception ' Inserimento non effettuato.'; end if;


         -- 02.03.2016 Dani: leggo categoria capitolo inserita.
         select d.elem_cat_code into categoriaCapCode
         from siac_r_bil_elem_categoria r, siac_d_bil_elem_categoria d where
         d.elem_cat_id=r.elem_cat_id
         and r.bil_elem_r_cat_id=codResult;

         codResult:=null;
         -- siac_r_bil_elem_attr (escludere FLAG_PER_MEM)
         strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			   '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                              ||elemBilPrev.elem_code2||' '
                                              ||elemBilPrev.elem_code3||' : siac_r_bil_elem_attr.' ;
         insert into siac_r_bil_elem_attr
         ( elem_id,attr_id, tabella_id,boolean,percentuale,testo,numerico,
           validita_inizio,ente_proprietario_id,login_operazione
         )
         (select bilElemIdRet, attr.attr_id,attr.tabella_id,attr.boolean,attr.percentuale,attr.testo,attr.numerico,
                 dataInizioVal,attr.ente_proprietario_id, loginOperazione
          from siac_r_bil_elem_attr attr
          where attr.elem_id=elemBilPrev.elem_id
          and   attr.attr_id!=flagPerMemAttrId
          and   attr.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',attr.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',attr.validita_fine) or attr.validita_fine is null)
          );

          select 1 into codResult
          from siac_r_bil_elem_attr
          where elem_id=bilElemIdRet
          and   data_cancellazione is null
          and   validita_fine is null
          order by elem_id
          limit 1;
          if codResult is null then raise exception ' Nessun attributo inserito.'; end if;

/* 31.07.2017 Sofia - gestione vincoli e atti di legge commentata
         codResult:=null;
         -- siac_r_vincolo_bil_elem
         strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			   '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                              ||elemBilPrev.elem_code2||' '
                                              ||elemBilPrev.elem_code3||' : siac_r_vincolo_bil_elem.' ;
         insert into siac_r_vincolo_bil_elem
         ( elem_id,vincolo_id, validita_inizio,ente_proprietario_id,login_operazione
         )
         (select bilElemIdRet, v.vincolo_id, dataInizioVal,v.ente_proprietario_id, loginOperazione
          from siac_r_vincolo_bil_elem v
          where v.elem_id=elemBilPrev.elem_id
          and   v.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
          );

          codResult:=null;
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : siac_r_vincolo_bil_elem.Verifica inserimento.' ;
          select  1  into codResult
          from 	siac_r_vincolo_bil_elem v
          where v.elem_id=elemBilPrev.elem_id
          and   v.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
          and   not exists (select 1 from siac_r_vincolo_bil_elem v1
	                        where v1.elem_id= bilElemIdRet
    	                    and   v1.data_cancellazione is null
				            and   date_trunc('day',dataElaborazione)>=date_trunc('day',v1.validita_inizio)
				  	   	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v1.validita_fine) or v1.validita_fine is null)
                            order by v1.elem_id
                            limit 1
                            )
          order by v.elem_id
          limit 1;
          if codResult is not null then raise exception ' Non effettuato.'; end if;


         codResult:=null;
         -- siac_r_bil_elem_atto_legge
         strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			   '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                              ||elemBilPrev.elem_code2||' '
                                              ||elemBilPrev.elem_code3||' : siac_r_bil_elem_atto_legge.' ;
         insert into siac_r_bil_elem_atto_legge
         ( elem_id,attolegge_id, descrizione, gerarchia,finanziamento_inizio,finanziamento_fine,
           validita_inizio,ente_proprietario_id,login_operazione
         )
         (select bilElemIdRet, v.attolegge_id, v.descrizione,v.gerarchia,v.finanziamento_inizio,v.finanziamento_fine,
                 dataInizioVal,v.ente_proprietario_id, loginOperazione
          from siac_r_bil_elem_atto_legge v
          where v.elem_id=elemBilPrev.elem_id
          and   v.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
          );


          codResult:=null;
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : siac_r_bil_elem_atto_legge.Verifica inserimento.' ;
          select 1  into codResult
          from 	siac_r_bil_elem_atto_legge v
          where v.elem_id=elemBilPrev.elem_id
          and   v.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
          and   not exists (select 1 from siac_r_bil_elem_atto_legge v1
	                        where v1.elem_id= bilElemIdRet
    	                    and   v1.data_cancellazione is null
				            and   date_trunc('day',dataElaborazione)>=date_trunc('day',v1.validita_inizio)
				  	   	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v1.validita_fine) or v1.validita_fine is null)
                            order by v1.elem_id
                            limit 1
                            )
          order by v.elem_id
          limit 1;
          if codResult is not null then raise exception ' Non effettuato.'; end if;
31.07.2017 Sofia - chiusura
*/
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : siac_r_bil_elem_rel_tempo.' ;
 		  insert into siac_r_bil_elem_rel_tempo
          (elem_id, elem_id_old, validita_inizio, ente_proprietario_id,login_operazione)
          (select bilElemIdRet,v.elem_id_old, dataInizioVal,v.ente_proprietario_id, loginOperazione
           from siac_r_bil_elem_rel_tempo v
           where v.elem_id=elemBilPrev.elem_id
	       and   v.data_cancellazione is null
           and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
	   	   and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null));

          codResult:=null;
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : siac_r_bil_elem_rel_tempo.Verifica inserimento.' ;
          select 1  into codResult
          from 	siac_r_bil_elem_rel_tempo v
          where v.elem_id=elemBilPrev.elem_id
          and   v.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',v.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v.validita_fine) or v.validita_fine is null)
          and   not exists (select 1 from siac_r_bil_elem_rel_tempo v1
	                        where v1.elem_id= bilElemIdRet
    	                    and   v1.data_cancellazione is null
				            and   date_trunc('day',dataElaborazione)>=date_trunc('day',v1.validita_inizio)
				  	   	    and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',v1.validita_fine) or v1.validita_fine is null)
                            order by v1.elem_id
                            limit 1
                            )
          order by v.elem_id
          limit 1;
          if codResult is not null then raise exception ' Non effettuato.'; end if;


	      codResult:=null;
	      -- siac_r_bil_elem_class
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : siac_r_bil_elem_class.' ;
		/*
         insert into siac_r_bil_elem_class
         (elem_id,classif_id, validita_inizio, ente_proprietario_id,login_operazione)
         (select bilElemIdRet, class.classif_id,dataInizioVal,class.ente_proprietario_id,loginOperazione
          from siac_r_bil_elem_class class ,
          where class.elem_id=elemBilPrev.elem_id
          and   class.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',class.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',class.validita_fine) or class.validita_fine is null));
          */

          /** JIRA-SIAC-4167 - aggiunto controllo su validita classificatore **/
         insert into siac_r_bil_elem_class
         (elem_id,classif_id, validita_inizio, ente_proprietario_id,login_operazione)
         (select bilElemIdRet, class.classif_id,dataInizioVal,class.ente_proprietario_id,loginOperazione
          from siac_r_bil_elem_class class,siac_t_class c
          where class.elem_id=elemBilPrev.elem_id
          and   c.classif_id=class.classif_id
          and   class.data_cancellazione is null
          and   date_trunc('day',dataElaborazione)>=date_trunc('day',class.validita_inizio)
	   	  and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',class.validita_fine) or class.validita_fine is null)
          and   c.data_cancellazione is null
          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	  and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null));





          select 1 into codResult
          from siac_r_bil_elem_class
          where elem_id=bilElemIdRet
          and   data_cancellazione is null
          and   validita_fine is null
          order by elem_id
          limit 1;
          if codResult is null then raise exception ' Nessun classificatore inserito.'; end if;

          -- controlli sui classificatori obbligatori
          -- CL_CDC, CL_CDR
          codResult:=null;
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_CDC||' '||CL_CDR||'.' ;
           /*
          select 1 into codResult
          from siac_r_bil_elem_class r, siac_t_class c
          where r.elem_id=bilElemIdRet
          and   c.classif_id=r.classif_id
          and   c.classif_tipo_id in (cdcTipoId, cdrTipoId)
          and   c.data_cancellazione is null
          and   c.validita_fine is null
          order by r.elem_id
          limit 1;
          if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
			*/

            /** JIRA-SIAC-4167  **/
		  select 1 into codResult
          from siac_r_bil_elem_class r, siac_t_class c
          where r.elem_id=bilElemIdRet
          and   c.classif_id=r.classif_id
          and   c.classif_tipo_id in (cdcTipoId, cdrTipoId)
          and   c.data_cancellazione is null
          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	  and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
          order by r.elem_id
          limit 1;

          if codResult is null then
           strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
           insert into fase_bil_t_prev_apertura_segnala
           (elem_id,
	        elem_code,
			elem_code2,
			elem_code3,
		    bil_id,
		    fase_bil_elab_id,
		    segnala_codice,
			segnala_desc,
			validita_inizio,
			ente_proprietario_id,
		    login_operazione)
           (select capitolo.elem_id,
                   capitolo.elem_code,
                   capitolo.elem_code2,
                   capitolo.elem_code3,
                   capitolo.bil_id,
                   faseBilElabId,
                   'SAC',
                   'Sac mancante',
                   dataInizioVal,
                   capitolo.ente_proprietario_id,
                   loginOperazione
            from siac_t_bil_elem capitolo
            where  capitolo.elem_id=bilElemIdRet
            )
            returning fase_bil_prev_ape_seg_id into codresult;

            if codResult is null then raise exception 'Nessuno inserimento effettuato.'; end if;
          end if;


   	      -- CL_PDC_FIN_QUINTO, CL_PDC_FIN_QUARTO
		  codResult:=null;
          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_PDC_FIN_QUARTO||' '||CL_PDC_FIN_QUINTO||'.' ;

          /*
          select 1 into codResult
          from siac_r_bil_elem_class r, siac_t_class c
          where r.elem_id=bilElemIdRet
          and   c.classif_id=r.classif_id
          and   c.classif_tipo_id in (pdcFinIVId, pdcFinVId)
          and   c.data_cancellazione is null
          and   c.validita_fine is null
          order by r.elem_id
          limit 1;

          -- 02.03.2016 Dani. l'obbligatorieta' del classificatore vale solo per capitolo STANDARD
		  if categoriaCapCode = CATEGORIA_STD then
	          if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
          end if;
			*/

/** JIRA-SIAC-4167 **/
          select 1 into codResult
          from siac_r_bil_elem_class r, siac_t_class c
          where r.elem_id=bilElemIdRet
          and   c.classif_id=r.classif_id
          and   c.classif_tipo_id in (pdcFinIVId, pdcFinVId)
          and   c.data_cancellazione is null
          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	  and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
          order by r.elem_id
          limit 1;



          -- Obbligatorieta' del classificatore vale solo per capitolo STANDARD
		  if categoriaCapCode = CATEGORIA_STD then
	      --  JIRA-SIAC-4167  if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
           if codResult is null then
          	strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
            insert into fase_bil_t_prev_apertura_segnala
            (elem_id,
	         elem_code,
		 	 elem_code2,
			 elem_code3,
		     bil_id,
		     fase_bil_elab_id,
		     segnala_codice,
			 segnala_desc,
			 validita_inizio,
			 ente_proprietario_id,
		     login_operazione)
            (select capitolo.elem_id,
                    capitolo.elem_code,
                    capitolo.elem_code2,
                    capitolo.elem_code3,
                    capitolo.bil_id,
                    faseBilElabId,
                    'PDCFIN',
                    'PdcFin mancante',
                    dataInizioVal,
                    capitolo.ente_proprietario_id,
                    loginOperazione
             from siac_t_bil_elem capitolo
             where  capitolo.elem_id=bilElemIdRet
             )
             returning fase_bil_prev_ape_seg_id into codresult;

             if codResult is null then raise exception 'Nessuno inserimento effettuato.'; end if;
           end if;
          end if;

          if euElemTipo=TIPO_ELEM_EU then
	          -- CL_PROGRAMMA
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_PROGRAMMA||'.' ;
	          /*
              select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=bilElemIdRet
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=programmaTipoId
              and   c.data_cancellazione is null
         	  and   c.validita_fine is null
              order by r.elem_id
        	  limit 1;
              -- 02.03.2016 Dani. l'obbligatorieta del classificatore vale solo per capitolo STANDARD
              if categoriaCapCode = CATEGORIA_STD then
                  if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;
				*/
/** JIRA-SIAC-4167 **/
			  select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=bilElemIdRet
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=programmaTipoId
              and   c.data_cancellazione is null
         	  and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              order by r.elem_id
        	  limit 1;



              -- Obbligatorieta' del classificatore vale solo per capitolo STANDARD
              if categoriaCapCode = CATEGORIA_STD then
                  -- JIRA-SIAC-4167 if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
                  if codResult is null then

                   strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_PROGRAMMA,
     	                   CL_PROGRAMMA||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

            	   if codResult is null then raise exception 'Nessuno inserimento effettuato.'; end if;
                  end if;
              end if;



    	      -- CL_MACROAGGREGATO
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_MACROAGGREGATO||'.' ;
	          /*
              select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=bilElemIdRet
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=macroAggrTipoId
              and   c.data_cancellazione is null
          	  and   c.validita_fine is null
              order by r.elem_id
        	  limit 1;
          -- 02.03.2016 Dani. l'obbligatorieta' del classificatore vale solo per capitolo STANDARD
              if categoriaCapCode = CATEGORIA_STD then
		          if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;
				*/

                /** JIRA-SIAC-4167 **/
              select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=bilElemIdRet
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=macroAggrTipoId
              and   c.data_cancellazione is null
          	  and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              order by r.elem_id
        	  limit 1;

              -- Obbligatorieta' del classificatore vale solo per capitolo STANDARD
              if categoriaCapCode = CATEGORIA_STD then
		          -- JIRA-SIAC-4167 if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
                  if codResult is null then

                   strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_MACROAGGREGATO,
     	                   CL_MACROAGGREGATO||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

            	   if codResult is null then raise exception 'Nessuno inserimento effettuato.';  end if;

                  end if;
              end if;

			  -- CL_COFOG
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_COFOG||'.' ;

			  -- 02.03.2016 Dani: definizione classificatore neseccaria solo se presente in previsione
              /*
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=cofogTipoId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=cofogTipoId
					             and   c.data_cancellazione is null
							     and   c.validita_fine is null
                                 )
			  order by r.elem_id limit 1;
	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
				*/

                select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=cofogTipoId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
	   	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
		      and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=cofogTipoId
					             and   c.data_cancellazione is null
							     and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
				  	   	         and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                                 )
			  order by r.elem_id limit 1;

              -- --JIRA-SIAC-4167 14.11.2016 Sofia
	          if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_COFOG,
     	                   CL_COFOG||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;

              end if;



        	  -- CL_RICORRENTE_SPESA
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_RICORRENTE_SPESA||'.' ;
			  -- 02.03.2016 Dani: definizione classificatore neseccaria solo se presente in previsione
              /*
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=ricorrenteSpesaId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=ricorrenteSpesaId
					             and   c.data_cancellazione is null
							     and   c.validita_fine is null
                                 )
			  order by r.elem_id limit 1;
	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
				*/
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=ricorrenteSpesaId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
	   	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
		      and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
	   	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=ricorrenteSpesaId
					             and   c.data_cancellazione is null
							     and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
					   	         and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                                )
			  order by r.elem_id limit 1;

              -- JIRA-SIAC-4167 14.11.2016 Sofia
      		  if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_RICORRENTE_SPESA,
     	                   CL_RICORRENTE_SPESA||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;

	          -- CL_SIOPE_SPESA_TERZO
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_SIOPE_SPESA_TERZO||'.' ;
				/*
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=siopeSpesaTipoId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=siopeSpesaTipoId
					             and   c.data_cancellazione is null
							     and   c.validita_fine is null
--                                 order by r.elem_id
--                                 limit 1
                                 )
			  order by r.elem_id
              limit 1;

	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
				*/

                select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=siopeSpesaTipoId
              and   r.data_cancellazione is null
              and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
  	   	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
  	   	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=siopeSpesaTipoId
					             and   c.data_cancellazione is null
							     and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
				  	   	         and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                               )
			  order by r.elem_id
              limit 1;

              -- JIRA-SIAC-4167 14.11.2016 Sofia
              if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_SIOPE_SPESA_TERZO,
     	                   CL_SIOPE_SPESA_TERZO||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;


    	      -- CL_TRANSAZIONE_UE_SPESA
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_TRANSAZIONE_UE_SPESA||'.' ;

			  -- 02.03.2016 Dani: definizione classificatore neseccaria solo se presente in previsione
              /*
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=transazioneUeSpesaId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=transazioneUeSpesaId
					             and   c.data_cancellazione is null
							     and   c.validita_fine is null
                                 )
			  order by r.elem_id limit 1;
	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
              */
select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=transazioneUeSpesaId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
  	   	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
		      and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
  	   	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=transazioneUeSpesaId
					             and   c.data_cancellazione is null
							     and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
					     	     and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                               )
			  order by r.elem_id limit 1;

			  -- JIRA-SIAC-4167 14.11.2016 Sofia
              if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_TRANSAZIONE_UE_SPESA,
     	                   CL_TRANSAZIONE_UE_SPESA||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;
          else

    	      -- CL_CATEGORIA
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_CATEGORIA||'.' ;
	          /*
              select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=bilElemIdRet
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=categoriaTipoId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              order by r.elem_id
        	  limit 1;
          -- 02.03.2016 Dani. l'obbligatorieta' del classificatore vale solo per capitolo STANDARD
              if categoriaCapCode = CATEGORIA_STD then
				  if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;
				*/
              select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=bilElemIdRet
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=categoriaTipoId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
    	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
		      and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
    	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              order by r.elem_id
        	  limit 1;

              -- Obbligatorieta' del classificatore vale solo per capitolo STANDARD
              if categoriaCapCode = CATEGORIA_STD then
                  -- JIRA-SIAC-4167 14.11.2016 Sofia
				  -- if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
                  if codResult is null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_CATEGORIA,
     	                   CL_CATEGORIA||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;
              end if;


        	  -- CL_RICORRENTE_ENTRATA
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_RICORRENTE_ENTRATA||'.' ;
			  -- 02.03.2016 Dani: definizione classificatore neseccaria solo se presente in previsione
              /*
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=ricorrenteEntrataId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=ricorrenteEntrataId
					             and   c.data_cancellazione is null
							     and   c.validita_fine is null
                                 )
			  order by r.elem_id limit 1;
	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
				*/
                select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=ricorrenteEntrataId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
    	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
    	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=ricorrenteEntrataId
					             and   c.data_cancellazione is null
							     and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
					   	         and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                                )
			  order by r.elem_id limit 1;

              -- JIRA-SIAC-4167 14.11.2016 Sofia
              if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_RICORRENTE_ENTRATA,
     	                   CL_RICORRENTE_ENTRATA||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;



	          -- CL_SIOPE_ENTRATA_TERZO
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_SIOPE_ENTRATA_TERZO||'.' ;
				/*
	          select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=siopeEntrataTipoId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists (select 1
				      	        from siac_r_bil_elem_class r, siac_t_class c
				        	    where r.elem_id=bilElemIdRet
					            and   c.classif_id=r.classif_id
					   	        and   c.classif_tipo_id=siopeEntrataTipoId
			                    and   c.data_cancellazione is null
							    and   c.validita_fine is null
                                order by r.elem_id
                                limit 1)
			  order by r.elem_id
              limit 1;
	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
				*/

select 1 into codResult
    	      from siac_r_bil_elem_class r, siac_t_class c
        	  where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=siopeEntrataTipoId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
    	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
		      and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
    	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists (select 1
				      	        from siac_r_bil_elem_class r, siac_t_class c
				        	    where r.elem_id=bilElemIdRet
					            and   c.classif_id=r.classif_id
					   	        and   c.classif_tipo_id=siopeEntrataTipoId
			                    and   c.data_cancellazione is null
							    and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
    	      				    and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                                order by r.elem_id
                                limit 1)
			  order by r.elem_id
              limit 1;

              -- JIRA-SIAC-4167 14.11.2016 Sofia
              if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_SIOPE_ENTRATA_TERZO,
     	                   CL_SIOPE_ENTRATA_TERZO||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;

    	      -- CL_TRANSAZIONE_UE_ENTRATA
              codResult:=null;
        	  strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        				    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                	                               ||elemBilPrev.elem_code2||' '
                    	                           ||elemBilPrev.elem_code3||' : verifica classificatore '||CL_TRANSAZIONE_UE_ENTRATA||'.' ;

			  -- 02.03.2016 Dani: definizione classificatore neseccaria solo se presente in previsione
          /*
              select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=transazioneUeEntrataId
              and   c.data_cancellazione is null
		      and   c.validita_fine is null
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=transazioneUeEntrataId
					             and   c.data_cancellazione is null
							     and   c.validita_fine is null
                                 )
			  order by r.elem_id limit 1;
	          if codResult is not null then raise exception ' Nessuno inserimento effettuato.'; end if;
          end if;
			*/

            select 1 into codResult
              from  siac_r_bil_elem_class r, siac_t_class c
              where r.elem_id=elemBilPrev.elem_id
	          and   c.classif_id=r.classif_id
    	      and   c.classif_tipo_id=transazioneUeEntrataId
              and   r.data_cancellazione is null
		      and   date_trunc('day',dataElaborazione)>=date_trunc('day',r.validita_inizio)
    	      and   ( date_trunc('day',dataElaborazione)<=date_trunc('day',r.validita_fine) or r.validita_fine is null)
              and   c.data_cancellazione is null
              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
    	      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              and   not exists ( select distinct 1
					    	     from siac_r_bil_elem_class r, siac_t_class c
					       	     where r.elem_id=bilElemIdRet
						         and   c.classif_id=r.classif_id
					   	         and   c.classif_tipo_id=transazioneUeEntrataId
					             and   c.data_cancellazione is null
							     and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
				    	         and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                                )
			  order by r.elem_id limit 1;

              -- JIRA-SIAC-4167 14.11.2016 Sofia
              if codResult is not null then
                   codResult:=null;
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select capitolo.elem_id,
                           capitolo.elem_code,
                           capitolo.elem_code2,
                           capitolo.elem_code3,
	                       capitolo.bil_id,
     	                   faseBilElabId,
	                       CL_TRANSAZIONE_UE_ENTRATA,
     	                   CL_TRANSAZIONE_UE_ENTRATA||' mancante',
         	               dataInizioVal,
             	           capitolo.ente_proprietario_id,
	                       loginOperazione
	                from siac_t_bil_elem capitolo
	                where  capitolo.elem_id=bilElemIdRet
                   )
	               returning fase_bil_prev_ape_seg_id into codresult;

              	   if codResult is  null then raise exception ' Nessuno inserimento effettuato.'; end if;
              end if;

          end if;

          strMessaggio:='Inserimento nuove strutture per tipo='||bilElemGestTipo||
        			    '.Elemento di bilancio '||elemBilPrev.elem_code||' '
                                               ||elemBilPrev.elem_code2||' '
                                               ||elemBilPrev.elem_code3||' : aggiornamento relazione tra elem_id_prev e elem_id_gest.' ;
          update fase_bil_t_prev_approva_str_elem_gest_nuovo set elem_gest_id=bilElemIdRet
          where elem_id=elemBilPrev.elem_id
          and   fase_bil_elab_id=faseBilElabId;

  end loop;

  strMessaggio:='Conclusione inserimento nuove strutture per tipo='||bilElemGestTipo||'.';
  codResult:=null;
  insert into fase_bil_t_elaborazione_log
  (fase_bil_elab_id,fase_bil_elab_log_operazione,
   validita_inizio, login_operazione, ente_proprietario_id
  )
  values
  (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
  returning fase_bil_elab_log_id into codResult;

  if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
  end if;

 end if;

 if checkGest=true then

 	codResult:=null;
    strMessaggio:='Verifica esistenza elementi di bilancio di gestione equivalenti da aggiornare da previsione.';
	select 1 into codResult
    from fase_bil_t_prev_approva_str_elem_gest_esiste fase
    where fase.ente_proprietario_id=enteProprietarioId
    and   fase.bil_id=bilancioId
    and   fase.fase_bil_elab_id=faseBilElabId
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null
    and   fase.elem_prev_id is not null
    order by fase.fase_bil_prev_str_esiste_id
    limit 1;
    codResult:=null;
    insert into fase_bil_t_elaborazione_log
    (fase_bil_elab_id,fase_bil_elab_log_operazione,
	   validita_inizio, login_operazione, ente_proprietario_id
    )
 	values
	(faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
	 returning fase_bil_elab_log_id into codResult;

	if codResult is null then
    	raise exception ' Errore in inserimento LOG.';
	end if;

    if codResult is not null then
    -- popolamento tabelle bck per salvataggio precedenti strutture
    -- siac_t_bil_elem
	  codResult:=null;
      strMessaggio:='Backup vecchie struttura per capitoli di gestione equivalente esistenti - INIZIO.';
	  insert into fase_bil_t_elaborazione_log
	  (fase_bil_elab_id,fase_bil_elab_log_operazione,
	   validita_inizio, login_operazione, ente_proprietario_id
	  )
	  values
	  (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
	  returning fase_bil_elab_log_id into codResult;

	  if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
	  end if;

    strMessaggio:='Backup vecchia struttura [siac_t_bil_elem] per capitoli di gestione equivalente.';
    insert into bck_fase_bil_t_prev_approva_bil_elem
    (elem_prev_id, elem_bck_id,elem_bck_code,elem_bck_code2, elem_bck_code3,
     elem_bck_desc,elem_bck_desc2, elem_bck_bil_id, elem_bck_id_padre, elem_bck_tipo_id, elem_bck_livello,
     elem_bck_ordine, elem_bck_data_creazione, elem_bck_data_modifica, elem_bck_login_operazione,
     elem_bck_validita_inizio, elem_bck_validita_fine,fase_bil_elab_id,
     ente_proprietario_id, login_operazione,validita_inizio)
    (select fase.elem_prev_id,elem.elem_id, elem.elem_code,elem.elem_code2,elem.elem_code3,
            elem.elem_desc,elem.elem_desc2, elem.bil_id, elem.elem_id_padre, elem.elem_tipo_id, elem.livello,
            elem.ordine, elem.data_creazione, elem.data_modifica, elem.login_operazione,
            elem.validita_inizio, elem.validita_fine,faseBilElabId,
            elem.ente_proprietario_id, loginOperazione,dataInizioVal
	 from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_t_bil_elem elem
     where fase.ente_proprietario_id=enteProprietarioId
     and   fase.bil_id=bilancioId
     and   fase.fase_bil_elab_id=faseBilElabId
     and   elem.elem_id=fase.elem_gest_id
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null
     and   fase.elem_prev_id is not null
     );

     codResult:=null;
     strMessaggio:=strMessaggio||' Verifica inserimento.';
     select 1 into codResult
     from fase_bil_t_prev_approva_str_elem_gest_esiste fase
     where fase.ente_proprietario_id=enteProprietarioId
     and   fase.bil_id=bilancioId
     and   fase.fase_bil_elab_id=faseBilElabId
     and   fase.elem_gest_id is not null
     and   fase.elem_prev_id is not null
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null
     and   not exists (select 1 from bck_fase_bil_t_prev_approva_bil_elem bck
                       where bck.fase_bil_elab_id=fase.fase_bil_elab_id
                       and   bck.elem_bck_id=fase.elem_gest_id
                       and   bck.data_cancellazione is null
                       and   bck.validita_fine is null);
     if codResult is not null then raise exception ' Elementi mancanti di backup.'; end if;


--- 29.06.2016 Sofia gestione backup per stato, classificatori, attributi e categoria
--  che non devono essere cancallati ma sovrascritti
	  -- bck per attributi e classificatori, stato e categoria
     strMessaggio:='Backup vecchia struttura [siac_r_bil_elem_stato] per capitoli di gestione equivalente.';
     insert into bck_fase_bil_t_prev_approva_bil_elem_stato
     (elem_bck_id,elem_bck_stato_id,
      elem_bck_data_creazione, elem_bck_data_modifica, elem_bck_login_operazione,
      elem_bck_validita_inizio, elem_bck_validita_fine,fase_bil_elab_id,
      ente_proprietario_id, login_operazione,validita_inizio)
     (select elem.elem_id, elem.elem_stato_id,
			 elem.data_creazione, elem.data_modifica, elem.login_operazione,
             elem.validita_inizio, elem.validita_fine,faseBilElabId,
             elem.ente_proprietario_id, loginOperazione,dataInizioVal
	  from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_stato elem
      where fase.ente_proprietario_id=enteProprietarioId
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   elem.elem_id=fase.elem_gest_id
      and   fase.data_cancellazione is null
      and   fase.validita_fine is null
      and   fase.elem_prev_id is not null
      );

      codResult:=null;
      strMessaggio:=strMessaggio||' Verifica inserimento.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where fase.ente_proprietario_id=enteProprietarioId
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_gest_id is not null
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   fase.validita_fine is null
      and   not exists (select 1 from bck_fase_bil_t_prev_approva_bil_elem_stato bck
                        where bck.fase_bil_elab_id=fase.fase_bil_elab_id
                        and   bck.elem_bck_id=fase.elem_gest_id
                        and   bck.data_cancellazione is null
                        and   bck.validita_fine is null);
      if codResult is not null then raise exception ' Elementi mancanti di backup.'; end if;


      strMessaggio:='Backup vecchia struttura [siac_r_bil_elem_attr] per capitoli di gestione equivalente.';
      insert into bck_fase_bil_t_prev_approva_bil_elem_attr
      (elem_bck_id,elem_bck_attr_id,elem_bck_tabella_id,
       elem_bck_boolean,elem_bck_percentuale,
       elem_bck_testo,elem_bck_numerico,
       elem_bck_data_creazione, elem_bck_data_modifica, elem_bck_login_operazione,
       elem_bck_validita_inizio, elem_bck_validita_fine,fase_bil_elab_id,
       ente_proprietario_id, login_operazione,validita_inizio)
      (select fase.elem_gest_id, elem.attr_id, elem.tabella_id,
      		  elem."boolean",elem.percentuale, elem.testo, elem.numerico,
			  elem.data_creazione, elem.data_modifica, elem.login_operazione,
              elem.validita_inizio, elem.validita_fine,faseBilElabId,
              elem.ente_proprietario_id, loginOperazione,dataInizioVal
	   from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_attr elem
       where fase.ente_proprietario_id=enteProprietarioId
       and   fase.bil_id=bilancioId
       and   fase.fase_bil_elab_id=faseBilElabId
       and   elem.elem_id=fase.elem_gest_id
       and   fase.data_cancellazione is null
       and   fase.validita_fine is null
       and   fase.elem_prev_id is not null
      );

      codResult:=null;
      strMessaggio:=strMessaggio||' Verifica inserimento.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where fase.ente_proprietario_id=enteProprietarioId
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_gest_id is not null
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   fase.validita_fine is null
      and   not exists (select 1 from bck_fase_bil_t_prev_approva_bil_elem_attr bck
                        where bck.fase_bil_elab_id=fase.fase_bil_elab_id
                        and   bck.elem_bck_id=fase.elem_gest_id
                        and   bck.data_cancellazione is null
                        and   bck.validita_fine is null);
      if codResult is not null then raise exception ' Elementi mancanti di backup.'; end if;

      strMessaggio:='Backup vecchia struttura [siac_r_bil_elem_class] per capitoli di gestione equivalente.';
      insert into bck_fase_bil_t_prev_approva_bil_elem_class
      (elem_bck_id,elem_bck_classif_id,
       elem_bck_data_creazione, elem_bck_data_modifica, elem_bck_login_operazione,
       elem_bck_validita_inizio, elem_bck_validita_fine,fase_bil_elab_id,
       ente_proprietario_id, login_operazione,validita_inizio)
      (select fase.elem_gest_id, elem.classif_id,
			  elem.data_creazione, elem.data_modifica, elem.login_operazione,
              elem.validita_inizio, elem.validita_fine,faseBilElabId,
              elem.ente_proprietario_id, loginOperazione,dataInizioVal
	   from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_class elem
       where fase.ente_proprietario_id=enteProprietarioId
       and   fase.bil_id=bilancioId
       and   fase.fase_bil_elab_id=faseBilElabId
       and   elem.elem_id=fase.elem_gest_id
       and   fase.data_cancellazione is null
       and   fase.validita_fine is null
       and   fase.elem_prev_id is not null
      );

      codResult:=null;
      strMessaggio:=strMessaggio||' Verifica inserimento.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where fase.ente_proprietario_id=enteProprietarioId
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_gest_id is not null
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   fase.validita_fine is null
      and   not exists (select 1 from bck_fase_bil_t_prev_approva_bil_elem_class bck
                        where bck.fase_bil_elab_id=fase.fase_bil_elab_id
                        and   bck.elem_bck_id=fase.elem_gest_id
                        and   bck.data_cancellazione is null
                        and   bck.validita_fine is null);
      if codResult is not null then raise exception ' Elementi mancanti di backup.'; end if;

      strMessaggio:='Backup vecchia struttura [siac_r_bil_elem_categoria] per capitoli di gestione equivalente.';
      insert into bck_fase_bil_t_prev_approva_bil_elem_categ
      (elem_bck_id,elem_bck_cat_id,
       elem_bck_data_creazione, elem_bck_data_modifica, elem_bck_login_operazione,
       elem_bck_validita_inizio, elem_bck_validita_fine,fase_bil_elab_id,
       ente_proprietario_id, login_operazione,validita_inizio)
      (select fase.elem_gest_id, elem.elem_cat_id,
			  elem.data_creazione, elem.data_modifica, elem.login_operazione,
              elem.validita_inizio, elem.validita_fine,faseBilElabId,
              elem.ente_proprietario_id, loginOperazione,dataInizioVal
	   from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_categoria elem
      where fase.ente_proprietario_id=enteProprietarioId
       and   fase.bil_id=bilancioId
       and   fase.fase_bil_elab_id=faseBilElabId
       and   elem.elem_id=fase.elem_gest_id
       and   fase.data_cancellazione is null
       and   fase.validita_fine is null
       and   fase.elem_gest_id is not null
       and   fase.elem_prev_id is not null
      );

      codResult:=null;
      strMessaggio:=strMessaggio||' Verifica inserimento.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where fase.ente_proprietario_id=enteProprietarioId
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_gest_id is not null
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   fase.validita_fine is null
      and   not exists (select 1 from bck_fase_bil_t_prev_approva_bil_elem_categ bck
                        where bck.fase_bil_elab_id=fase.fase_bil_elab_id
                        and   bck.elem_bck_id=fase.elem_gest_id
                        and   bck.data_cancellazione is null
                        and   bck.validita_fine is null);
      if codResult is not null then raise exception ' Elementi mancanti di backup.'; end if;

---------

     codResult:=null;
     strMessaggio:='Backup vecchie struttura per capitoli di gestione equivalente esistenti - FINE.';
     insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
      returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;


	 codResult:=null;
     strMessaggio:='Inizio cancellazione logica vecchie strutture gestione esistenti.';
     insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
      returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     -- cancellazione logica precendenti relazioni
     -- siac_r_bil_elem_stato
/*     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_bil_elem_stato].';
     update siac_r_bil_elem_stato canc  set
      data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
     where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);

     -- siac_r_bil_elem_categoria
     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_bil_elem_categoria].';
     update  siac_r_bil_elem_categoria canc set
          data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
     where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);
     -- siac_r_bil_elem_attr
     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_bil_elem_attr].';
     update siac_r_bil_elem_attr canc set
          data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
     where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);

     -- siac_r_bil_elem_class
     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_bil_elem_class].';
     update siac_r_bil_elem_class canc set
              data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
     where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);*/
/* 31.07.2017 Sofia - gestione vincoli atti di legge commentata
     -- siac_r_vincolo_bil_elem
     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_vincolo_bil_elem].';
     update siac_r_vincolo_bil_elem canc set
              data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
     where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from  fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);


     -- siac_r_bil_elem_atto_legge
     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_bil_elem_atto_legge].';
     update siac_r_bil_elem_atto_legge canc set
              data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
     where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);

31.07.2017 Sofia - chiusura
*/
	 -- siac_r_bil_elem_rel_tempo
     strMessaggio:='Cancellazione logica vecchie strutture gestione esistenti [siac_r_bil_elem_rel_tempo].';
	 update 	siac_r_bil_elem_rel_tempo canc set
		    data_cancellazione=now(), validita_fine=now(), login_operazione=loginOperazione
	 where canc.ente_proprietario_id=enteProprietarioId
     and   canc.data_cancellazione is null and canc.validita_fine is null
     and   exists (select 1 from fase_bil_t_prev_approva_str_elem_gest_esiste fase
                   where fase.ente_proprietario_id=enteProprietarioId
                   and   fase.bil_id=bilancioId
                   and   fase.fase_bil_elab_id=faseBilElabId
                   and   fase.elem_gest_id=canc.elem_id
                   and   fase.elem_prev_id is not null
                   and   fase.data_cancellazione is null
                   order by fase.fase_bil_prev_str_esiste_id
                   limit 1);

	 codResult:=null;
     strMessaggio:='Fine cancellazione logica vecchie strutture gestione esistenti.';
     insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
      returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     -- cancellazione logica precendenti relazioni

     -- aggiornamento siac_t_bil_elem
     strMessaggio:='Aggiornamento nuova struttura gestione esistente da previsione equivalente [siac_t_bil_elem].';
     update siac_t_bil_elem gest set
     (elem_desc, elem_desc2, ordine, livello, login_operazione)=
     (prev.elem_desc,prev.elem_desc2,prev.ordine,prev.livello,loginOperazione)
     from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_t_bil_elem prev
     where  gest.ente_proprietario_id=enteProprietarioId
     and    gest.elem_id=fase.elem_gest_id
     and    prev.elem_id=fase.elem_prev_id
     and    fase.ente_proprietario_id=enteProprietarioid
     and    fase.bil_id=bilancioId
     and    fase.fase_bil_elab_id=faseBilElabId
     and    fase.data_cancellazione is null
     and    fase.elem_prev_id is not null;

	 codResult:=null;
     insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
      returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     codResult:=null;
     strMessaggio:='Inizio inserimento nuove strutture gestione esistenti da previsione equivalente.';
     insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
      returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     -- inserimento nuove relazioni
     -- siac_r_bil_elem_stato
     /*strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_stato].';
     insert into siac_r_bil_elem_stato
     (elem_id,elem_stato_id,validita_inizio,ente_proprietario_id,login_operazione)
     (select fase.elem_gest_id, stato.elem_stato_id , dataInizioVal, stato.ente_proprietario_id, loginOperazione
      from siac_r_bil_elem_stato stato, fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where stato.elem_id=fase.elem_prev_id
      and   fase.ente_proprietario_id=enteProprietarioid
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.data_cancellazione is null
      and   fase.elem_prev_id is not null
      and   stato.data_cancellazione is null
      and   stato.validita_fine is null);*/

      strMessaggio:='Aggiornamento strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_stato].';
      update siac_r_bil_elem_stato statoCor
      set elem_stato_id=stato.elem_stato_id,
          data_modifica=dataInizioVal,
          login_operazione=loginOperazione
      from siac_r_bil_elem_stato stato, fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where stato.elem_id=fase.elem_prev_id
      and   statoCor.elem_id=fase.elem_gest_id
      and   fase.ente_proprietario_id=enteProprietarioid
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.data_cancellazione is null
      and   fase.elem_prev_id is not null
      and   stato.data_cancellazione is null
      and   stato.validita_fine is null
      and   statoCor.data_cancellazione is null
      and   statoCor.validita_fine is null;

     -- siac_r_bil_elem_attr ( escludere FLAG_PER_MEM )
     -- devo cancellare e reinserire
     strMessaggio:='Cancellazione strutture gestione esistenti per reinserimento da previsione equivalente [siac_r_bil_elem_attr].';
     delete from siac_r_bil_elem_attr attr
     using  fase_bil_t_prev_approva_str_elem_gest_esiste fase
     where attr.elem_id=fase.elem_gest_id
     and   fase.ente_proprietario_id=enteProprietarioid
     and   fase.bil_id=bilancioId
     and   fase.fase_bil_elab_id=faseBilElabId
     and   fase.data_cancellazione is null
     and   fase.elem_prev_id is not null
     and   attr.data_cancellazione is null
     and   attr.validita_fine is null;

     strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_attr].';
     insert into siac_r_bil_elem_attr
     (elem_id,attr_id,tabella_id,boolean,percentuale,
      testo,numerico,validita_inizio,
      ente_proprietario_id,login_operazione)
     (select fase.elem_gest_id, attr.attr_id , attr.tabella_id,attr.boolean,attr.percentuale,
            attr.testo,attr.numerico,
            dataInizioVal, attr.ente_proprietario_id, loginOperazione
      from siac_r_bil_elem_attr attr, fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where attr.elem_id=fase.elem_prev_id
      and   attr.attr_id!=flagPerMemAttrId
      and   fase.ente_proprietario_id=enteProprietarioid
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.data_cancellazione is null
      and   fase.elem_prev_id is not null
      and   attr.data_cancellazione is null
      and   attr.validita_fine is null);

     -- siac_r_bil_elem_categoria
/*     strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_categoria].';
     insert into siac_r_bil_elem_categoria
     (elem_id,elem_cat_id,validita_inizio,ente_proprietario_id,login_operazione)
     (select fase.elem_gest_id, cat.elem_cat_id , dataInizioVal, cat.ente_proprietario_id, loginOperazione
      from siac_r_bil_elem_categoria cat, fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where cat.elem_id=fase.elem_prev_id
      and   fase.ente_proprietario_id=enteProprietarioid
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.data_cancellazione is null
      and   fase.elem_prev_id is not null
      and   cat.data_cancellazione is null
      and   cat.validita_fine is null);*/

      strMessaggio:='Aggiornamento strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_categoria].';
      update siac_r_bil_elem_categoria catCor
      set elem_cat_id=cat.elem_cat_id,
          data_modifica=dataInizioVal,
          login_operazione=loginOperazione
      from siac_r_bil_elem_categoria cat, fase_bil_t_prev_approva_str_elem_gest_esiste fase
      where cat.elem_id=fase.elem_prev_id
      and   catCor.elem_id=fase.elem_gest_id
      and   fase.ente_proprietario_id=enteProprietarioid
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.data_cancellazione is null
      and   fase.elem_prev_id is not null
      and   cat.data_cancellazione is null
      and   cat.validita_fine is null
      and   catCor.data_cancellazione is null
      and   catCor.validita_fine is null;


     -- siac_r_bil_elem_class
     -- cancellare e reinserire
     strMessaggio:='Cancellazione strutture gestione esistenti [siac_r_bil_elem_class].';
     delete from siac_r_bil_elem_class class
     using fase_bil_t_prev_approva_str_elem_gest_esiste fase
     where class.elem_id=fase.elem_gest_id
     and   fase.ente_proprietario_id=enteProprietarioid
     and   fase.bil_id=bilancioId
     and   fase.fase_bil_elab_id=faseBilElabId
     and   fase.data_cancellazione is null
     and   fase.elem_prev_id is not null
     and   class.data_cancellazione is null
     and   class.validita_fine is null;

     strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].';
	 insert into siac_r_bil_elem_class
     (elem_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione)
     (select fase.elem_gest_id, class.classif_id , dataInizioVal, class.ente_proprietario_id, loginOperazione
      from siac_r_bil_elem_class class, fase_bil_t_prev_approva_str_elem_gest_esiste fase,siac_t_class c
      where class.elem_id=fase.elem_prev_id
      and   fase.ente_proprietario_id=enteProprietarioid
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      -- JIRA-SIAC-4167 14.11.2016 Anto
      and   c.classif_id=class.classif_id
      and   c.data_cancellazione is null
      and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
      and   fase.data_cancellazione is null
      and   fase.elem_prev_id is not null
      and   class.data_cancellazione is null
      and   class.validita_fine is null);

/* 31.07.2017 Sofia - gestione vincoli atti di legge commentata

      -- siac_r_vincolo_bil_elem
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_vincolo_bil_elem].';
 	  insert into siac_r_vincolo_bil_elem
      ( elem_id,vincolo_id, validita_inizio,ente_proprietario_id,login_operazione)
      (select fase.elem_gest_id, v.vincolo_id, dataInizioVal,v.ente_proprietario_id, loginOperazione
       from siac_r_vincolo_bil_elem v,fase_bil_t_prev_approva_str_elem_gest_esiste fase
       where v.elem_id=fase.elem_prev_id
	   and   fase.ente_proprietario_id=enteProprietarioid
       and   fase.bil_id=bilancioId
       and   fase.fase_bil_elab_id=faseBilElabId
	   and   fase.data_cancellazione is null
       and   fase.elem_prev_id is not null
       and   v.data_cancellazione is null
       and   v.validita_fine is null
       );

       -- siac_r_bil_elem_atto_legge
       strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_atto_legge].';
       insert into siac_r_bil_elem_atto_legge
       ( elem_id,attolegge_id, descrizione, gerarchia,finanziamento_inizio,finanziamento_fine,
         validita_inizio,ente_proprietario_id,login_operazione
       )
       ( select fase.elem_gest_id,v.attolegge_id,v.descrizione, v.gerarchia,v.finanziamento_inizio,v.finanziamento_fine,
               dataInizioVal,v.ente_proprietario_id, loginOperazione
         from   siac_r_bil_elem_atto_legge v,fase_bil_t_prev_approva_str_elem_gest_esiste fase
         where v.elem_id=fase.elem_prev_id
	     and   fase.ente_proprietario_id=enteProprietarioid
         and   fase.bil_id=bilancioId
         and   fase.fase_bil_elab_id=faseBilElabId
  	     and   fase.data_cancellazione is null
         and   fase.elem_prev_id is not null
         and   v.data_cancellazione is null
         and   v.validita_fine is null
       );

31.07.2017 Sofia - chiusura
*/
       -- siac_r_bil_elem_rel_tempo
       strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_rel_tempo].';
       insert into siac_r_bil_elem_rel_tempo
       (elem_id, elem_id_old, validita_inizio, ente_proprietario_id,login_operazione)
       ( select fase.elem_gest_id,v.elem_id_old,
               dataInizioVal,v.ente_proprietario_id, loginOperazione
         from   siac_r_bil_elem_rel_tempo v,fase_bil_t_prev_approva_str_elem_gest_esiste fase
         where v.elem_id=fase.elem_prev_id
	     and   fase.ente_proprietario_id=enteProprietarioid
         and   fase.bil_id=bilancioId
         and   fase.fase_bil_elab_id=faseBilElabId
  	     and   fase.data_cancellazione is null
         and   fase.elem_prev_id is not null
         and   v.data_cancellazione is null
         and   v.validita_fine is null
       );

       codResult:=null;
       strMessaggio:='Fine inserimento nuove strutture gestione esistenti da previsione equivalente.';
       insert into fase_bil_t_elaborazione_log
       (fase_bil_elab_id,fase_bil_elab_log_operazione,
        validita_inizio, login_operazione, ente_proprietario_id
       )
       values
       (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
        returning fase_bil_elab_log_id into codResult;

       if codResult is null then
      	raise exception ' Errore in inserimento LOG.';
       end if;

       -- verifica dati inseriti
       codResult:=null;
       strMessaggio:='Inizio verifica inserimento nuove strutture gestione esistenti da previsione equivalente.';
       insert into fase_bil_t_elaborazione_log
       (fase_bil_elab_id,fase_bil_elab_log_operazione,
        validita_inizio, login_operazione, ente_proprietario_id
       )
       values
       (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
        returning fase_bil_elab_log_id into codResult;

       if codResult is null then
      	raise exception ' Errore in inserimento LOG.';
       end if;

       codResult:=null;
       strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_stato].Verifica esistenza relazione stati.';
       select 1 into codResult
       from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
       where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
       and   fase.bil_id=bilancioId
       and   fase.fase_bil_elab_id=faseBilElabId
       and   fase.elem_prev_id is not null
       and   fase.data_cancellazione is null
       and   not exists (select 1 from siac_r_bil_elem_stato stato
                 		 where stato.elem_id=fase.elem_gest_id--elem.elem_id
                         and   stato.data_cancellazione is null
                         and   stato.validita_fine is null
                         order by stato.elem_id
                         limit 1)
       order by fase.fase_bil_prev_str_esiste_id
       limit 1;

       if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
       end if;

	  codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_attr].Verifica esistenza attributi.';
      select 1 into codResult
      from  fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   not exists (select 1 from siac_r_bil_elem_attr attr
     		 		    where attr.elem_id=fase.elem_gest_id--elem.elem_id
					    and   attr.attr_id!=flagPerMemAttrId
                        and   attr.data_cancellazione is null
                        and   attr.validita_fine is null
                        order by attr.elem_id
                        limit 1)
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;

      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;

	  codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni classificatori.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   not exists ( select 1 from siac_r_bil_elem_class class,siac_t_class c
      				     where class.elem_id=fase.elem_gest_id--elem.elem_id
                         and   class.data_cancellazione is null
                         and   class.validita_fine is null

                               -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   c.classif_id=class.classif_id
                          and   c.data_cancellazione is null
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)

                         order by class.elem_id
                         limit 1)
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;


      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;

      codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_categoria].Verifica esistenza relazioni categoria.';
      select distinct 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   not exists ( select 1 from siac_r_bil_elem_categoria class
                         where class.elem_id=fase.elem_gest_id--elem.elem_id
                         and   class.data_cancellazione is null
                         and   class.validita_fine is null);


      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;

	  -- verifica se esistono elementi senza classificatori obbligatori (**)
      -- controlli sui classificatori obbligatori
      -- CL_CDC, CL_CDR
      codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni struttura amministrativa.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   fase.elem_prev_id is not null
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.data_cancellazione is null
      and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
                       where class.elem_id=fase.elem_gest_id--elem.elem_id
                       and   c.classif_id=class.classif_id
                       and   c.classif_tipo_id in (cdcTipoId, cdrTipoId)
                       and   class.data_cancellazione is null
                       and   class.validita_fine is null
                       and   c.data_cancellazione is null
                       and   c.validita_fine is null
                       order by class.elem_id
                       limit 1)
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;
		/*
      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;
		*/

        if codResult is not null then
           strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
           insert into fase_bil_t_prev_apertura_segnala
           (elem_id,
	        elem_code,
			elem_code2,
			elem_code3,
		    bil_id,
		    fase_bil_elab_id,
		    segnala_codice,
			segnala_desc,
			validita_inizio,
			ente_proprietario_id,
		    login_operazione)
           (select fase.elem_gest_id,
                   fase.elem_code,
                   fase.elem_code2,
                   fase.elem_code3,
                   fase.bil_id,
                   faseBilElabId,
                   'SAC',
                   'Sac mancante',
                   dataInizioVal,
                   fase.ente_proprietario_id,
                   loginOperazione
             from fase_bil_t_prev_approva_str_elem_gest_esiste fase
             where fase.ente_proprietario_id=enteProprietarioId
             and   fase.elem_prev_id is not null
             and   fase.bil_id=bilancioId
             and   fase.fase_bil_elab_id=faseBilElabId
             and   fase.data_cancellazione is null
             and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
                                where class.elem_id=fase.elem_gest_id
                                and   c.classif_id=class.classif_id
                                and   c.classif_tipo_id in (cdcTipoId, cdrTipoId)
                                and   class.data_cancellazione is null
                                and   class.validita_fine is null
                                and   c.data_cancellazione is null
                                and   c.validita_fine is null
                                order by class.elem_id
                                limit 1)
            );
          end if;



      -- CL_PDC_FIN_QUINTO, CL_PDC_FIN_QUARTO
      codResult:=null;
	  strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_PDC_FIN_QUARTO||' '||CL_PDC_FIN_QUINTO||'.';

      --02.03.2016 Dani Il classificatore deve essere obbligatoriamente presente solo se capitolo gestione STD
	  select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase
      , siac_r_bil_elem_categoria rcat
	  , siac_d_bil_elem_categoria cat
      where fase.ente_proprietario_id=enteProprietarioId
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   rcat.elem_id=fase.elem_gest_id
      and   rcat.data_cancellazione is null
      and   rcat.validita_fine is null
      and   rcat.elem_cat_id=cat.elem_cat_id
      and   cat.elem_cat_code = CATEGORIA_STD
/*      and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
                     where class.elem_id=fase.elem_prev_id
                     and   c.classif_id=class.classif_id
                     and   c.classif_tipo_id in (pdcFinIVId, pdcFinVId)
                     and   class.data_cancellazione is null
                     and   class.validita_fine is null
                     and   c.data_cancellazione is null
                     and   c.validita_fine is null
                     order by class.elem_id
                     limit 1)*/
      and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
                       where class.elem_id=fase.elem_gest_id
                       and   c.classif_id=class.classif_id
                       and   c.classif_tipo_id in (pdcFinIVId, pdcFinVId)
                       and   class.data_cancellazione is null
                       and   class.validita_fine is null
                       and   c.data_cancellazione is null
                       and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)

                       order by class.elem_id
                       limit 1)
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;

      /*
      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;
		*/
     --  JIRA-SIAC-4167  if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
      if codResult is not null then
          	strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
            insert into fase_bil_t_prev_apertura_segnala
             (elem_id,
	         elem_code,
		 	 elem_code2,
			 elem_code3,
		     bil_id,
		     fase_bil_elab_id,
		     segnala_codice,
			 segnala_desc,
			 validita_inizio,
			 ente_proprietario_id,
		     login_operazione)
            (select fase.elem_gest_id,
                    fase.elem_code,
                    fase.elem_code2,
                    fase.elem_code3,
                    fase.bil_id,
                    faseBilElabId,
                    'PDCFIN',
                    'PdcFin mancante',
                    dataInizioVal,
                    fase.ente_proprietario_id,
                    loginOperazione
              from fase_bil_t_prev_approva_str_elem_gest_esiste fase,
                   siac_r_bil_elem_categoria rcat, siac_d_bil_elem_categoria cat
              where fase.ente_proprietario_id=enteProprietarioId
              and   fase.bil_id=bilancioId
              and   fase.fase_bil_elab_id=faseBilElabId
              and   fase.elem_prev_id is not null
              and   fase.data_cancellazione is null
              and   rcat.elem_id=fase.elem_gest_id
              and   rcat.data_cancellazione is null
              and   rcat.validita_fine is null
              and   rcat.elem_cat_id=cat.elem_cat_id
              and   cat.elem_cat_code = CATEGORIA_STD
              and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
                                 where class.elem_id=fase.elem_gest_id
                                 and   c.classif_id=class.classif_id
                                 and   c.classif_tipo_id in (pdcFinIVId, pdcFinVId)
                                 and   class.data_cancellazione is null
                                 and   class.validita_fine is null
                                 and   c.data_cancellazione is null
                                 and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                                 and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                                 and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
             );
      end if;

/* 31.07.2017 Sofia gestione vincoli  atti legge commentata
	  codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_vincolo_bil_elem].Verifica esistenza relazioni vincoli.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase, -- siac_t_bil_elem elem,
           siac_r_vincolo_bil_elem v
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   v.elem_id=fase.elem_prev_id
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   v.data_cancellazione is null
      and   v.validita_fine is null
      and   not exists ( select 1 from siac_r_vincolo_bil_elem class
                         where class.elem_id=fase.elem_gest_id
                         and   class.data_cancellazione is null
                         and   class.validita_fine is null
                         order by class.elem_id
                         limit 1
                       )
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;


      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;

	  codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_atto_legge].Verifica esistenza relazioni atti di legge.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase, --siac_t_bil_elem elem,
           siac_r_bil_elem_atto_legge v
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   v.elem_id=fase.elem_prev_id
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   v.data_cancellazione is null
      and   v.validita_fine is null
      and   not exists ( select 1 from siac_r_bil_elem_atto_legge class
                         where class.elem_id=fase.elem_gest_id--elem.elem_id
                         and   class.data_cancellazione is null
                         and   class.validita_fine is null
                         order by class.elem_id
                         limit 1)
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;


      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;

31.07.2017 Sofia - chiusura
*/

	  codResult:=null;
      strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_rel_tempo].Verifica esistenza relazioni.';
      select 1 into codResult
      from fase_bil_t_prev_approva_str_elem_gest_esiste fase, --siac_t_bil_elem elem,
           siac_r_bil_elem_rel_tempo v
      where fase.ente_proprietario_id=enteProprietarioId
--    and   fase.elem_gest_id=elem.elem_id
      and   v.elem_id=fase.elem_prev_id
      and   fase.bil_id=bilancioId
      and   fase.fase_bil_elab_id=faseBilElabId
      and   fase.elem_prev_id is not null
      and   fase.data_cancellazione is null
      and   v.data_cancellazione is null
      and   v.validita_fine is null
      and   not exists ( select 1 from siac_r_bil_elem_rel_tempo class
                         where class.elem_id=fase.elem_gest_id--elem.elem_id
                         and   class.data_cancellazione is null
                         and   class.validita_fine is null
                         order by class.elem_id
                         limit 1)
	  order by fase.fase_bil_prev_str_esiste_id
      limit 1;


      if codResult is not null then
    	raise exception ' Elementi di bilancio assenti di relazione.';
      end if;


	  if euElemTipo=TIPO_ELEM_EU then

		-- 02.03.2016 Dani Classificatore necessario solo per capitolo di categoria STD

		-- CL_PROGRAMMA
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_PROGRAMMA||'.';
        select 1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_categoria rcat, siac_d_bil_elem_categoria cat
    	where fase.ente_proprietario_id=enteProprietarioId
---	    and   fase.elem_gest_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        and   rcat.elem_id=fase.elem_gest_id
        and   rcat.data_cancellazione is null
        and   rcat.validita_fine is null
        and   rcat.elem_cat_id=cat.elem_cat_id
        and   cat.elem_cat_code = CATEGORIA_STD
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=programmaTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           --order by class.elem_id
                           limit 1)
		--order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
		/*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
		*/

        if codResult is not null then

         strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
         insert into fase_bil_t_prev_apertura_segnala
		 (elem_id,
		  elem_code,
		  elem_code2,
		  elem_code3,
		  bil_id,
		  fase_bil_elab_id,
		  segnala_codice,
		  segnala_desc,
		  validita_inizio,
		  ente_proprietario_id,
	  	  login_operazione)
	      (select fase.elem_gest_id,
                  fase.elem_code,
                  fase.elem_code2,
                  fase.elem_code3,
                  fase.bil_id,
                  faseBilElabId,
                  CL_PROGRAMMA,
                  CL_PROGRAMMA||' mancante',
 	              dataInizioVal,
             	  fase.ente_proprietario_id,
	              loginOperazione
           from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_categoria rcat, siac_d_bil_elem_categoria cat
    	   where fase.ente_proprietario_id=enteProprietarioId
           and   fase.bil_id=bilancioId
           and   fase.fase_bil_elab_id=faseBilElabId
    	   and   fase.elem_prev_id is not null
	       and   fase.data_cancellazione is null
           and   rcat.elem_id=fase.elem_gest_id
           and   rcat.data_cancellazione is null
           and   rcat.validita_fine is null
           and   rcat.elem_cat_id=cat.elem_cat_id
           and   cat.elem_cat_code = CATEGORIA_STD
    	   and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
          	                  where class.elem_id=fase.elem_gest_id
            	              and   c.classif_id=class.classif_id
                	          and   c.classif_tipo_id=programmaTipoId
                    	      and   class.data_cancellazione is null
	                          and   class.validita_fine is null
    	                      and   c.data_cancellazione is null
        	                  and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                              and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           --order by class.elem_id
                           limit 1)
	        );
        end if;


		-- 02.03.2016 Dani Classificatore necessario solo per capitolo di categoria STD
        -- CL_MACROAGGREGATO
        codResult:=null;
	    strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_MACROAGGREGATO||'.';
        select 1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
        , siac_r_bil_elem_categoria rcat
        , siac_d_bil_elem_categoria cat
    	where fase.ente_proprietario_id=enteProprietarioId
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        and   rcat.elem_id=fase.elem_gest_id
        and   rcat.data_cancellazione is null
        and   rcat.validita_fine is null
        and   rcat.elem_cat_id=cat.elem_cat_id
        and   cat.elem_cat_code = CATEGORIA_STD
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=macroAggrTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)

                           order by class.elem_id
                           limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
		*/
       if codResult is not null then

      	strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
        insert into fase_bil_t_prev_apertura_segnala
		(elem_id,
	     elem_code,
	     elem_code2,
	     elem_code3,
	     bil_id,
	     fase_bil_elab_id,
	     segnala_codice,
	     segnala_desc,
	     validita_inizio,
	     ente_proprietario_id,
	     login_operazione)
	    (select fase.elem_gest_id,
                fase.elem_code,
                fase.elem_code2,
                fase.elem_code3,
                fase.bil_id,
                faseBilElabId,
                CL_MACROAGGREGATO,
                CL_MACROAGGREGATO||' mancante',
                dataInizioVal,
  	            fase.ente_proprietario_id,
	            loginOperazione
	      from fase_bil_t_prev_approva_str_elem_gest_esiste fase,
               siac_r_bil_elem_categoria rcat, siac_d_bil_elem_categoria cat
    	  where fase.ente_proprietario_id=enteProprietarioId
          and   fase.bil_id=bilancioId
          and   fase.fase_bil_elab_id=faseBilElabId
    	  and   fase.elem_prev_id is not null
	      and   fase.data_cancellazione is null
          and   rcat.elem_id=fase.elem_gest_id
          and   rcat.data_cancellazione is null
          and   rcat.validita_fine is null
          and   rcat.elem_cat_id=cat.elem_cat_id
          and   cat.elem_cat_code = CATEGORIA_STD
    	  and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	                 where class.elem_id=fase.elem_gest_id
            	             and   c.classif_id=class.classif_id
                             and   c.classif_tipo_id=macroAggrTipoId
                    	     and   class.data_cancellazione is null
	                         and   class.validita_fine is null
    	                     and   c.data_cancellazione is null
        	                 and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                             and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                             and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                             order by class.elem_id
                             limit 1)
         );
      end if;


  	    -- CL_COFOG
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_COFOG||'.';
        select 1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
--	    and   fase.elem_gest_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        -- 02.03.2016 Dani se classificatore definito in previsione deve essere stato ribaltato su gestione
        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	           where class.elem_id=fase.elem_prev_id
                       and   c.classif_id=class.classif_id
               	       and   c.classif_tipo_id=cofogTipoId
                  	   and   class.data_cancellazione is null
	                   and   class.validita_fine is null
    	               and   c.data_cancellazione is null
        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=cofogTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
                           limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
/*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
*/

		if codResult is not null then
           strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
       	   insert into fase_bil_t_prev_apertura_segnala
           (elem_id,
            elem_code,
	 	    elem_code2,
	        elem_code3,
		    bil_id,
		    fase_bil_elab_id,
		    segnala_codice,
		    segnala_desc,
		    validita_inizio,
		    ente_proprietario_id,
	  	    login_operazione)
	       (select fase.elem_gest_id,
                   fase.elem_code,
                   fase.elem_code2,
                   fase.elem_code3,
	               fase.bil_id,
     	           faseBilElabId,
	               CL_COFOG,
     	           CL_COFOG||' mancante',
                   dataInizioVal,
                   fase.ente_proprietario_id,
	               loginOperazione
	        from fase_bil_t_prev_approva_str_elem_gest_esiste fase
    	    where fase.ente_proprietario_id=enteProprietarioId
            and   fase.bil_id=bilancioId
            and   fase.fase_bil_elab_id=faseBilElabId
    	    and   fase.elem_prev_id is not null
	        and   fase.data_cancellazione is null
            and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
           	               where class.elem_id=fase.elem_prev_id
                           and   c.classif_id=class.classif_id
               	           and    c.classif_tipo_id=cofogTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                           and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                           and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
      	   and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
         	                  where class.elem_id=fase.elem_gest_id
            	              and   c.classif_id=class.classif_id
                	          and   c.classif_tipo_id=cofogTipoId
                    	      and   class.data_cancellazione is null
	                          and   class.validita_fine is null
    	                      and   c.data_cancellazione is null
        	                  and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                              and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
                           limit 1)
           );
        end if;

 	    -- CL_RICORRENTE_SPESA
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_RICORRENTE_SPESA||'.';
        select  1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
--	    and   fase.elem_gest_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        -- 02.03.2016 Dani se classificatore definito in previsione deve essere stato ribaltato su gestione
        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	           where class.elem_id=fase.elem_prev_id
                       and   c.classif_id=class.classif_id
               	       and   c.classif_tipo_id=ricorrenteSpesaId
                  	   and   class.data_cancellazione is null
	                   and   class.validita_fine is null
    	               and   c.data_cancellazione is null
        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=ricorrenteSpesaId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
                           limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
/*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
*/

          if codResult is not null then
              strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
       	      insert into fase_bil_t_prev_apertura_segnala
		      (elem_id,
			   elem_code,
			   elem_code2,
			   elem_code3,
			   bil_id,
			   fase_bil_elab_id,
			   segnala_codice,
		 	   segnala_desc,
			   validita_inizio,
			   ente_proprietario_id,
	  		   login_operazione)
	          (select fase.elem_gest_id,
                      fase.elem_code,
                      fase.elem_code2,
                      fase.elem_code3,
                      fase.bil_id,
 	                  faseBilElabId,
	                  CL_RICORRENTE_SPESA,
     	              CL_RICORRENTE_SPESA||' mancante',
         	          dataInizioVal,
             	      fase.ente_proprietario_id,
	                  loginOperazione
               from fase_bil_t_prev_approva_str_elem_gest_esiste fase
       	       where fase.ente_proprietario_id=enteProprietarioId
               and   fase.bil_id=bilancioId
               and   fase.fase_bil_elab_id=faseBilElabId
       	       and   fase.elem_prev_id is not null
	           and   fase.data_cancellazione is null
               and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	                  where class.elem_id=fase.elem_prev_id
                              and   c.classif_id=class.classif_id
                   	          and   c.classif_tipo_id=ricorrenteSpesaId
                  	          and   class.data_cancellazione is null
	                          and   class.validita_fine is null
    	                      and   c.data_cancellazione is null
        	                  and   c.validita_fine is null
                              -- JIRA-SIAC-4167 14.11.2016 Anto
                              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                              and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                              order by class.elem_id
                              limit 1)
    	      and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	                     where class.elem_id=fase.elem_gest_id--elem.elem_id
            	                 and   c.classif_id=class.classif_id
                	             and   c.classif_tipo_id=ricorrenteSpesaId
                    	         and   class.data_cancellazione is null
	                             and   class.validita_fine is null
    	                         and   c.data_cancellazione is null
        	                     and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                                 and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                                 and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                                 order by class.elem_id
                                 limit 1)
              );
        end if;


        -- CL_SIOPE_SPESA_TERZO
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_SIOPE_SPESA_TERZO||'.';
        select  1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
--	    and   fase.elem_prev_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        and exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	         where class.elem_id=fase.elem_prev_id--elem.elem_id
                     and   c.classif_id=class.classif_id
                     and   c.classif_tipo_id=siopeSpesaTipoId
                     and   class.data_cancellazione is null
	                 and   class.validita_fine is null
    	             and   c.data_cancellazione is null
        	         and   c.validita_fine is null
                          -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                     order by class.elem_id
                     limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=siopeSpesaTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
                           limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
		*/
        if codResult is not null then
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select fase.elem_gest_idd,
                           fase.elem_code,
                           fase.elem_code2,
                           fase.elem_code3,
	                       fase.bil_id,
     	                   faseBilElabId,
	                       CL_SIOPE_SPESA_TERZO,
     	                   CL_SIOPE_SPESA_TERZO||' mancante',
         	               dataInizioVal,
             	           fase.ente_proprietario_id,
	                       loginOperazione
	                from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    				where fase.ente_proprietario_id=enteProprietarioId
			        and   fase.bil_id=bilancioId
			        and   fase.fase_bil_elab_id=faseBilElabId
				   	and   fase.elem_prev_id is not null
				    and   fase.data_cancellazione is null
			        and exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				         where class.elem_id=fase.elem_prev_id--elem.elem_id
			                     and   c.classif_id=class.classif_id
				                 and   c.classif_tipo_id=siopeSpesaTipoId
			                     and   class.data_cancellazione is null
				                 and   class.validita_fine is null
			    	             and   c.data_cancellazione is null
			        	         and   c.validita_fine is null
            		              -- JIRA-SIAC-4167 14.11.2016 Anto
		                         and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
        		                 and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                			     order by class.elem_id
			                     limit 1)
			    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				               where class.elem_id=fase.elem_gest_id
            	        			   and   c.classif_id=class.classif_id
			                	       and   c.classif_tipo_id=siopeSpesaTipoId
			                    	   and   class.data_cancellazione is null
				                       and   class.validita_fine is null
			    	                   and   c.data_cancellazione is null
			        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
            				           and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
				                       and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
			                           order by class.elem_id
            				          limit 1)
                   );

              end if;

 	    -- CL_TRANSAZIONE_UE_SPESA
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_TRANSAZIONE_UE_SPESA||'.';
        select  1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
--	    and   fase.elem_gest_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        -- 02.03.2016 Dani se classificatore definito in previsione deve essere stato ribaltato su gestione
        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	           where class.elem_id=fase.elem_prev_id
                       and   c.classif_id=class.classif_id
               	       and   c.classif_tipo_id=transazioneUeSpesaId
                  	   and   class.data_cancellazione is null
	                   and   class.validita_fine is null
    	               and   c.data_cancellazione is null
        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=transazioneUeSpesaId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
                           limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
        */
        if codResult is not null then
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select fase.elem_gest_id,
                           fase.elem_code,
                           fase.elem_code2,
                           fase.elem_code3,
	                       fase.bil_id,
     	                   faseBilElabId,
	                       CL_TRANSAZIONE_UE_SPESA,
     	                   CL_TRANSAZIONE_UE_SPESA||' mancante',
         	               dataInizioVal,
             	           fase.ente_proprietario_id,
	                       loginOperazione
	                from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    				where fase.ente_proprietario_id=enteProprietarioId
			        and   fase.bil_id=bilancioId
			        and   fase.fase_bil_elab_id=faseBilElabId
			    	and   fase.elem_prev_id is not null
				    and   fase.data_cancellazione is null
			        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				           where class.elem_id=fase.elem_prev_id
			                       and   c.classif_id=class.classif_id
            			   	       and   c.classif_tipo_id=transazioneUeSpesaId
			                  	   and   class.data_cancellazione is null
	        			           and   class.validita_fine is null
			    	               and   c.data_cancellazione is null
			        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
            		               and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
		                           and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
			                       order by class.elem_id
			                       limit 1)
			    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	        			   and   c.classif_id=class.classif_id
			                	       and   c.classif_tipo_id=transazioneUeSpesaId
            			        	   and   class.data_cancellazione is null
	                    			   and   class.validita_fine is null
			    	                   and   c.data_cancellazione is null
        				               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                        			  and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
			                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
            			              order by class.elem_id
                        			   limit 1)
                   );
              end if;





     else
        -- CL_CATEGORIA
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_CATEGORIA||'.';

        --02.03.2016 Dani Il classificatore deve essere obbligatoriamente presente solo se capitolo STD
        select distinct 1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_categoria rcat, siac_d_bil_elem_categoria cat
    	where fase.ente_proprietario_id=enteProprietarioId
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        and   rcat.elem_id=fase.elem_gest_id
        and   rcat.data_cancellazione is null
        and   rcat.validita_fine is null
        and   rcat.elem_cat_id=cat.elem_cat_id
        and   cat.elem_cat_code = CATEGORIA_STD
/*        and   exists (    select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_prev_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=categoriaTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
--                           order by class.elem_id
                           limit 1)*/
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=categoriaTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
--                           order by class.elem_id
                           limit 1)
--		order by fase.fase_bil_prev_str_esiste_id
--	    limit 1
        ;

        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
		*/
       -- JIRA-SIAC-4167 14.11.2016 Sofia
       -- if codResult is null then raise exception ' Nessuno inserimento effettuato.'; end if;
       if codResult is not null then
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select fase.elem_gest_id,
                           fase.elem_code,
                           fase.elem_code2,
                           fase.elem_code3,
	                       fase.bil_id,
     	                   faseBilElabId,
	                       CL_CATEGORIA,
     	                   CL_CATEGORIA||' mancante',
         	               dataInizioVal,
             	           fase.ente_proprietario_id,
	                       loginOperazione
	                from fase_bil_t_prev_approva_str_elem_gest_esiste fase, siac_r_bil_elem_categoria rcat, siac_d_bil_elem_categoria cat
    				where fase.ente_proprietario_id=enteProprietarioId
			        and   fase.bil_id=bilancioId
			        and   fase.fase_bil_elab_id=faseBilElabId
			    	and   fase.elem_prev_id is not null
				    and   fase.data_cancellazione is null
			        and   rcat.elem_id=fase.elem_gest_id
			        and   rcat.data_cancellazione is null
			        and   rcat.validita_fine is null
			        and   rcat.elem_cat_id=cat.elem_cat_id
			        and   cat.elem_cat_code = CATEGORIA_STD
			    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				               where class.elem_id=fase.elem_gest_id
			            	           and   c.classif_id=class.classif_id
				               	       and   c.classif_tipo_id=categoriaTipoId
			                    	   and   class.data_cancellazione is null
				                       and   class.validita_fine is null
			    	                   and   c.data_cancellazione is null
				       	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
			                           and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
            			               and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
   									 )
                   );

        end if;

     	-- CL_RICORRENTE_ENTRATA
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_RICORRENTE_ENTRATA||'.';
        select  1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
--	    and   fase.elem_gest_id=elem.elem_id --Dani 19.02.2016
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        -- 02.03.2016 Dani se classificatore definito in previsione deve essere stato ribaltato su gestione
        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	           where class.elem_id=fase.elem_prev_id
                       and   c.classif_id=class.classif_id
               	       and   c.classif_tipo_id=ricorrenteEntrataId
                  	   and   class.data_cancellazione is null
	                   and   class.validita_fine is null
    	               and   c.data_cancellazione is null
        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=ricorrenteEntrataId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
                           limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
		*/
        if codResult is not null then
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select fase.elem_gest_id,
                           fase.elem_code,
                           fase.elem_code2,
                           fase.elem_code3,
	                       fase.bil_id,
     	                   faseBilElabId,
	                       CL_RICORRENTE_ENTRATA,
     	                   CL_RICORRENTE_ENTRATA||' mancante',
         	               dataInizioVal,
             	           fase.ente_proprietario_id,
	                       loginOperazione
	                from fase_bil_t_prev_approva_str_elem_gest_esiste fase
			    	where fase.ente_proprietario_id=enteProprietarioId
				    and   fase.bil_id=bilancioId
			        and   fase.fase_bil_elab_id=faseBilElabId
			    	and   fase.elem_prev_id is not null
				    and   fase.data_cancellazione is null
			        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				           where class.elem_id=fase.elem_prev_id
			                       and   c.classif_id=class.classif_id
			               	       and   c.classif_tipo_id=ricorrenteEntrataId
			                  	   and   class.data_cancellazione is null
				                   and   class.validita_fine is null
			    	               and   c.data_cancellazione is null
			        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
            		              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
		                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
        			               order by class.elem_id
                    			   limit 1)
				  	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	    			           where class.elem_id=fase.elem_gest_id
            	    				   and   c.classif_id=class.classif_id
			                	       and   c.classif_tipo_id=ricorrenteEntrataId
            			        	   and   class.data_cancellazione is null
	                    			   and   class.validita_fine is null
			    	                   and   c.data_cancellazione is null
        				               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                        			   and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
			                           and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
              				           order by class.elem_id
                           			limit 1)
                   );

          end if;



	    -- CL_SIOPE_ENTRATA_TERZO
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_SIOPE_ENTRATA_TERZO||'.';
        select  1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
--	    and   fase.elem_prev_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
    	and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	           where class.elem_id=fase.elem_prev_id
                       and   c.classif_id=class.classif_id
               	       and   c.classif_tipo_id=siopeEntrataTipoId
                  	   and   class.data_cancellazione is null
	                   and   class.validita_fine is null
    	               and   c.data_cancellazione is null
        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=siopeEntrataTipoId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
	                       limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;
        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
		*/
        if codResult is not null then
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select fase.elem_gest_id,
                           fase.elem_code,
                           fase.elem_code2,
                           fase.elem_code3,
	                       fase.bil_id,
     	                   faseBilElabId,
	                       CL_SIOPE_ENTRATA_TERZO,
     	                   CL_SIOPE_ENTRATA_TERZO||' mancante',
         	               dataInizioVal,
             	           fase.ente_proprietario_id,
	                       loginOperazione
	                from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    				where fase.ente_proprietario_id=enteProprietarioId
			        and   fase.bil_id=bilancioId
			        and   fase.fase_bil_elab_id=faseBilElabId
			    	and   fase.elem_prev_id is not null
				    and   fase.data_cancellazione is null
			        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				           where class.elem_id=fase.elem_prev_id
			                       and   c.classif_id=class.classif_id
			               	       and   c.classif_tipo_id=siopeEntrataTipoId
			                  	   and   class.data_cancellazione is null
				                   and   class.validita_fine is null
			    	               and   c.data_cancellazione is null
			        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
            		              and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                    		      and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
			                       order by class.elem_id
            			           limit 1)
			    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
			        	               where class.elem_id=fase.elem_gest_id
            				           and   c.classif_id=class.classif_id
			                	       and   c.classif_tipo_id=siopeEntrataTipoId
            			        	   and   class.data_cancellazione is null
				                       and   class.validita_fine is null
			    	                   and   c.data_cancellazione is null
        				               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
				                       and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
 	              				       and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
			                           order by class.elem_id
	        			               limit 1)
                   );
              end if;

	    -- CL_TRANSAZIONE_UE_ENTRATA
        codResult:=null;
        strMessaggio:='Inserimento nuove strutture gestione esistenti da previsione equivalente [siac_r_bil_elem_class].Verifica esistenza relazioni '||CL_TRANSAZIONE_UE_ENTRATA||'.';
        select 1 into codResult
	    from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    	where fase.ente_proprietario_id=enteProprietarioId
--	    and   fase.elem_gest_id=elem.elem_id
        and   fase.bil_id=bilancioId
        and   fase.fase_bil_elab_id=faseBilElabId
        and   fase.elem_prev_id is not null
	    and   fase.data_cancellazione is null
        -- 02.03.2016 Dani se classificatore definito in previsione deve essere stato ribaltato su gestione
        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	           where class.elem_id=fase.elem_prev_id
                       and   c.classif_id=class.classif_id
               	       and   c.classif_tipo_id=transazioneUeEntrataId
                  	   and   class.data_cancellazione is null
	                   and   class.validita_fine is null
    	               and   c.data_cancellazione is null
        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                       order by class.elem_id
                       limit 1)
    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        	               where class.elem_id=fase.elem_gest_id--elem.elem_id
            	           and   c.classif_id=class.classif_id
                	       and   c.classif_tipo_id=transazioneUeEntrataId
                    	   and   class.data_cancellazione is null
	                       and   class.validita_fine is null
    	                   and   c.data_cancellazione is null
        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
                          and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
                          and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                           order by class.elem_id
	                       limit 1)
		order by fase.fase_bil_prev_str_esiste_id
	    limit 1;

        if codResult is not null then
	               strMessaggio:=strMessaggio||' Inserimento segnalazione mancanza classif.';
              	   insert into fase_bil_t_prev_apertura_segnala
		           (elem_id,
			        elem_code,
			 	    elem_code2,
				    elem_code3,
				    bil_id,
				    fase_bil_elab_id,
			        segnala_codice,
		 		    segnala_desc,
				    validita_inizio,
				    ente_proprietario_id,
	  		        login_operazione)
	               (select fase.elem_gest_id,
                           fase.elem_code,
                           fase.elem_code2,
                           fase.elem_code3,
	                       fase.bil_id,
     	                   faseBilElabId,
	                       CL_TRANSAZIONE_UE_ENTRATA,
     	                   CL_TRANSAZIONE_UE_ENTRATA||' mancante',
         	               dataInizioVal,
             	           fase.ente_proprietario_id,
	                       loginOperazione
	                from fase_bil_t_prev_approva_str_elem_gest_esiste fase--, siac_t_bil_elem elem
    				where fase.ente_proprietario_id=enteProprietarioId
			        and   fase.bil_id=bilancioId
			        and   fase.fase_bil_elab_id=faseBilElabId
			        and   fase.elem_prev_id is not null
				    and   fase.data_cancellazione is null
			        and   exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				           where class.elem_id=fase.elem_prev_id
			                       and   c.classif_id=class.classif_id
			               	       and   c.classif_tipo_id=transazioneUeEntrataId
			                  	   and   class.data_cancellazione is null
				                   and   class.validita_fine is null
			    	               and   c.data_cancellazione is null
			        	           and   c.validita_fine is null
                            -- JIRA-SIAC-4167 14.11.2016 Anto
			                       and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
			                       and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
			                       order by class.elem_id
			                       limit 1)
			    	and   not exists ( select 1 from siac_r_bil_elem_class class , siac_t_class c
        				               where class.elem_id=fase.elem_gest_id
			            	           and   c.classif_id=class.classif_id
			                	       and   c.classif_tipo_id=transazioneUeEntrataId
			                    	   and   class.data_cancellazione is null
				                       and   class.validita_fine is null
			    	                   and   c.data_cancellazione is null
			        	               and   c.validita_fine is null
                                -- JIRA-SIAC-4167 14.11.2016 Anto
            				           and   date_trunc('day',dataInizioValClass)>=date_trunc('day',c.validita_inizio)
				                       and   ( date_trunc('day',dataFineValClass)<=date_trunc('day',c.validita_fine) or c.validita_fine is null)
                			           order by class.elem_id
				                       limit 1)
                   );
         end if;

        /*
	    if codResult is not null then
    		raise exception ' Elementi di bilancio assenti di relazione.';
	    end if;
        */
     end if;

     codResult:=null;
     strMessaggio:='Fine verifica inserimento nuove strutture gestione esistenti da previsione equivalente.';
     insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
      returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

   end if;

 end if;

 strMessaggio:='Aggiornamento fase elaborazione [fase_bil_t_elaborazione].';
 update fase_bil_t_elaborazione set
      fase_bil_elab_esito='IN2',
      fase_bil_elab_esito_msg='ELABORAZIONE FASE BILANCIO '||APPROVA_PREV_SU_GEST||' IN CORSO : AGGIORNAMENTO STRUTTURE COMPLETATO.'
 where fase_bil_elab_id=faseBilElabId;

 codResult:=null;
 insert into fase_bil_t_elaborazione_log
 (fase_bil_elab_id,fase_bil_elab_log_operazione,
  validita_inizio, login_operazione, ente_proprietario_id
 )
 values
 (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
  returning fase_bil_elab_log_id into codResult;

  if codResult is null then
  	raise exception ' Errore in inserimento LOG.';
  end if;


 faseBilElabIdRet:= faseBilElabId;
 messaggioRisultato:=strMessaggioFinale||'OK .';
return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_fasi_bil_prev_approva
(
  annobilancio           integer,
  euElemTipo             varchar,
  bilElemPrevTipo        varchar,
  bilElemGestTipo        varchar,
  faseBilancio           varchar,
  checkGest              boolean,
  impostaImporti         boolean,
  enteproprietarioid     integer,
  loginoperazione        varchar,
  dataelaborazione       timestamp,
  out faseBilElabIdRet   integer,
  out codicerisultato    integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';

	codResult         integer:=null;
    faseBilElabId     integer:=null;

    strRec record;
    importiRec record;

BEGIN
	messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;


	strMessaggioFinale:='Aprovazione bilancio di previsione per Anno bilancio='||annoBilancio::varchar||'.';

	strMessaggio:='Strutture.';
    select * into strRec
    from fnc_fasi_bil_prev_approva_struttura
	(annobilancio,
     faseBilancio, -- 13.10.2016 Sofia
	 euElemTipo,
	 bilElemPrevTipo,
	 bilElemGestTipo,
     checkGest,
     enteproprietarioid,
     loginoperazione,
	 dataelaborazione);
    if strRec.codiceRisultato=0 then
    	faseBilElabId:=strRec.faseBilElabIdRet;
        strMessaggio:='Importi.';
        select * into importiRec
        from fnc_fasi_bil_prev_approva_importi
		(annobilancio,
		 euElemTipo,
		 bilElemPrevTipo,
		 bilElemGestTipo,
		 checkGest,
		 impostaImporti,
		 faseBilElabId,
		 enteproprietarioid,
		 loginoperazione,
 	     dataelaborazione);
        if importiRec.codiceRisultato!=0 then
        	strMessaggio:=importiRec.messaggioRisultato;
            codiceRisultato:=importiRec.codiceRisultato;
        end if;
    else
	    strMessaggio:=strRec.messaggioRisultato;
        codiceRisultato:=strRec.codiceRisultato;
    end if;

    if codiceRisultato=0 then
    	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
        faseBilElabIdRet:=faseBilElabId;
    else messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_apertura_all
(
  annobilancio           integer,
  faseBilancio           varchar,
  stepPartenza           integer,
  checkGest              boolean,
  impostaImporti         boolean,
  enteproprietarioid     integer,
  loginoperazione        varchar,
  dataelaborazione       timestamp,
  out faseBilElabIdRet   integer,
  out codicerisultato    integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';

    faseBilElabId     integer:=null;

    strRec record;

    CAP_EP_STR          CONSTANT varchar:='CAP-EP';
    CAP_UP_STR          CONSTANT varchar:='CAP-UP';
    CAP_EG_STR          CONSTANT varchar:='CAP-EG';
    CAP_UG_STR          CONSTANT varchar:='CAP-UG';

    U_STR               CONSTANT varchar:='U';
    E_STR               CONSTANT varchar:='E';


BEGIN
	messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;


	strMessaggioFinale:='Apertura bilancio gestione per Anno bilancio='||annoBilancio::varchar||
                        '. Fase Bilancio di apertura='||faseBilancio||'.';

    if not (stepPartenza=99 or stepPartenza>=1) then
        strMessaggio:='Step ri-partenza non corretto valori ammessi >=1 99.';
        codiceRisultato:=-1;
    end if;

    -- STEP 1 - capitoli di uscita eseguiro per stepPartenza 1, 99
    if stepPartenza=1 or stepPartenza=99 then
 	 strMessaggio:='Capitolo di uscita.';
     select * into strRec
     from fnc_fasi_bil_gest_apertura
     (annobilancio,
      U_STR,
      CAP_UP_STR,
      CAP_UG_STR,
      faseBilancio,
      checkGest,
      impostaImporti,
      enteProprietarioId,
      loginOperazione,
      dataElaborazione
     );
     if strRec.codiceRisultato=0 then
      	faseBilElabId:=strRec.faseBilElabIdRet;
     else
        strMessaggio:=strRec.messaggioRisultato;
        codiceRisultato:=strRec.codiceRisultato;
     end if;
   end if;

   -- STEP 2 - capitoli di entrata eseguiro per stepPartenza >=2
   if codiceRisultato=0 and stepPartenza>=2 then
    	strMessaggio:='Capitolo di entrata.';
    	select * into strRec
	    from fnc_fasi_bil_gest_apertura
    	(annobilancio,
	     E_STR,
    	 CAP_EP_STR,
	     CAP_EG_STR,
	     faseBilancio,
	     checkGest,
     	 impostaImporti,
	     enteProprietarioId,
    	 loginOperazione,
	     dataElaborazione
    	);
        if strRec.codiceRisultato=0 then
      		faseBilElabId:=strRec.faseBilElabIdRet;
	    else
    	    strMessaggio:=strRec.messaggioRisultato;
        	codiceRisultato:=strRec.codiceRisultato;
	    end if;
    end if;

    if codiceRisultato=0 then
    	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
        faseBilElabIdRet:=faseBilElabId;
    else
    	messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;


    -- STEP 3 -- popolamento dei vincoli di gestione
    if codiceRisultato=0 and stepPartenza>=2 then

    	if faseBilancio = 'E' then
	    	select * into strRec from fnc_fasi_bil_gest_ribaltamento_vincoli ('GEST-GEST',annobilancio,enteproprietarioid,loginoperazione, dataelaborazione );
		else
			select * into strRec from fnc_fasi_bil_gest_ribaltamento_vincoli ('PREV-GEST',annobilancio,enteproprietarioid,loginoperazione, dataelaborazione );
		end if;

	    if strRec.codiceRisultato=0 then
            faseBilElabId:=strRec.faseBilElabIdRet;
	    else
    	    strMessaggio:=strRec.messaggioRisultato;
        	codiceRisultato:=strRec.codiceRisultato;
	    end if;


    end if;

    if codiceRisultato=0 then
	   	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
	    faseBilElabIdRet:=faseBilElabId;
	else
	  	messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;


CREATE OR REPLACE FUNCTION fnc_fasi_bil_prev_approva_all
(
  annobilancio           integer,
  faseBilancio           varchar,
  stepPartenza           integer,
  checkGest              boolean,
  impostaImporti         boolean,




  enteproprietarioid     integer,
  loginoperazione        varchar,
  dataelaborazione       timestamp,
  out faseBilElabIdRet   integer,

  out codicerisultato    integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
	strMessaggioFinale VARCHAR(1500):='';

	codResult         integer:=null;
    faseBilElabId     integer:=null;

    prevAggImpRec record;
    prevCapRec record;
    strRec record;

    CAP_EP_STR          CONSTANT varchar:='CAP-EP';
    CAP_UP_STR          CONSTANT varchar:='CAP-UP';
    CAP_EG_STR          CONSTANT varchar:='CAP-EG';
    CAP_UG_STR          CONSTANT varchar:='CAP-UG';

    U_STR               CONSTANT varchar:='U';
    E_STR               CONSTANT varchar:='E';

    GESTIONE_FASE               CONSTANT varchar:='G';

BEGIN
	messaggioRisultato:='';
    codiceRisultato:=0;
    faseBilElabIdRet:=0;

	strMessaggioFinale:='Approvazione bilancio di previsione per Anno bilancio='||annoBilancio::varchar||'.';

    if not (stepPartenza=99 or stepPartenza>=2) then
        strMessaggio:='Step ri-partenza non corretto valori ammessi >=2 99.';
        codiceRisultato:=-1;
    end if;

    if faseBilancio is null or faseBilancio!=GESTIONE_FASE then
    	raise exception 'Fase Bilancio da indicare %.',GESTIONE_FASE;
    end if;
    -- STEP 1 -- CAPITOLI USCITA
    -- ESEGUITO SOLO SE ESEGUITI TUTTI
    if codiceRisultato=0 and stepPartenza=99 then
  	 strMessaggio:='Capitoli uscita.';

     select * into prevCapRec
     from fnc_fasi_bil_prev_approva
	 (annobilancio,
      U_STR,
      CAP_UP_STR,
      CAP_UG_STR,
      faseBilancio,
      true,--checkGest
      true,--impostaImporti
	  enteProprietarioId,
	  loginoperazione,
 	  dataelaborazione
     );

     if prevCapRec.codiceRisultato=0 then
    	faseBilElabId:=prevCapRec.faseBilElabIdRet;
     else
        strMessaggio:=prevCapRec.messaggioRisultato;
        codiceRisultato:=prevCapRec.codiceRisultato;
     end if;
    end if;

    -- STEP 2 -- CAPITOLI DI ENTRATA
    -- STEP DI RIPARTENZA
    if codiceRisultato=0  and stepPartenza>=2 then
		strMessaggio:='Capitoli entrata.';
        select * into prevCapRec
        from fnc_fasi_bil_prev_approva
		(annobilancio,
		 E_STR,
		 CAP_EP_STR,
		 CAP_EG_STR,
         faseBilancio,
		 true,--checkGest
         true,--impostaImporti
		 enteproprietarioid,
		 loginoperazione,
 	     dataelaborazione);
        if prevCapRec.codiceRisultato=0 then
    		faseBilElabId:=prevCapRec.faseBilElabIdRet;
        else
	        strMessaggio:=prevCapRec.messaggioRisultato;
    	    codiceRisultato:=prevCapRec.codiceRisultato;
        end if;
    end if;


    -- STEP 3 -- popolamento dei vincoli di gestione da previsione
    if codiceRisultato=0 and stepPartenza>=2 then
	    select * into strRec
        from fnc_fasi_bil_gest_ribaltamento_vincoli
        ('PREV-GEST',
         annoBilancio,
         enteProprietarioid,
         loginOperazione,
         dataElaborazione );

         if strRec.codiceRisultato=0 then
            faseBilElabId:=strRec.faseBilElabIdRet;
	    else
    	    strMessaggio:=strRec.messaggioRisultato;
        	codiceRisultato:=strRec.codiceRisultato;
	    end if;
    end if;

    if codiceRisultato=0 then
    	messaggioRisultato:=strMessaggioFinale||' Elaborazione terminata con successo.';
        faseBilElabIdRet:=faseBilElabId;
    else messaggioRisultato:=strMessaggioFinale||strMessaggio;
    end if;

    return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,strMessaggio,
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,strMessaggio;
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,strMessaggio,SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||strMessaggio||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 50) ;
        codiceRisultato:=-1;
        return;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

-- bilancio gestione - fine

-- 13.12.2017 Sofia - SIAC-5276 FINE

-- 14.12.2017 Daniela - SIAC-5622 - INIZIO
-- 18.12.2017 Daniela - SIAC-5674

CREATE OR REPLACE FUNCTION fnc_fasi_bil_gest_apertura_liq_elabora_liq (
  enteproprietarioid integer,
  annobilancio integer,
  fasebilelabid integer,
  minid integer,
  maxid integer,
  loginoperazione varchar,
  dataelaborazione timestamp,
  out codicerisultato integer,
  out messaggiorisultato varchar
)
RETURNS record AS
$body$
DECLARE
	strMessaggio VARCHAR(1500):='';
    strMessaggioTemp VARCHAR(1000):='';
	strMessaggioFinale VARCHAR(1500):='';

	codResult         integer:=null;


    bilancioId        integer:=null;
  	bilancioPrecId    integer:=null;
    periodoId         integer:=null;
    periodoPrecId     integer:=null;
	dataInizioVal     timestamp:=null;
    dataEmissione     timestamp:=null;

    movGestRec        record;


    liqIdRet          integer:=null;

    -- tipo periodo annuale
    SY_PER_TIPO       CONSTANT varchar:='SY';
    -- tipo anno ordinario annuale
	BIL_ORD_TIPO      CONSTANT varchar:='BIL_ORD';


    APE_GEST_LIQ_RES  CONSTANT varchar:='APE_GEST_LIQ_RES';


BEGIN
    codiceRisultato:=null;
    messaggioRisultato:=null;



    dataInizioVal:= clock_timestamp();

	strMessaggioFinale:='Apertura bilancio gestione.Ribaltamento liquidazioni  residue da Gestione precedente. Anno bilancio='||annoBilancio::varchar
                         ||'.Elabora  minId='||coalesce(minId::varchar,' ')||' maxId='||coalesce(maxId::varchar,' ')
                         ||'. Fase Elaborazione Id='||faseBilElabId||'.';

     raise notice 'strMessaggioFinale %',strMessaggioFinale;

     strMessaggio:='Inserimento LOG.';
	 codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggioFinale||' INIZIO.',clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

	codResult:=null;
    strMessaggio:='Verifica stato fase_bil_t_elaborazione.';
    select 1  into codResult
    from fase_bil_t_elaborazione fase
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.fase_bil_elab_esito like 'IN-%'
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null;
    if codResult is null then
      raise exception ' Nessuna elaborazione in corso [IN-n].';
    end if;


    codResult:=null;
    strMessaggio:='Verifica esistenza movimenti da creare in fase_bil_t_gest_apertura_liq.';
    select 1 into codResult
    from fase_bil_t_gest_apertura_liq fase
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null
    and   fase.fl_elab='N';
    if codResult is null then
      raise exception ' Nessuna liquidazione da creare.';
    end if;


/*    codResult:=null;
    strMessaggio:='Verifica esistenza movimenti creati in fase_bil_t_gest_apertura_liq_imp.';
    select 1 into codResult
    from fase_bil_t_gest_apertura_liq fase
    where fase.fase_bil_elab_id=faseBilElabId
    and   fase.data_cancellazione is null
    and   fase.validita_fine is null
    and   fase.fl_elab='N'
    and   not exists (select 1 from fase_bil_t_gest_apertura_liq_imp fase1
                  	  where fase1.fase_bil_elab_id=faseBilElabId
				      and   fase1.data_cancellazione is null
				      and   fase1.validita_fine is null
    	              and   fase1.movgest_orig_id=fase.movgest_orig_id
        	          and   fase1.movgest_orig_ts_id=fase.movgest_orig_ts_id
            	      and   fase1.fl_elab='I'
                     );
    if codResult is not null then
      raise exception ' Esistono liquidazioni da creare per cui non e'' stato creato il relativo movimento residuo.';
    end if;*/



    if coalesce(minId,0)=0 or coalesce(maxId,0)=0 then
        strMessaggio:='Calcolo min, max Id da elaborare in [fase_bil_t_gest_apertura_liq].';
    	minId:=1;

        select max(fase.fase_bil_gest_ape_liq_id) into maxId
        from fase_bil_t_gest_apertura_liq fase
	    where fase.fase_bil_elab_id=faseBilElabId
    	and   fase.data_cancellazione is null
	    and   fase.validita_fine is null
        and   fase.fl_elab='N';
        if coalesce(maxId ,0)=0 then
        	raise exception ' Impossibile determinare il maxId';
        end if;

    end if;

	 strMessaggio:='Lettura bilancioId e periodoId  per annoBilancio='||annoBilancio::varchar||'.';
     select bil.bil_id , per.periodo_id into strict bilancioId, periodoId
     from siac_t_bil bil, siac_t_periodo per
     where bil.ente_proprietario_id=enteProprietarioId
     and   per.periodo_id=bil.periodo_id
     and   per.anno::INTEGER=annoBilancio
     and   bil.data_cancellazione is null
     and   per.data_cancellazione is null;

     strMessaggio:='Lettura bilancioId e periodoId  per annoBilancio-1='||(annoBilancio-1)::varchar||'.';
     select bil.bil_id , per.periodo_id into strict bilancioPrecId, periodoPrecId
     from siac_t_bil bil, siac_t_periodo per
     where bil.ente_proprietario_id=enteProprietarioId
     and   per.periodo_id=bil.periodo_id
     and   per.anno::INTEGER=annoBilancio-1
     and   bil.data_cancellazione is null
     and   per.data_cancellazione is null;


     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

	 strMessaggio:='Verifica scarti in fase_bil_t_gest_apertura_liq per inesistenza movimento gestione nel nuovo bilancio.';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

	 update fase_bil_t_gest_apertura_liq fase
     set   fl_elab='X',
           scarto_code='LIQ1',
           scarto_desc='Movimento di gestione non esistente in nuovo bilancio'
     where fase.fase_bil_elab_id=faseBilElabId
     and   fase.fase_bil_gest_ape_liq_id between minId and maxId
     and   fase.fl_elab='N'
     and   not exists (select 1
                       from siac_t_movgest mov, siac_t_movgest_ts ts,
                            siac_t_movgest movprec, siac_t_movgest_ts tsprec
    			       where movprec.movgest_id=fase.movgest_orig_id
                       and   tsprec.movgest_ts_id=fase.movgest_orig_ts_id
                       and   tsprec.movgest_id=movprec.movgest_id
                       and   mov.bil_id=bilancioId
                       and   mov.movgest_tipo_id=movprec.movgest_tipo_id
                       and   mov.movgest_anno=movprec.movgest_anno
                       and   mov.movgest_numero=movprec.movgest_numero
                       and   ts.movgest_id=mov.movgest_id
                       and   ts.movgest_ts_code=tsprec.movgest_ts_code
                       and   mov.data_cancellazione is null
                       and   mov.validita_fine is null
                       and   ts.data_cancellazione is null
                       and   ts.validita_fine is null
                       )
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null;


     strMessaggio:='Aggiornamento fase_bil_t_gest_apertura_liq per estremi movimento gestione nel nuovo bilancio.';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

	 update fase_bil_t_gest_apertura_liq fase
     set   movgest_id=mov.movgest_id,
           movgest_ts_id=ts.movgest_ts_id
     from siac_t_movgest mov, siac_t_movgest_ts ts,
          siac_t_movgest movprec, siac_t_movgest_ts tsprec
     where fase.fase_bil_elab_id=faseBilElabId
     and   fase.fase_bil_gest_ape_liq_id between minId and maxId
     and   fase.fl_elab='N'
     and   fase.movgest_id is null
     and   fase.movgest_ts_id is null
     and   movprec.movgest_id=fase.movgest_orig_id
     and   tsprec.movgest_ts_id=fase.movgest_orig_ts_id
     and   tsprec.movgest_id=movprec.movgest_id
     and   mov.bil_id=bilancioId
     and   mov.movgest_tipo_id=movprec.movgest_tipo_id
     and   mov.movgest_anno=movprec.movgest_anno
     and   mov.movgest_numero=movprec.movgest_numero
     and   ts.movgest_id=mov.movgest_id
     and   ts.movgest_ts_code=tsprec.movgest_ts_code
     and   mov.data_cancellazione is null
     and   mov.validita_fine is null
     and   ts.data_cancellazione is null
     and   ts.validita_fine is null
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null;

     codResult:=null;
	 select 1 into codResult
     from fase_bil_t_gest_apertura_liq fase
     where fase.fase_bil_elab_id=faseBilElabId
     and   fase.fase_bil_gest_ape_liq_id between minId and maxId
     and   fase.fl_elab='N'
     and   fase.movgest_id is null
     and   fase.movgest_ts_id is null
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null;
	 if codResult is not null then
     	raise exception ' Non tutti i record sono stati correttamente aggiornati.';
     end if;

	 strMessaggio:='Verifica scarti in fase_bil_t_gest_apertura_liq per liquidazione provvisoria senza documento.';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

	 update fase_bil_t_gest_apertura_liq fase
     set   fl_elab='X',
           scarto_code='LIQ3',
           scarto_desc='Liquidazione provvisoria senza documenti.'
     where fase.fase_bil_elab_id=faseBilElabId
     and   fase.fase_bil_gest_ape_liq_id between minId and maxId
     and   fase.fl_elab='N'
     and   exists (select 1 from siac_r_liquidazione_stato rstato
                                ,siac_d_liquidazione_stato dstato
    			       where rstato.liq_id=fase.liq_orig_id
                       and   rstato.liq_stato_id = dstato.liq_stato_id
                       and   dstato.liq_stato_code = 'P'
                       and   rstato.data_cancellazione is null
                       and   rstato.validita_fine is null)
     and   not exists (select 1
                       from siac_r_subdoc_liquidazione rsub
    			       where rsub.liq_id=fase.liq_orig_id
                       and   rsub.data_cancellazione is null
                       and   rsub.validita_fine is null
                       )
     and   fase.data_cancellazione is null
     and   fase.validita_fine is null;


     strMessaggio:='Inizio ciclo per generazione liquidazioni.';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;


     raise notice 'Prima di inizio ciclo';
     for movGestRec in
     (select  fase.fase_bil_gest_ape_liq_id,
	   		  fase.movgest_ts_tipo,
		      fase.movgest_orig_id,
	          fase.movgest_orig_ts_id,
              fase.liq_orig_id,
		      fase.elem_orig_id,
              fase.elem_id,
              fase.movgest_id,
              fase.movgest_ts_id,
	          fase.liq_importo
      from  fase_bil_t_gest_apertura_liq fase
      where fase.fase_bil_elab_id=faseBilElabId
      and   fase.fase_bil_gest_ape_liq_id between minId and maxId
      and   fase.fl_elab='N'
      and   fase.data_cancellazione is null
      and   fase.validita_fine is null
      order by fase.fase_bil_gest_ape_liq_id
     )
     loop

     	liqIdRet:=null;
        codResult:=null;

        -- siac_t_liquidazione
        -- siac_r_liquidazione_stato
        -- siac_r_liquidazione_soggetto
        -- siac_r_liquidazione_movgest
        -- siac_r_liquidazione_atto_amm
        -- siac_r_mutuo_voce_liquidazione
        -- siac_r_liquidazione_class
        -- siac_r_liquidazione_attr
        -- siac_r_subdoc_liquidazione
		--raise notice 'Inizio ciclo';
        strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'.';
		--raise notice 'Inizio ciclo strMessaggio=%',strMessaggio;

 		 insert into fase_bil_t_elaborazione_log
	     (fase_bil_elab_id,fase_bil_elab_log_operazione,
    	 validita_inizio, login_operazione, ente_proprietario_id
	     )
	     values
    	 (faseBilElabId,strMessaggio||' INIZIO.',clock_timestamp(),loginOperazione,enteProprietarioId)
	     returning fase_bil_elab_log_id into codResult;

	     if codResult is null then
    	 	raise exception ' Errore in inserimento LOG.';
	     end if;

         codResult:=null;

         -- siac_t_liquidazione
		 strMessaggio:=strMessaggio||'Inseimento liquidazione [siac_t_liquidazione].';
         insert into siac_t_liquidazione
         (liq_anno,
		  liq_numero,
		  liq_desc,
		  liq_emissione_data,
		  liq_importo,
		  liq_automatica,
		  liq_convalida_manuale,
		  contotes_id,
		  dist_id,
		  bil_id,
		  modpag_id,
          soggetto_relaz_id,
		  validita_inizio,
		  ente_proprietario_id,
	      login_operazione,
	      siope_tipo_debito_id ,
		  siope_assenza_motivazione_id

         )
         (select
           liq.liq_anno,
		   liq.liq_numero,
		   liq.liq_desc,
		   liq.liq_emissione_data,
		   movGestRec.liq_importo,
		   liq.liq_automatica,
		   liq.liq_convalida_manuale,
		   liq.contotes_id,
		   liq.dist_id,
		   bilancioId,
		   liq.modpag_id,
           liq.soggetto_relaz_id,
		   dataInizioVal,
		   enteProprietarioId,
	       loginOperazione,
           liq.siope_tipo_debito_id,
		   liq.siope_assenza_motivazione_id

           from siac_t_liquidazione liq
           where liq.liq_id=movGestRec.liq_orig_id
         )
         returning liq_id into liqIdRet;

         if liqIdRet is null then
            strMessaggioTemp:=strMessaggio;
            codResult:=-1;
         end if;

         raise notice 'dopo inserimento siac_t_liquidazione liqIdRet=%',liqIdRet;

         -- siac_r_liquidazione_stato
         if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_liquidazione_stato.';

            insert into siac_r_liquidazione_stato
            (liq_id,
             liq_stato_id,
             validita_inizio,
             ente_proprietario_id,
             login_operazione
            )
            (select liqIdRet,
                    r.liq_stato_id,
                    dataInizioVal,
		  	 	    enteProprietarioId,
	                loginOperazione
             from siac_r_liquidazione_stato r
             where r.liq_id= movGestRec.liq_orig_id
             and   r.data_cancellazione is null
             and   r.validita_fine is null
            )
            returning liq_stato_r_id into codResult;

            raise notice 'dopo inserimento siac_r_liquidazione_stato codResult=%',codResult;

            if codResult is null then
      	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
            else codResult:=null;
	        end if;
         end if;

         -- siac_r_liquidazione_soggetto
		 if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_liquidazione_soggetto.';
            insert into siac_r_liquidazione_soggetto
            (liq_id,
             soggetto_id,
             validita_inizio,
             ente_proprietario_id,
             login_operazione
            )
            (select liqIdRet,
                    r.soggetto_id,
                    dataInizioVal,
		  	 	    enteProprietarioId,
	                loginOperazione
             from siac_r_liquidazione_soggetto r
             where r.liq_id=movGestRec.liq_orig_id
             and   r.data_cancellazione is null
             and   r.validita_fine is null
            )
            returning liq_soggetto_id into codResult;

            raise notice 'dopo inserimento siac_r_liquidazione_soggetto codResult=%',codResult;

            if codResult is null then
      	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
            else codResult:=null;
	        end if;

         end if;

         -- siac_r_liquidazione_movgest
         if codResult is null then
             strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_liquidazione_movgest.';
             insert into siac_r_liquidazione_movgest
             (liq_id,
              movgest_ts_id,
              validita_inizio,
              ente_proprietario_id,
              login_operazione
             )
             values
             (liqIdRet,
              movGestRec.movgest_ts_id,
              dataInizioVal,
 	 	      enteProprietarioId,
	          loginOperazione
             );

             select 1 into codResult
             from siac_r_liquidazione_movgest r
             where r.liq_id=liqIdRet
             and   r.data_cancellazione is null
             and   r.validita_fine is null;

             raise notice 'dopo inserimento siac_r_liquidazione_movgest codResult=%',codResult;

             if codResult is null then
    	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
	         else codResult:=null;
             end if;

         end if;

		 -- siac_r_liquidazione_atto_amm
         if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                           ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                           ' movgest_orig_id='||movGestRec.movgest_orig_id||
                           ' movgest_orig_ts_id='||movGestRec.movgest_orig_ts_id||
                           ' elem_orig_id='||movGestRec.elem_orig_id||
                           ' elem_id='||movGestRec.elem_id||'. Inserimento siac_r_liquidazione_atto_amm.';
            insert into siac_r_liquidazione_atto_amm
            (liq_id,
             attoamm_id,
             validita_inizio,
             ente_proprietario_id,
             login_operazione
            )
            (select  liqIdRet,
                     r.attoamm_id,
                     dataInizioVal,
	 	 	         enteProprietarioId,
	                 loginOperazione
             from siac_r_liquidazione_atto_amm r
             where r.liq_id=movGestRec.liq_orig_id
             and   r.data_cancellazione is null
             and   r.validita_fine is null
            )
            returning liq_atto_amm_id into codResult;
            raise notice 'dopo inserimento siac_r_liquidazione_atto_amm codResult=%',codResult;

            if codResult is null then
    	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
	        else codResult:=null;
            end if;

         end if;

         -- siac_r_mutuo_voce_liquidazione
         if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_mutuo_voce_liquidazione.';

           	insert into siac_r_mutuo_voce_liquidazione
            (liq_id,
             mut_voce_id,
             validita_inizio,
             ente_proprietario_id,
             login_operazione
            )
            (select liqIdRet,
                    r.mut_voce_id,
                    dataInizioVal,
	 	 	        enteProprietarioId,
	                loginOperazione
             from siac_r_mutuo_voce_liquidazione  r
             where r.liq_id=movGestRec.liq_orig_id
             and   r.data_cancellazione is null
             and   r.validita_fine is null
            );

            select 1 into codResult
            from siac_r_mutuo_voce_liquidazione  r
            where r.liq_id=movGestRec.liq_orig_id
            and   r.data_cancellazione is null
            and   r.validita_fine is null
            and   not exists ( select 1
				               from siac_r_mutuo_voce_liquidazione  r
					           where r.liq_id=liqIdRet
					            and   r.data_cancellazione is null
					            and   r.validita_fine is null
                              );
			raise notice 'dopo inserimento siac_r_liquidazione_atto_amm codResult=%',codResult;

            if codResult is not null then
    	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
	        else codResult:=null;
            end if;

         end if;


		 -- siac_r_liquidazione_class
         if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_liquidazione_class.';
            insert into  siac_r_liquidazione_class
            (liq_id,
             classif_id,
             validita_inizio,
             ente_proprietario_id,
             login_operazione
            )
            (select  liqIdRet,
                     r.classif_id,
                     dataInizioVal,
	 	 	         enteProprietarioId,
	                 loginOperazione
             from siac_r_liquidazione_class r, siac_t_class c
             where r.liq_id=movGestRec.liq_orig_id
             and   c.classif_id=r.classif_id
             and   r.data_cancellazione is null
             and   r.validita_fine is null
             and   c.data_cancellazione is null
             and   c.validita_fine is null
            );

            select 1 into codResult
            from siac_r_liquidazione_class r,siac_t_class c
            where r.liq_id=movGestRec.liq_orig_id
             and   c.classif_id=r.classif_id
             and   r.data_cancellazione is null
             and   r.validita_fine is null
             and   c.data_cancellazione is null
             and   c.validita_fine is null
             and   not exists ( select 1
				                from siac_r_liquidazione_class r
				                where r.liq_id=liqIdRet
					            and   r.data_cancellazione is null
					            and   r.validita_fine is null
                               );
			raise notice 'dopo inserimento siac_r_liquidazione_class codResult=%',codResult;

            if codResult is not null then
    	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
	        else codResult:=null;
            end if;

         end if;

         -- siac_r_liquidazione_attr
         if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_liquidazione_attr.';
             insert into siac_r_liquidazione_attr
             (liq_id,
              attr_id,
              tabella_id,
			  boolean,
		      percentuale,
		      testo,
			  numerico,
              validita_inizio,
              ente_proprietario_id,
              login_operazione
             )
             (select liqIdRet,
                     r.attr_id,
                     r.tabella_id,
			         r.boolean,
		             r.percentuale,
		             r.testo,
			         r.numerico,
                     dataInizioVal,
	 	 	         enteProprietarioId,
	                 loginOperazione
              from siac_r_liquidazione_attr r, siac_t_attr attr
              where r.liq_id=movGestRec.liq_orig_id
              and   attr.attr_id=r.attr_id
              and   r.data_cancellazione is null
              and   r.validita_fine is null
              and   attr.data_cancellazione is null
              and   attr.validita_fine is null
             );

             select 1 into codResult
             from siac_r_liquidazione_attr r, siac_t_attr attr
              where r.liq_id=movGestRec.liq_orig_id
              and   attr.attr_id=r.attr_id
              and   r.data_cancellazione is null
              and   r.validita_fine is null
              and   attr.data_cancellazione is null
              and   attr.validita_fine is null
              and   not exists (select 1
				                from siac_r_liquidazione_attr r
					            where r.liq_id=liqIdRet
					            and   r.data_cancellazione is null
					            and   r.validita_fine is null
                                );
			raise notice 'dopo inserimento siac_r_liquidazione_attr codResult=%',codResult;

             if codResult is not null then
    	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
	         else codResult:=null;
             end if;
         end if;


         -- siac_r_subdoc_liquidazione
         if codResult is null then
         	strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Inserimento siac_r_subdoc_liquidazione.';
            insert into siac_r_subdoc_liquidazione
            (liq_id,
             subdoc_id,
             validita_inizio,
             ente_proprietario_id,
             login_operazione
            )
            (select liqIdRet,
                    r.subdoc_id,
                    dataInizioVal,
	 	 	        enteProprietarioId,
	                loginOperazione
             from siac_r_subdoc_liquidazione r, siac_t_subdoc sub
             where r.liq_id=movGestRec.liq_orig_id
             and   sub.subdoc_id=r.subdoc_id
             and   not exists (select 1
                               from siac_r_subdoc_ordinativo_ts rord,siac_t_ordinativo_ts tsord, siac_t_ordinativo ord,
                                    siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato
			                   where rord.subdoc_id=r.subdoc_id
		        		        and  tsord.ord_ts_id=rord.ord_ts_id
				                and  ord.ord_id=tsord.ord_id
				                and  ord.bil_id=bilancioPrecId
		    	        	    and  rstato.ord_id=ord.ord_id
		        	        	and  stato.ord_stato_id=rstato.ord_stato_id
			        	        and  stato.ord_stato_code!='A'
			            	    and  rord.data_cancellazione is null
			                	and  rord.validita_fine is null
			    	            and  rstato.data_cancellazione is null
			        	        and  rstato.validita_fine is null
        			    	  )
             and   r.data_cancellazione is null
             and   r.validita_fine is null
             and   sub.data_cancellazione is null
             and   sub.validita_fine is null
             );

             select 1 into codResult
             from siac_r_subdoc_liquidazione r, siac_t_subdoc sub
             where r.liq_id=movGestRec.liq_orig_id
             and   sub.subdoc_id=r.subdoc_id
             and   not exists (select 1
                               from siac_r_subdoc_ordinativo_ts rord,siac_t_ordinativo_ts tsord, siac_t_ordinativo ord,
                                    siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato
			                   where rord.subdoc_id=r.subdoc_id
		        		        and  tsord.ord_ts_id=rord.ord_ts_id
				                and  ord.ord_id=tsord.ord_id
				                and  ord.bil_id=bilancioPrecId
		    	        	    and  rstato.ord_id=ord.ord_id
		        	        	and  stato.ord_stato_id=rstato.ord_stato_id
			        	        and  stato.ord_stato_code!='A'
			            	    and  rord.data_cancellazione is null
			                	and  rord.validita_fine is null
			    	            and  rstato.data_cancellazione is null
			        	        and  rstato.validita_fine is null
        			    	  )
             and   not exists (select 1
				               from siac_r_subdoc_liquidazione r
					           where r.liq_id=liqIdRet
				               and   r.data_cancellazione is null
					           and   r.validita_fine is null)
             and   r.data_cancellazione is null
             and   r.validita_fine is null
             and   sub.data_cancellazione is null
             and   sub.validita_fine is null;
			raise notice 'dopo inserimento siac_r_subdoc_liquidazione codResult=%',codResult;

             if codResult is not null then
    	      strMessaggioTemp:=strMessaggio;
        	  codResult:=-1;
	         else codResult:=null;
             end if;

       end if;

	   -- cancellazione logica relazioni anno precedente
       -- siac_r_subdoc_liquidazione
       /* spostato sotto
       if codResult is null then
	        strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Cancellazione relazioni liquidazione su gestione prec. [siac_r_subdoc_liquidazione].';
	        update siac_r_subdoc_liquidazione r
    	    set    data_cancellazione=dataElaborazione,
        	       validita_fine=dataElaborazione,
            	   login_operazione=r.login_operazione||'-'||loginOperazione
	        where r.liq_id=movGestRec.liq_orig_id
    	    and   r.data_cancellazione is null
        	and   r.validita_fine is null;

	        select 1 into codResult
    	    from siac_r_subdoc_liquidazione r
        	where r.liq_id=movGestRec.liq_orig_id
	        and   r.data_cancellazione is null
    	    and   r.validita_fine is null;

        	if codResult is not null then
	    	    strMessaggioTemp:=strMessaggio;
    	        codResult:=-1;
	    	else codResult:=null;
	       end if;

        end if; */

       -- pulizia dati inseriti
       -- aggiornamento fase_bil_t_gest_apertura_liq per scarto
	   if codResult=-1 then

         -- siac_r_subdoc_liquidazione
	     strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_subdoc_liquidazione.';
         delete from siac_r_subdoc_liquidazione    where liq_id=liqIdRet;


         -- siac_r_liquidazione_class
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_liquidazione_class.';
         delete from siac_r_liquidazione_class    where liq_id=liqIdRet;


         -- siac_r_liquidazione_attr
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_liquidazione_attr.';
         delete from siac_r_liquidazione_attr    where liq_id=liqIdRet;


         -- siac_r_mutuo_voce_liquidazione
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_mutuo_voce_liquidazione.';
         delete from siac_r_mutuo_voce_liquidazione    where liq_id=liqIdRet;

		 -- siac_r_liquidazione_atto_amm
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_liquidazione_atto_amm.';
         delete from siac_r_liquidazione_atto_amm    where liq_id=liqIdRet;

		 -- siac_r_liquidazione_movgest
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_liquidazione_movgest.';
         delete from siac_r_liquidazione_movgest    where liq_id=liqIdRet;

         -- siac_r_liquidazione_soggetto
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_liquidazione_soggetto.';
         delete from siac_r_liquidazione_soggetto    where liq_id=liqIdRet;

         -- siac_r_liquidazione_stato
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_r_liquidazione_stato.';
         delete from siac_r_liquidazione_stato    where liq_id=liqIdRet;

         -- siac_t_liquidazione
         strMessaggio:=strMessaggioTemp||
                       ' Non Effettuato. Cancellazione siac_t_liquidazione.';
         delete from siac_t_liquidazione    where liq_id=liqIdRet;



        /*strMessaggio:=strMessaggioTemp||
                     ' Non Effettuato. Aggiornamento fase_bil_t_gest_apertura_liq per scarto.';*/
	    strMessaggioTemp:=strMessaggio;
        strMessaggio:=strMessaggio||
                      'Aggiornamento fase_bil_t_gest_apertura_liq per scarto.';
      	update fase_bil_t_gest_apertura_liq fase
        set fl_elab='X',
            scarto_code='LIQ2',
            scarto_desc='Liquidazione residua non inserita.'||strMessaggioTemp
        where fase.fase_bil_gest_ape_liq_id=movGestRec.fase_bil_gest_ape_liq_id
        and   fase.fase_bil_elab_id=faseBilElabId
        and   fase.liq_orig_id=movGestRec.liq_orig_id
        and   fase.fl_elab='N'
        and   fase.data_cancellazione is null
        and   fase.validita_fine is null;

		continue;
       end if;

       if codResult is null then
	        strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Cancellazione relazioni liquidazione su gestione prec. [siac_r_subdoc_liquidazione].';
            -- 12.01.2017 Sofia sistemazione subdoc per quote pagate
	        update siac_r_subdoc_liquidazione r
    	    set    data_cancellazione=dataElaborazione,
        	       validita_fine=dataElaborazione,
            	   login_operazione=r.login_operazione||'-'||loginOperazione
	        where r.liq_id=movGestRec.liq_orig_id
            and   not exists (select 1
                               from siac_r_subdoc_ordinativo_ts rord,siac_t_ordinativo_ts tsord, siac_t_ordinativo ord,
                                    siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato
			                   where rord.subdoc_id=r.subdoc_id
		        		        and  tsord.ord_ts_id=rord.ord_ts_id
				                and  ord.ord_id=tsord.ord_id
				                and  ord.bil_id=bilancioPrecId
		    	        	    and  rstato.ord_id=ord.ord_id
		        	        	and  stato.ord_stato_id=rstato.ord_stato_id
			        	        and  stato.ord_stato_code!='A'
			            	    and  rord.data_cancellazione is null
			                	and  rord.validita_fine is null
			    	            and  rstato.data_cancellazione is null
			        	        and  rstato.validita_fine is null
        			    	  )
    	    and   r.data_cancellazione is null
        	and   r.validita_fine is null;

	        select 1 into codResult
    	    from siac_r_subdoc_liquidazione r
        	where r.liq_id=movGestRec.liq_orig_id
            and   not exists (select 1
                               from siac_r_subdoc_ordinativo_ts rord,siac_t_ordinativo_ts tsord, siac_t_ordinativo ord,
                                    siac_r_ordinativo_stato rstato, siac_d_ordinativo_stato stato
			                   where rord.subdoc_id=r.subdoc_id
		        		        and  tsord.ord_ts_id=rord.ord_ts_id
				                and  ord.ord_id=tsord.ord_id
				                and  ord.bil_id=bilancioPrecId
		    	        	    and  rstato.ord_id=ord.ord_id
		        	        	and  stato.ord_stato_id=rstato.ord_stato_id
			        	        and  stato.ord_stato_code!='A'
			            	    and  rord.data_cancellazione is null
			                	and  rord.validita_fine is null
			    	            and  rstato.data_cancellazione is null
			        	        and  rstato.validita_fine is null
        			    	  )
	        and   r.data_cancellazione is null
    	    and   r.validita_fine is null;

        	if codResult is not null then
	    	    --strMessaggioTemp:=strMessaggio;
    	        codResult:=-1;
                raise exception ' Errore in aggiornamento.';
	    	else codResult:=null;
	       end if;

      end if;

	  strMessaggio:='Movimento liq_orig_id='||movGestRec.liq_orig_id||
                      ' movGestTsTipo='||movGestRec.movgest_ts_tipo||
                      ' elem_orig_id='||movGestRec.elem_orig_id||
                      ' elem_id='||movGestRec.elem_id||
                      ' movgest_id='||movGestRec.movgest_id||
                      ' movgest_ts_id='||movGestRec.movgest_ts_id||'. Aggiornamento fase_bil_t_gest_apertura_liq per fine elaborazione.';
      	update fase_bil_t_gest_apertura_liq fase
        set fl_elab='S',
            liq_id=liqIdRet
        where fase.fase_bil_gest_ape_liq_id=movGestRec.fase_bil_gest_ape_liq_id
        and   fase.fase_bil_elab_id=faseBilElabId
        and   fase.liq_orig_id=movGestRec.liq_orig_id
        and   fase.fl_elab='N'
        and   fase.data_cancellazione is null
        and   fase.validita_fine is null;


       codResult:=null;
	   insert into fase_bil_t_elaborazione_log
	   (fase_bil_elab_id,fase_bil_elab_log_operazione,
        validita_inizio, login_operazione, ente_proprietario_id
	   )
	   values
       (faseBilElabId,strMessaggio||' FINE.',clock_timestamp(),loginOperazione,enteProprietarioId)
	   returning fase_bil_elab_log_id into codResult;

	   if codResult is null then
    	 	raise exception ' Errore in inserimento LOG.';
	   end if;

     end loop;

	 strMessaggio:='Cancellazione logica liq provv anno precedente';
     codResult:=null;
	 insert into fase_bil_t_elaborazione_log
     (fase_bil_elab_id,fase_bil_elab_log_operazione,
      validita_inizio, login_operazione, ente_proprietario_id
     )
     values
     (faseBilElabId,strMessaggio,clock_timestamp(),loginOperazione,enteProprietarioId)
     returning fase_bil_elab_log_id into codResult;

     if codResult is null then
     	raise exception ' Errore in inserimento LOG.';
     end if;

     update siac_t_liquidazione liq
     set data_cancellazione=now(),
         login_operazione=liq.login_operazione||'-'||loginOperazione
     from fase_bil_t_gest_apertura_liq fase,
          siac_r_liquidazione_stato rs, siac_d_liquidazione_stato stato
     where fase.fase_bil_elab_id=faseBilElabId
     and liq.liq_id=fase.liq_orig_id
     and rs.liq_id=liq.liq_id
     and stato.liq_stato_id=rs.liq_stato_id
     and stato.liq_stato_code='P'
     and rs.data_cancellazione is null
     and rs.validita_fine is null
     and fase.fl_elab = 'S'
     and fase.liq_id is not null;

     strMessaggio:='Aggiornamento stato fase bilancio IN-3.';
     update fase_bil_t_elaborazione
     set fase_bil_elab_esito='IN-3',
         fase_bil_elab_esito_msg='ELABORAZIONE FASE BILANCIO '||APE_GEST_LIQ_RES||' IN CORSO IN-3.Elabora Liq.'
     where fase_bil_elab_id=faseBilElabId;


     codiceRisultato:=0;
     messaggioRisultato:=strMessaggioFinale||' FINE';
     return;

exception
    when RAISE_EXCEPTION THEN
    	raise notice '% % ERRORE : %',strMessaggioFinale,coalesce(strMessaggio,''),
	        	substring(upper(SQLERRM) from 1 for 500);
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'ERRORE :'||' '||substring(upper(SQLERRM) from 1 for 1500) ;
        codiceRisultato:=-1;
        return;

	when no_data_found THEN
		raise notice ' % % Nessun elemento trovato.' ,strMessaggioFinale,coalesce(strMessaggio,'');
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'Nessun elemento trovato.' ;
        codiceRisultato:=-1;
		return;
	when others  THEN
		raise notice '% % Errore DB % %',strMessaggioFinale,coalesce(strMessaggio,''),SQLSTATE,
	        	substring(upper(SQLERRM) from 1 for 50);
        messaggioRisultato:=strMessaggioFinale||coalesce(strMessaggio,'')||'Errore DB '||SQLSTATE||' '||substring(upper(SQLERRM) from 1 for 1500) ;
        codiceRisultato:=-1;
        return;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

-- 14.12.2017 Daniela - SIAC-5622 - FINE

-- SIAC-5556 INIZIO
CREATE OR REPLACE FUNCTION siac."BILR171_allegato_fpv_previsione_con_dati_gestione" (
  p_ente_prop_id integer,
  p_anno varchar
)
RETURNS TABLE (
  missione_code varchar,
  missione_desc varchar,
  programma_code varchar,
  programma_desc varchar,
  importi_capitoli numeric,
  spese_impegnate numeric,
  spese_impegnate_anno1 numeric,
  spese_impegnate_anno2 numeric,
  spese_impegnate_anno_succ numeric,
  importo_avanzo numeric,
  importo_avanzo_anno1 numeric,
  importo_avanzo_anno2 numeric,
  importo_avanzo_anno_succ numeric,
  elem_id integer,
  anno_esercizio varchar
) AS
$body$
DECLARE

RTN_MESSAGGIO text;
bilancio_id integer;
bilancio_id_prec integer;
cod_fase_operativa varchar;
anno_esercizio varchar;
anno_esercizio_prec varchar;
annoimpimpegni_int integer;

BEGIN

/*Se la fase di bilancio e' previsione allora l''anno di esercizio e il bilancio id saranno
quelli di p_anno-1 per tutte le colonne. 

Se la fase di bilancio e' esercizio Provvisorio allora l''anno di esercizio e il bilancio id saranno
quelli di p_anno per tutte le colonne tranne quella relativa agli iporti dei capitolo (colonna a).
In questo caso l''anno di esercizio e il bilancio id saranno quelli di p_anno-1.*/

RTN_MESSAGGIO := 'select 1'; 

bilancio_id := null;
bilancio_id_prec := null;

select bil.bil_id, fase_operativa.fase_operativa_code
into   bilancio_id, cod_fase_operativa
from  siac_d_fase_operativa fase_operativa, 
      siac_r_bil_fase_operativa bil_fase_operativa, 
      siac_t_bil bil, 
      siac_t_periodo periodo
where fase_operativa.fase_operativa_id = bil_fase_operativa.fase_operativa_id
and   bil_fase_operativa.bil_id = bil.bil_id
and   periodo.periodo_id = bil.periodo_id
and   fase_operativa.fase_operativa_code in ('P','E')
and   bil.ente_proprietario_id = p_ente_prop_id
and   periodo.anno = p_anno
and   fase_operativa.data_cancellazione is null
and   bil_fase_operativa.data_cancellazione is null 
and   bil.data_cancellazione is null 
and   periodo.data_cancellazione is null;
 
if cod_fase_operativa = 'P' then
  
  anno_esercizio := ((p_anno::integer)-1)::varchar;   

  select a.bil_id 
  into bilancio_id 
  from siac_t_bil a,siac_t_periodo b
  where a.ente_proprietario_id = p_ente_prop_id 
  and b.periodo_id = a.periodo_id
  and b.anno = anno_esercizio;
  
elsif cod_fase_operativa = 'E' then

  anno_esercizio := p_anno; 
  
end if;

-- anno_esercizio_prec := ((anno_esercizio::integer)-1)::varchar;
anno_esercizio_prec := ((p_anno::integer)-1)::varchar;

select a.bil_id
into bilancio_id_prec 
from siac_t_bil a,siac_t_periodo b
where a.ente_proprietario_id = p_ente_prop_id 
and b.periodo_id = a.periodo_id
and b.anno = anno_esercizio_prec;

-- annoImpImpegni_int := anno_esercizio::integer; 
annoImpImpegni_int := p_anno::integer; 

return query
select 
zz.*
from (
select 
tab1.*
from (
with struttura as (
select *
from fnc_bilr_struttura_cap_bilancio_spese (p_ente_prop_id,anno_esercizio,null) -- Potrebbe essere anche anno_esercizio_prec
),
capitoli_anno_prec as (
select 	programma.classif_id programma_id,
		macroaggr.classif_id macroaggregato_id,
       	capitolo.elem_code, capitolo.elem_desc, capitolo.elem_code2,
        capitolo.elem_desc2, capitolo.elem_code3, capitolo.elem_id
from siac_t_bil_elem capitolo,
	 siac_d_bil_elem_tipo tipo_elemento,
     siac_r_bil_elem_stato r_capitolo_stato,
     siac_d_bil_elem_stato stato_capitolo,      
     siac_r_bil_elem_class r_capitolo_programma,
     siac_r_bil_elem_class r_capitolo_macroaggr, 	 
	 siac_d_bil_elem_categoria cat_del_capitolo,
     siac_r_bil_elem_categoria r_cat_capitolo,
     siac_d_class_tipo programma_tipo,
     siac_t_class programma,
     siac_d_class_tipo macroaggr_tipo,
     siac_t_class macroaggr
where capitolo.elem_tipo_id = tipo_elemento.elem_tipo_id 						
and capitolo.elem_id = r_capitolo_stato.elem_id							
and	r_capitolo_stato.elem_stato_id = stato_capitolo.elem_stato_id		
and	capitolo.elem_id = r_capitolo_programma.elem_id							
and capitolo.elem_id = r_capitolo_macroaggr.elem_id							
and programma.classif_tipo_id = programma_tipo.classif_tipo_id 				
and programma.classif_id = r_capitolo_programma.classif_id					
and macroaggr.classif_tipo_id = macroaggr_tipo.classif_tipo_id 			
and macroaggr.classif_id = r_capitolo_macroaggr.classif_id					
and	capitolo.elem_id = r_cat_capitolo.elem_id				
and r_cat_capitolo.elem_cat_id = cat_del_capitolo.elem_cat_id		
and capitolo.ente_proprietario_id = p_ente_prop_id							
and capitolo.bil_id = bilancio_id_prec													
and programma_tipo.classif_tipo_code = 'PROGRAMMA'							
and	macroaggr_tipo.classif_tipo_code = 'MACROAGGREGATO'						
and	tipo_elemento.elem_tipo_code = 'CAP-UG'						     		
and stato_capitolo.elem_stato_code = 'VA' 
and cat_del_capitolo.elem_cat_code in ('FPV','FPVC')    
and	programma_tipo.data_cancellazione 			is null
and	programma.data_cancellazione 				is null
and	macroaggr_tipo.data_cancellazione 			is null
and	macroaggr.data_cancellazione 				is null
and	capitolo.data_cancellazione 				is null
and	tipo_elemento.data_cancellazione 			is null
and	r_capitolo_programma.data_cancellazione 	is null
and	r_capitolo_macroaggr.data_cancellazione 	is null 
and	stato_capitolo.data_cancellazione 			is null 
and	r_capitolo_stato.data_cancellazione 		is null
and	cat_del_capitolo.data_cancellazione 		is null
and	r_cat_capitolo.data_cancellazione           is null
),
capitoli_importo as ( -- Fondo pluriennale vincolato al 31 dicembre dell''esercizio N-1
select 		capitolo_importi.elem_id,
           	sum(capitolo_importi.elem_det_importo) importi_capitoli
from 		siac_t_bil_elem_det 		capitolo_importi,
         	siac_d_bil_elem_det_tipo 	capitolo_imp_tipo,
         	siac_t_periodo 				capitolo_imp_periodo,
            siac_t_bil_elem 			capitolo,
            siac_d_bil_elem_tipo 		tipo_elemento,
	 		siac_d_bil_elem_stato 		stato_capitolo, 
     		siac_r_bil_elem_stato 		r_capitolo_stato,
	 		siac_d_bil_elem_categoria 	cat_del_capitolo,
     		siac_r_bil_elem_categoria 	r_cat_capitolo
where capitolo_importi.ente_proprietario_id = p_ente_prop_id  								 
and	capitolo.elem_id = capitolo_importi.elem_id 
and	capitolo.elem_tipo_id = tipo_elemento.elem_tipo_id
and	capitolo_importi.elem_det_tipo_id = capitolo_imp_tipo.elem_det_tipo_id 		
and	capitolo_imp_periodo.periodo_id = capitolo_importi.periodo_id 
and	capitolo.elem_id = r_capitolo_stato.elem_id			
and	r_capitolo_stato.elem_stato_id = stato_capitolo.elem_stato_id
and	capitolo.elem_id = r_cat_capitolo.elem_id				
and	r_cat_capitolo.elem_cat_id = cat_del_capitolo.elem_cat_id	
and	capitolo.bil_id = bilancio_id_prec							
and	tipo_elemento.elem_tipo_code = 'CAP-UG'			  
and	capitolo_imp_periodo.anno = anno_esercizio_prec	
and	stato_capitolo.elem_stato_code = 'VA'								
and	cat_del_capitolo.elem_cat_code in ('FPV','FPVC')
and capitolo_imp_tipo.elem_det_tipo_code = 'STA'				
and	capitolo_importi.data_cancellazione 		is null
and	capitolo_imp_tipo.data_cancellazione 		is null
and	capitolo_imp_periodo.data_cancellazione 	is null
and	capitolo.data_cancellazione 				is null
and	tipo_elemento.data_cancellazione 			is null
and	stato_capitolo.data_cancellazione 			is null 
and	r_capitolo_stato.data_cancellazione 		is null
and cat_del_capitolo.data_cancellazione 		is null
and	r_cat_capitolo.data_cancellazione 			is null
group by capitolo_importi.elem_id
)
select 
struttura.missione_code::varchar,
struttura.missione_desc::varchar,
struttura.programma_code::varchar,
struttura.programma_desc::varchar,
capitoli_importo.importi_capitoli::numeric,
null::numeric spese_impegnate,
null::numeric spese_impegnate_anno1,
null::numeric spese_impegnate_anno2,
null::numeric spese_impegnate_anno_succ,
null::numeric importo_avanzo,
null::numeric importo_avanzo_anno1,
null::numeric importo_avanzo_anno2,
null::numeric importo_avanzo_anno_succ,
capitoli_anno_prec.elem_id::integer,
anno_esercizio::varchar
from struttura
left join capitoli_anno_prec on struttura.programma_id = capitoli_anno_prec.programma_id
                   and struttura.macroag_id = capitoli_anno_prec.macroaggregato_id
left join capitoli_importo on capitoli_anno_prec.elem_id = capitoli_importo.elem_id
) tab1
union all
select 
tab2.*
from (
with struttura as (
select *
from fnc_bilr_struttura_cap_bilancio_spese (p_ente_prop_id,anno_esercizio,null)
),
capitoli as (
select 	programma.classif_id programma_id,
		macroaggr.classif_id macroaggregato_id,
       	capitolo.elem_code, capitolo.elem_desc, capitolo.elem_code2,
        capitolo.elem_desc2, capitolo.elem_code3, capitolo.elem_id
from siac_t_bil_elem capitolo,
	 siac_d_bil_elem_tipo tipo_elemento,
     siac_r_bil_elem_stato r_capitolo_stato,
     siac_d_bil_elem_stato stato_capitolo,      
     siac_r_bil_elem_class r_capitolo_programma,
     siac_r_bil_elem_class r_capitolo_macroaggr, 	 
	 siac_d_bil_elem_categoria cat_del_capitolo,
     siac_r_bil_elem_categoria r_cat_capitolo,
     siac_d_class_tipo programma_tipo,
     siac_t_class programma,
     siac_d_class_tipo macroaggr_tipo,
     siac_t_class macroaggr
where capitolo.elem_tipo_id = tipo_elemento.elem_tipo_id 						
and capitolo.elem_id = r_capitolo_stato.elem_id							
and	r_capitolo_stato.elem_stato_id = stato_capitolo.elem_stato_id		
and	capitolo.elem_id = r_capitolo_programma.elem_id							
and capitolo.elem_id = r_capitolo_macroaggr.elem_id							
and programma.classif_tipo_id = programma_tipo.classif_tipo_id 				
and programma.classif_id = r_capitolo_programma.classif_id					
and macroaggr.classif_tipo_id = macroaggr_tipo.classif_tipo_id 				
and macroaggr.classif_id = r_capitolo_macroaggr.classif_id					
and	capitolo.elem_id = r_cat_capitolo.elem_id				
and r_cat_capitolo.elem_cat_id = cat_del_capitolo.elem_cat_id		
and capitolo.ente_proprietario_id = p_ente_prop_id							
and capitolo.bil_id = bilancio_id													
and programma_tipo.classif_tipo_code = 'PROGRAMMA'							
and	macroaggr_tipo.classif_tipo_code = 'MACROAGGREGATO'						
and	tipo_elemento.elem_tipo_code = 'CAP-UG'						     		
and stato_capitolo.elem_stato_code = 'VA' 
-- and cat_del_capitolo.elem_cat_code in ('FPV','FPVC')    
and	programma_tipo.data_cancellazione 			is null
and	programma.data_cancellazione 				is null
and	macroaggr_tipo.data_cancellazione 			is null
and	macroaggr.data_cancellazione 				is null
and	capitolo.data_cancellazione 				is null
and	tipo_elemento.data_cancellazione 			is null
and	r_capitolo_programma.data_cancellazione 	is null
and	r_capitolo_macroaggr.data_cancellazione 	is null 
and	stato_capitolo.data_cancellazione 			is null 
and	r_capitolo_stato.data_cancellazione 		is null
and	cat_del_capitolo.data_cancellazione 		is null
and	r_cat_capitolo.data_cancellazione           is null
),
dati_impegni as (
with importo_impegni as (
with   impegni as (
select ts_impegni_legati.movgest_ts_b_id,
       movimento.movgest_anno anno_impegno
from   siac_r_movgest_ts ts_impegni_legati
inner  join siac_t_movgest_ts ts_movimento on ts_impegni_legati.movgest_ts_b_id = ts_movimento.movgest_ts_id
inner  join siac_t_movgest movimento on ts_movimento.movgest_id = movimento.movgest_id
where  ts_impegni_legati.ente_proprietario_id = p_ente_prop_id
and    movimento.movgest_anno  >= annoImpImpegni_int
and    movimento.bil_id = bilancio_id
and    ts_impegni_legati.data_cancellazione is null
and    ts_movimento.data_cancellazione is null
and    movimento.data_cancellazione is null
and    ts_impegni_legati.validita_fine is null
group by ts_impegni_legati.movgest_ts_b_id, movimento.movgest_anno
),
imp_impegni_accertamenti as (
select ts_impegni_legati.movgest_ts_b_id,
       movimento.movgest_anno anno_accertamento,
       sum(ts_impegni_legati.movgest_ts_importo) movgest_ts_importo       
from   siac_r_movgest_ts ts_impegni_legati
inner  join siac_t_movgest_ts ts_movimento on ts_impegni_legati.movgest_ts_a_id = ts_movimento.movgest_ts_id
inner  join siac_t_movgest movimento on ts_movimento.movgest_id = movimento.movgest_id
where  ts_impegni_legati.ente_proprietario_id = p_ente_prop_id
and    ts_impegni_legati.avav_id is null
and    movimento.bil_id = bilancio_id
and    movimento.movgest_anno <= annoImpImpegni_int+2
and    ts_impegni_legati.data_cancellazione is null
and    ts_movimento.data_cancellazione is null
and    movimento.data_cancellazione is null
and    ts_impegni_legati.validita_fine is null
group by ts_impegni_legati.movgest_ts_b_id, movimento.movgest_anno 
),
imp_impegni_avanzo as (
select ts_impegni_legati.movgest_ts_b_id,
       sum(ts_impegni_legati.movgest_ts_importo) movgest_ts_importo,
       movimento.movgest_anno        
from   siac_r_movgest_ts ts_impegni_legati
inner  join siac_t_avanzovincolo avanzovincolo on ts_impegni_legati.avav_id = avanzovincolo.avav_id
inner  join siac_d_avanzovincolo_tipo tipo_avanzovincolo on avanzovincolo.avav_tipo_id = tipo_avanzovincolo.avav_tipo_id
inner  join siac_t_movgest_ts ts_movimento on ts_impegni_legati.movgest_ts_b_id = ts_movimento.movgest_ts_id
inner  join siac_t_movgest movimento on ts_movimento.movgest_id = movimento.movgest_id
where  ts_impegni_legati.ente_proprietario_id = p_ente_prop_id
and    movimento.bil_id = bilancio_id
and    ts_impegni_legati.movgest_ts_a_id is null
and    tipo_avanzovincolo.avav_tipo_code in ('AAM','FPVSC','FPVCC')
and    movimento.movgest_anno >= annoImpImpegni_int
and    ts_impegni_legati.data_cancellazione is null
and    avanzovincolo.data_cancellazione is null 
and    tipo_avanzovincolo.data_cancellazione is null
and    ts_movimento.data_cancellazione is null 
and    movimento.data_cancellazione is null
and    ts_impegni_legati.validita_fine is null
group by ts_impegni_legati.movgest_ts_b_id, movimento.movgest_anno 
)
select impegni.movgest_ts_b_id,
       case 
        when impegni.anno_impegno = annoImpImpegni_int and imp_impegni_accertamenti.anno_accertamento <= annoImpImpegni_int-1 then
             sum(imp_impegni_accertamenti.movgest_ts_importo)
       end spese_impegnate,  
       case 
        when impegni.anno_impegno = annoImpImpegni_int+1 and imp_impegni_accertamenti.anno_accertamento <= annoImpImpegni_int then
             sum(imp_impegni_accertamenti.movgest_ts_importo)
       end spese_impegnate_anno1,   
       case 
        when impegni.anno_impegno = annoImpImpegni_int+2 and imp_impegni_accertamenti.anno_accertamento <= annoImpImpegni_int+1 then
             sum(imp_impegni_accertamenti.movgest_ts_importo)
       end spese_impegnate_anno2,    
       case 
        when impegni.anno_impegno > annoImpImpegni_int+2 and imp_impegni_accertamenti.anno_accertamento <= annoImpImpegni_int+2 then
             sum(imp_impegni_accertamenti.movgest_ts_importo)
       end spese_impegnate_anno_succ,
       case 
        when impegni.anno_impegno = annoImpImpegni_int then
             sum(imp_impegni_avanzo.movgest_ts_importo)
       end importo_avanzo,    
       case 
        when impegni.anno_impegno = annoImpImpegni_int+1 then
             sum(imp_impegni_avanzo.movgest_ts_importo)
       end importo_avanzo_anno1,      
       case 
        when impegni.anno_impegno = annoImpImpegni_int+2 then
             sum(imp_impegni_avanzo.movgest_ts_importo)            
       end importo_avanzo_anno2,
       case 
        when impegni.anno_impegno > annoImpImpegni_int+2 then
             sum(imp_impegni_avanzo.movgest_ts_importo)            
       end importo_avanzo_anno_succ                      
from   impegni
left   join imp_impegni_accertamenti on impegni.movgest_ts_b_id = imp_impegni_accertamenti.movgest_ts_b_id
left   join imp_impegni_avanzo on impegni.movgest_ts_b_id = imp_impegni_avanzo.movgest_ts_b_id
group by impegni.movgest_ts_b_id, impegni.anno_impegno, imp_impegni_accertamenti.anno_accertamento
),
capitoli_impegni as (
select capitolo.elem_id, ts_movimento.movgest_ts_id
from  siac_t_bil_elem                 capitolo
inner join siac_r_movgest_bil_elem    r_mov_capitolo on r_mov_capitolo.elem_id = capitolo.elem_id
inner join siac_d_bil_elem_tipo       t_capitolo on capitolo.elem_tipo_id = t_capitolo.elem_tipo_id
inner join siac_t_movgest             movimento on r_mov_capitolo.movgest_id = movimento.movgest_id
inner join siac_t_movgest_ts          ts_movimento on movimento.movgest_id = ts_movimento.movgest_id
where capitolo.ente_proprietario_id = p_ente_prop_id
and   capitolo.bil_id =	bilancio_id
and   movimento.bil_id = bilancio_id
and   t_capitolo.elem_tipo_code = 'CAP-UG'
and   movimento.movgest_anno >= annoImpImpegni_int
and   capitolo.data_cancellazione is null 
and   r_mov_capitolo.data_cancellazione is null 
and   t_capitolo.data_cancellazione is null
and   movimento.data_cancellazione is null 
and   ts_movimento.data_cancellazione is null 
)
select 
capitoli_impegni.elem_id,
sum(importo_impegni.spese_impegnate) spese_impegnate,
sum(importo_impegni.spese_impegnate_anno1) spese_impegnate_anno1,
sum(importo_impegni.spese_impegnate_anno2) spese_impegnate_anno2,
sum(importo_impegni.spese_impegnate_anno_succ) spese_impegnate_anno_succ,
sum(importo_impegni.importo_avanzo) importo_avanzo,
sum(importo_impegni.importo_avanzo_anno1) importo_avanzo_anno1,
sum(importo_impegni.importo_avanzo_anno2) importo_avanzo_anno2,
sum(importo_impegni.importo_avanzo_anno_succ) importo_avanzo_anno_succ
from capitoli_impegni
left join importo_impegni on capitoli_impegni.movgest_ts_id = importo_impegni.movgest_ts_b_id
group by capitoli_impegni.elem_id
)
select 
struttura.missione_code::varchar,
struttura.missione_desc::varchar,
struttura.programma_code::varchar,
struttura.programma_desc::varchar,
null::numeric importi_capitoli,
dati_impegni.spese_impegnate::numeric,
dati_impegni.spese_impegnate_anno1::numeric,
dati_impegni.spese_impegnate_anno2::numeric,
dati_impegni.spese_impegnate_anno_succ::numeric,
dati_impegni.importo_avanzo::numeric,
dati_impegni.importo_avanzo_anno1::numeric,
dati_impegni.importo_avanzo_anno2::numeric,
dati_impegni.importo_avanzo_anno_succ::numeric,
capitoli.elem_id::integer,
anno_esercizio::varchar
from struttura
left join capitoli on  struttura.programma_id = capitoli.programma_id
                   and struttura.macroag_id = capitoli.macroaggregato_id
left join dati_impegni on  capitoli.elem_id = dati_impegni.elem_id
) tab2
) as zz;

-- raise notice 'Dati % - %',anno_esercizio::varchar,anno_esercizio_prec::varchar;
-- raise notice 'Dati % - %',bilancio_id::varchar,bilancio_id_prec::varchar;

exception
when no_data_found THEN
raise notice 'nessun dato trovato per struttura bilancio';
return;
when others  THEN
RAISE EXCEPTION '% Errore : %-%.',RTN_MESSAGGIO,SQLSTATE,substring(SQLERRM from 1 for 500);
return;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100 ROWS 1000;
-- SIAC-5556 FINE

-- SIAC-5551 INIZIO


/*"pdce_fam_code"	"classif_tipo_code"
"RE"	"CE_CODBIL"
"CE"	"CE_CODBIL"
"AP"	"SPA_CODBIL"
"PP"	"SPP_CODBIL"
"OA"	"SPA_CODBIL"
"OP"	"SPP_CODBIL"
*/

insert into siac_d_pdce_fam (
  pdce_fam_code,
  pdce_fam_desc,
  pdce_fam_segno,
  pdce_livello_legge,
  validita_inizio,
  ente_proprietario_id,
  login_operazione,
  ambito_id
)
select
f.pdce_fam_code,
  f.pdce_fam_desc,
  f.pdce_fam_segno,
  f.pdce_livello_legge,
  now(),
  f.ente_proprietario_id,
  f.login_operazione,
  a2.ambito_id
from siac_d_pdce_fam f, siac_d_ambito a, siac_d_ambito a2
where f.ambito_id=a.ambito_id
and a.ambito_code='AMBITO_FIN'
and a2.ambito_code='AMBITO_GSA'
and a.ente_proprietario_id=f.ente_proprietario_id
and a2.ente_proprietario_id=f.ente_proprietario_id
and not exists (select 1 from siac_d_pdce_fam z where z.ente_proprietario_id=f.ente_proprietario_id
and z.pdce_fam_code=f.pdce_fam_code and z.data_cancellazione is null 
and a2.ambito_id=z.ambito_id
);

--
create table caricamento_contibil_gsa (
codbil_id serial not null,
code varchar,
descr varchar,
flsuconti varchar,
tipo varchar,
livello integer,
codepadre varchar,
codedadescr varchar
);



insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAZ999',ltrim('A) IMMOBILIZZAZIONI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA000',ltrim('     A.I) IMMOBILIZZAZIONI IMMATERIALI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA010',ltrim('            A.I.1) Costi di impianto e di ampliamento'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA020',ltrim('                       A.I.1.a) Costi di impianto e di ampliamento'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA030',ltrim('                       A.I.1.b) F.do Amm.to costi di impianto e di ampliamento'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA040',ltrim('            A.I.2) Costi di ricerca e sviluppo'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA050',ltrim('                       A.I.2.a) Costi di ricerca e sviluppo'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA060',ltrim('                       A.I.2.b) F.do Amm.to costi di ricerca e sviluppo'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA070',ltrim('            A.I.3) Diritti di brevetto e diritti di utilizzazione delle opere d''ingegno'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA080',ltrim('                       A.I.3.a) Diritti di brevetto e diritti di utilizzazione delle opere d''ingegno - derivanti dall''attività di ricerca'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA090',ltrim('                       A.I.3.b) F.do Amm.to diritti di brevetto e diritti di utilizzazione delle opere d''ingegno – derivanti dall''attività di ricerca'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA100',ltrim('                       A.I.3.c) Diritti di brevetto e diritti di utilizzazione delle opere d''ingegno - altri'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA110',ltrim('                       A.I.3.d) F.do Amm.to diritti di brevetto e diritti di utilizzazione delle opere d''ingegno - altri'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA120',ltrim('            A.I.4) Immobilizzazioni immateriali in corso e acconti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA130',ltrim('            A.I.5) Altre immobilizzazioni immateriali'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA140',ltrim('                       A.I.5.a) Concessioni, licenze, marchi e diritti simili'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA150',ltrim('                       A.I.5.b) F.do Amm.to concessioni, licenze, marchi e diritti simili'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA160',ltrim('                       A.I.5.c) Migliorie su beni di terzi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA170',ltrim('                       A.I.5.d) F.do Amm.to migliorie su beni di terzi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA180',ltrim('                       A.I.5.e) Pubblicità'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA190',ltrim('                       A.I.5.f) F.do Amm.to pubblicità'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA200',ltrim('                       A.I.5.g) Altre immobilizzazioni immateriali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA210',ltrim('                       A.I.5.h) F.do Amm.to altre immobilizzazioni immateriali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA220',ltrim('            A.I.6) Fondo Svalutazione immobilizzazioni immateriali'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA230',ltrim('                       A.I.6.a) F.do Svalut. Costi di impianto e di ampliamento'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA240',ltrim('                       A.I.6.b) F.do Svalut. Costi di ricerca e sviluppo'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA250',ltrim('                       A.I.6.c) F.do Svalut. Diritti di brevetto e diritti di utilizzazione delle opere d''ingegno'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA260',ltrim('                       A.I.6.d) F.do Svalut. Altre immobilizzazioni immateriali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA270',ltrim('     A.II)  IMMOBILIZZAZIONI MATERIALI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA280',ltrim('            A.II.1) Terreni'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA290',ltrim('                       A.II.1.a) Terreni disponibili'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA300',ltrim('                       A.II.1.b) Terreni indisponibili'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA310',ltrim('            A.II.2) Fabbricati'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA320',ltrim('                       A.II.2.a) Fabbricati non strumentali (disponibili)'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA330',ltrim('                               A.II.2.a.1) Fabbricati non strumentali (disponibili)'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA340',ltrim('                               A.II.2.a.2) F.do Amm.to Fabbricati non strumentali (disponibili)'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA350',ltrim('                       A.II.2.b) Fabbricati strumentali (indisponibili)'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA360',ltrim('                               A.II.2.b.1) Fabbricati strumentali (indisponibili)'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA370',ltrim('                               A.II.2.b.2) F.do Amm.to Fabbricati strumentali (indisponibili)'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA380',ltrim('            A.II.3) Impianti e macchinari'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA390',ltrim('                       A.II.3.a) Impianti e macchinari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA400',ltrim('                       A.II.3.b) F.do Amm.to Impianti e macchinari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA410',ltrim('            A.II.4) Attrezzature sanitarie e scientifiche'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA420',ltrim('                       A.II.4.a) Attrezzature sanitarie e scientifiche'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA430',ltrim('                       A.II.4.b) F.do Amm.to Attrezzature sanitarie e scientifiche'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA440',ltrim('            A.II.5) Mobili e arredi'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA450',ltrim('                       A.II.5.a) Mobili e arredi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA460',ltrim('                       A.II.5.b) F.do Amm.to Mobili e arredi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA470',ltrim('            A.II.6) Automezzi'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA480',ltrim('                       A.II.6.a) Automezzi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA490',ltrim('                       A.II.6.b) F.do Amm.to Automezzi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA500',ltrim('            A.II.7) Oggetti d''arte'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA510',ltrim('            A.II.8) Altre immobilizzazioni materiali'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA520',ltrim('                       A.II.8.a) Altre immobilizzazioni materiali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA530',ltrim('                       A.II.8.b) F.do Amm.to Altre immobilizzazioni materiali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA540',ltrim('            A.II.9) Immobilizzazioni materiali in corso e acconti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA550',ltrim('            A.II.10) Fondo Svalutazione immobilizzazioni materiali'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA560',ltrim('                       A.II.10.a) F.do Svalut. Terreni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA570',ltrim('                       A.II.10.b) F.do Svalut. Fabbricati'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA580',ltrim('                       A.II.10.c) F.do Svalut. Impianti e macchinari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA590',ltrim('                       A.II.10.d) F.do Svalut. Attrezzature sanitarie e scientifiche'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA600',ltrim('                       A.II.10.e) F.do Svalut. Mobili e arredi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA610',ltrim('                       A.II.10.f) F.do Svalut. Automezzi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA620',ltrim('                       A.II.10.g) F.do Svalut. Oggetti d''arte'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA630',ltrim('                       A.II.10.h) F.do Svalut. Altre immobilizzazioni materiali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA640',ltrim('     A.III)  IMMOBILIZZAZIONI FINANZIARIE'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA650',ltrim('            A.III.1) Crediti finanziari'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA660',ltrim('                       A.III.1.a) Crediti finanziari v/Stato'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA670',ltrim('                       A.III.1.b) Crediti finanziari v/Regione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA680',ltrim('                       A.III.1.c) Crediti finanziari v/partecipate'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA690',ltrim('                       A.III.1.d) Crediti finanziari v/altri'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA700',ltrim('            A.III.2) Titoli'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA710',ltrim('                       A.III.2.a) Partecipazioni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA720',ltrim('                       A.III.2.b) Altri titoli'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA730',ltrim('                            A.III.2.b.1) Titoli di Stato'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA740',ltrim('                            A.III.2.b.2) Altre Obbligazioni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA750',ltrim('                            A.III.2.b.3) Titoli azionari quotati in Borsa'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('AAA760',ltrim('                            A.III.2.b.4) Titoli diversi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABZ999',ltrim('B)  ATTIVO CIRCOLANTE'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA000',ltrim('     B.I)  RIMANENZE'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA010',ltrim('            B.I.1) Rimanenze beni sanitari'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA020',ltrim('                       B.I.1.a)  Prodotti farmaceutici ed emoderivati'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA030',ltrim('                       B.I.1.b)  Sangue ed emocomponenti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA040',ltrim('                       B.I.1.c)  Dispositivi medici'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA050',ltrim('                       B.I.1.d)  Prodotti dietetici'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA060',ltrim('                       B.I.1.e)  Materiali per la profilassi (vaccini)'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA070',ltrim('                       B.I.1.f)  Prodotti chimici'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA080',ltrim('                       B.I.1.g)  Materiali e prodotti per uso veterinario'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA090',ltrim('                       B.I.1.h)  Altri beni e prodotti sanitari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA100',ltrim('                       B.I.1.i)  Acconti per acquisto di beni e prodotti sanitari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA110',ltrim('            B.I.2) Rimanenze beni non sanitari'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA120',ltrim('                       B.I.2.a)  Prodotti alimentari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA130',ltrim('                       B.I.2.b)  Materiali di guardaroba, di pulizia, e di convivenza in genere'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA140',ltrim('                       B.I.2.c)  Combustibili, carburanti e lubrificanti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA150',ltrim('                       B.I.2.d)  Supporti informatici e cancelleria'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA160',ltrim('                       B.I.2.e)  Materiale per la manutenzione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA170',ltrim('                       B.I.2.f)  Altri beni e prodotti non sanitari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA180',ltrim('                       B.I.2.g)  Acconti per acquisto di beni e prodotti non sanitari'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA190',ltrim('     B.II)  CREDITI '),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA200',ltrim('            B.II.1)  Crediti v/Stato'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA210',ltrim('                       B.II.1.a)  Crediti v/Stato per spesa corrente - Integrazione a norma del D.L.vo 56/2000'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA220',ltrim('                       B.II.1.b)  Crediti v/Stato per spesa corrente - FSN'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA230',ltrim('                       B.II.1.c)  Crediti v/Stato per mobilità attiva extraregionale'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA240',ltrim('                       B.II.1.d)  Crediti v/Stato per mobilità attiva internazionale'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA250',ltrim('                       B.II.1.e)  Crediti v/Stato per acconto quota fabbisogno sanitario regionale standard'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA260',ltrim('                       B.II.1.f)  Crediti v/Stato per finanziamento sanitario aggiuntivo corrente'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA270',ltrim('                       B.II.1.g)   Crediti v/Stato per spesa corrente - altro'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA280',ltrim('                       B.II.1.h)  Crediti v/Stato per finanziamenti per investimenti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA290',ltrim('                       B.II.1.i)  Crediti v/Stato per ricerca'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA300',ltrim('                            B.II.1.i.1)  Crediti v/Stato per ricerca corrente - Ministero della Salute'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA310',ltrim('                            B.II.1.i.2)  Crediti v/Stato per ricerca finalizzata - Ministero della Salute'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA320',ltrim('                            B.II.1.i.3)  Crediti v/Stato per ricerca - altre Amministrazioni centrali '),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA330',ltrim('                            B.II.1.i.4)  Crediti v/Stato per ricerca - finanziamenti per investimenti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA340',ltrim('                       B.II.1.l)  Crediti v/prefetture'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA350',ltrim('            B.II.2)  Crediti v/Regione o Provincia Autonoma'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA360',ltrim('                       B.II.2.a)  Crediti v/Regione o Provincia Autonoma per spesa corrente'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA370',ltrim('                            B.II.2.a.1)  Crediti v/Regione o Provincia Autonoma per spesa corrente - IRAP'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA380',ltrim('                            B.II.2.a.2)  Crediti v/Regione o Provincia Autonoma per spesa corrente - Addizionale IRPEF'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA390',ltrim('                            B.II.2.a.3)  Crediti v/Regione o Provincia Autonoma per quota FSR'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA400',ltrim('                            B.II.2.a.4)  Crediti v/Regione o Provincia Autonoma per mobilità attiva intraregionale'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA410',ltrim('                            B.II.2.a.5)  Crediti v/Regione o Provincia Autonoma per mobilità attiva extraregionale'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA420',ltrim('                            B.II.2.a.6)  Crediti v/Regione o Provincia Autonoma per acconto quota FSR'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA430',ltrim('                            B.II.2.a.7)  Crediti v/Regione o Provincia Autonoma per finanziamento sanitario aggiuntivo corrente LEA'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA440',ltrim('                            B.II.2.a.8)  Crediti v/Regione o Provincia Autonoma per finanziamento sanitario aggiuntivo corrente extra LEA'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA450',ltrim('                            B.II.2.a.9)  Crediti v/Regione o Provincia Autonoma per spesa corrente - altro'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA460',ltrim('                            B.II.2.a.10)  Crediti v/Regione o Provincia Autonoma per ricerca'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA470',ltrim('                       B.II.2.b) Crediti v/Regione o Provincia Autonoma per versamenti a patrimonio netto'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA480',ltrim('                            B.II.2.b.1) Crediti v/Regione o Provincia Autonoma per finanziamenti per investimenti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA490',ltrim('                            B.II.2.b.2) Crediti v/Regione o Provincia Autonoma per incremento fondo dotazione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA500',ltrim('                            B.II.2.b.3) Crediti v/Regione o Provincia Autonoma per ripiano perdite'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA510',ltrim('                            B.II.2.b.4) Crediti v/Regione per copertura debiti al 31/12/2005'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA520',ltrim('                            B.II.2.b.5) Crediti v/Regione o Provincia Autonoma per ricostituzione risorse da investimenti esercizi precedenti'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA530',ltrim('            B.II.3)  Crediti v/Comuni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA540',ltrim('            B.II.4) Crediti v/Aziende sanitarie pubbliche'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA550',ltrim('                       B.II.4.a) Crediti v/Aziende sanitarie pubbliche della Regione'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA560',ltrim('                            B.II.4.a.1) Crediti v/Aziende sanitarie pubbliche della Regione - per mobilità in compensazione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA570',ltrim('                            B.II.4.a.2) Crediti v/Aziende sanitarie pubbliche della Regione - per mobilità non in compensazione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA580',ltrim('                            B.II.4.a.3) Crediti v/Aziende sanitarie pubbliche della Regione - per altre prestazioni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA590',ltrim('                       B.II.4.b) Acconto quota FSR da distribuire'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA600',ltrim('                       B.II.4.c) Crediti v/Aziende sanitarie pubbliche Extraregione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA610',ltrim('            B.II.5) Crediti v/società partecipate e/o enti dipendenti della Regione'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA620',ltrim('                       B.II.5.a) Crediti v/enti regionali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA630',ltrim('                       B.II.5.b) Crediti v/sperimentazioni gestionali'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA640',ltrim('                       B.II.5.c) Crediti v/altre partecipate'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA650',ltrim('            B.II.6) Crediti v/Erario'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA660',ltrim('            B.II.7) Crediti v/altri'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA670',ltrim('                       B.II.7.a) Crediti v/clienti privati'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA680',ltrim('                       B.II.7.b) Crediti v/gestioni liquidatorie'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA690',ltrim('                       B.II.7.c) Crediti v/altri soggetti pubblici'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA700',ltrim('                       B.II.7.d) Crediti v/altri soggetti pubblici per ricerca'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA710',ltrim('                       B.II.7.e) Altri crediti diversi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA720',ltrim('     B.III)  ATTIVITA'' FINANZIARIE CHE NON COSTITUISCONO IMMOBILIZZAZIONI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA730',ltrim('            B.III.1)  Partecipazioni che non costituiscono immobilizzazioni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA740',ltrim('            B.III.2)  Altri titoli che non costituiscono immobilizzazioni'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA750',ltrim('     B.IV)  DISPONIBILITA'' LIQUIDE'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA760',ltrim('            B.IV.1)  Cassa'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA770',ltrim('            B.IV.2)  Istituto Tesoriere'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA780',ltrim('            B.IV.3) Tesoreria Unica'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ABA790',ltrim('            B.IV.4) Conto corrente postale'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACZ999',ltrim('C)  RATEI E RISCONTI ATTIVI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACA000',ltrim('     C.I) RATEI ATTIVI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACA010',ltrim('            C.I.1) Ratei attivi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACA020',ltrim('            C.I.2) Ratei attivi v/Aziende sanitarie pubbliche della Regione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACA030',ltrim('     C.II) RISCONTI ATTIVI'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACA040',ltrim('            C.II.1) Risconti attivi'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ACA050',ltrim('            C.II.2) Risconti attivi v/Aziende sanitarie pubbliche della Regione'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ADZ999',ltrim('D)  CONTI D''ORDINE'),'N','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ADA000',ltrim('     D.I) CANONI DI LEASING ANCORA DA PAGARE'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ADA010',ltrim('     D.II) DEPOSITI CAUZIONALI'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ADA020',ltrim('     D.III) BENI IN COMODATO'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ADA030',ltrim('     D.IV) ALTRI CONTI D''ORDINE'),'S','SPA_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0000',ltrim('A)  Valore della produzione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0010',ltrim('A.1)  Contributi in c/esercizio'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0020',ltrim('A.1.A)  Contributi da Regione o Prov. Aut. per quota F.S. regionale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0030',ltrim('A.1.A.1)  da Regione o Prov. Aut. per quota F.S. regionale indistinto'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0040',ltrim('A.1.A.2)  da Regione o Prov. Aut. per quota F.S. regionale vincolato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0050',ltrim('A.1.B)  Contributi c/esercizio (extra fondo)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0060',ltrim('A.1.B.1)  da Regione o Prov. Aut. (extra fondo) '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0070',ltrim('A.1.B.1.1)  Contributi da Regione o Prov. Aut. (extra fondo) vincolati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0080',ltrim('A.1.B.1.2)  Contributi da Regione o Prov. Aut. (extra fondo) - Risorse aggiuntive da bilancio regionale a titolo di copertura LEA'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0090',ltrim('A.1.B.1.3)  Contributi da Regione o Prov. Aut. (extra fondo) - Risorse aggiuntive da bilancio regionale a titolo di copertura extra LEA'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0100',ltrim('A.1.B.1.4)  Contributi da Regione o Prov. Aut. (extra fondo) - Altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0110',ltrim('A.1.B.2)  Contributi da Aziende sanitarie pubbliche della Regione o Prov. Aut. (extra fondo) '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0120',ltrim('A.1.B.2.1)  Contributi da Aziende sanitarie pubbliche della Regione o Prov. Aut. (extra fondo) vincolati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0130',ltrim('A.1.B.2.2)  Contributi da Aziende sanitarie pubbliche della Regione o Prov. Aut. (extra fondo) altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0140',ltrim('A.1.B.3)  Contributi da altri soggetti pubblici (extra fondo) '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0150',ltrim('A.1.B.3.1)  Contributi da altri soggetti pubblici (extra fondo) vincolati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0160',ltrim('A.1.B.3.2)  Contributi da altri soggetti pubblici (extra fondo) L. 210/92'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0170',ltrim('A.1.B.3.3)  Contributi da altri soggetti pubblici (extra fondo) altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0180',ltrim('A.1.C)  Contributi c/esercizio per ricerca'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0190',ltrim('A.1.C.1)  Contributi da Ministero della Salute per ricerca corrente'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0200',ltrim('A.1.C.2)  Contributi da Ministero della Salute per ricerca finalizzata'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0210',ltrim('A.1.C.3)  Contributi da Regione ed altri soggetti pubblici per ricerca'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0220',ltrim('A.1.C.4)  Contributi da privati per ricerca'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0230',ltrim('A.1.D)  Contributi c/esercizio da privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0240',ltrim('A.2)  Rettifica contributi c/esercizio per destinazione ad investimenti'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0250',ltrim('A.2.A)  Rettifica contributi in c/esercizio per destinazione ad investimenti - da Regione o Prov. Aut. per quota F.S. regionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0260',ltrim('A.2.B)  Rettifica contributi in c/esercizio per destinazione ad investimenti - altri contributi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0270',ltrim('A.3) Utilizzo fondi per quote inutilizzate contributi vincolati di esercizi precedenti'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0280',ltrim('A.3.A)  Utilizzo fondi per quote inutilizzate contributi di esercizi precedenti da Regione o Prov. Aut. per quota F.S. regionale vincolato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0290',ltrim('A.3.B) Utilizzo fondi per quote inutilizzate contributi di esercizi precedenti da soggetti pubblici (extra fondo) vincolati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0300',ltrim('A.3.C)  Utilizzo fondi per quote inutilizzate contributi di esercizi precedenti per ricerca'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0310',ltrim('A.3.D) Utilizzo fondi per quote inutilizzate contributi vincolati di esercizi precedenti da privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0320',ltrim('A.4)  Ricavi per prestazioni sanitarie e sociosanitarie a rilevanza sanitaria'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0330',ltrim('A.4.A)  Ricavi per prestazioni sanitarie e sociosanitarie a rilevanza sanitaria erogate a soggetti pubblici '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0340',ltrim('A.4.A.1)  Ricavi per prestaz. sanitarie  e sociosanitarie a rilevanza sanitaria erogate ad Aziende sanitarie pubbliche della Regione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0350',ltrim('A.4.A.1.1) Prestazioni di ricovero'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0360',ltrim('A.4.A.1.2) Prestazioni di specialistica ambulatoriale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0370',ltrim('A.4.A.1.3) Prestazioni di psichiatria residenziale e semiresidenziale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0380',ltrim('A.4.A.1.4) Prestazioni di File F'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0390',ltrim('A.4.A.1.5) Prestazioni servizi MMG, PLS, Contin. assistenziale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0400',ltrim('A.4.A.1.6) Prestazioni servizi farmaceutica convenzionata'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0410',ltrim('A.4.A.1.7) Prestazioni termali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0420',ltrim('A.4.A.1.8) Prestazioni trasporto ambulanze ed elisoccorso'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0430',ltrim('A.4.A.1.9) Altre prestazioni sanitarie e socio-sanitarie a rilevanza sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0440',ltrim('A.4.A.2)   Ricavi per prestaz. sanitarie e sociosanitarie a rilevanza sanitaria erogate ad altri soggetti pubblici '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0450',ltrim('A.4.A.3)   Ricavi per prestaz. sanitarie e sociosanitarie a rilevanza sanitaria erogate a soggetti pubblici Extraregione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0460',ltrim('A.4.A.3.1) Prestazioni di ricovero'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0470',ltrim('A.4.A.3.2) Prestazioni ambulatoriali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0480',ltrim('A.4.A.3.3) Prestazioni di psichiatria non soggetta a compensazione (resid. e semiresid.)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0490',ltrim('A.4.A.3.4) Prestazioni di File F'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0500',ltrim('A.4.A.3.5) Prestazioni servizi MMG, PLS, Contin. assistenziale Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0510',ltrim('A.4.A.3.6) Prestazioni servizi farmaceutica convenzionata Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0520',ltrim('A.4.A.3.7) Prestazioni termali Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0530',ltrim('A.4.A.3.8) Prestazioni trasporto ambulanze ed elisoccorso Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0540',ltrim('A.4.A.3.9) Altre prestazioni sanitarie e sociosanitarie a rilevanza sanitaria Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0550',ltrim('A.4.A.3.10) Ricavi per cessione di emocomponenti e cellule staminali Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0560',ltrim('A.4.A.3.11) Ricavi per differenziale tariffe TUC'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0570',ltrim('A.4.A.3.12) Altre prestazioni sanitarie e sociosanitarie a rilevanza sanitaria non soggette a compensazione Extraregione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0580',ltrim('A.4.A.3.12.A) Prestazioni di assistenza riabilitativa non soggette a compensazione Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0590',ltrim('A.4.A.3.12.B) Altre prestazioni sanitarie e socio-sanitarie a rilevanza sanitaria non soggette a compensazione Extraregione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0600',ltrim('A.4.A.3.13) Altre prestazioni sanitarie a rilevanza sanitaria - Mobilità attiva Internazionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0610',ltrim('A.4.B)  Ricavi per prestazioni sanitarie e sociosanitarie a rilevanza sanitaria erogate da privati v/residenti Extraregione in compensazione (mobilità attiva)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0620',ltrim('A.4.B.1)  Prestazioni di ricovero da priv. Extraregione in compensazione (mobilità attiva)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0630',ltrim('A.4.B.2)  Prestazioni ambulatoriali da priv. Extraregione in compensazione  (mobilità attiva)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0640',ltrim('A.4.B.3)  Prestazioni di File F da priv. Extraregione in compensazione (mobilità attiva)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0650',ltrim('A.4.B.4)  Altre prestazioni sanitarie e sociosanitarie a rilevanza sanitaria erogate da privati v/residenti Extraregione in compensazione (mobilità attiva)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0660',ltrim('A.4.C)  Ricavi per prestazioni sanitarie e sociosanitarie a rilevanza sanitaria erogate a privati '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0670',ltrim('A.4.D)  Ricavi per prestazioni sanitarie erogate in regime di intramoenia'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0680',ltrim('A.4.D.1)  Ricavi per prestazioni sanitarie intramoenia - Area ospedaliera'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0690',ltrim('A.4.D.2)  Ricavi per prestazioni sanitarie intramoenia - Area specialistica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0700',ltrim('A.4.D.3)  Ricavi per prestazioni sanitarie intramoenia - Area sanità pubblica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0710',ltrim('A.4.D.4)  Ricavi per prestazioni sanitarie intramoenia - Consulenze (ex art. 55 c.1 lett. c), d) ed ex art. 57-58)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0720',ltrim('A.4.D.5)  Ricavi per prestazioni sanitarie intramoenia - Consulenze (ex art. 55 c.1 lett. c), d) ed ex art. 57-58) (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0730',ltrim('A.4.D.6)  Ricavi per prestazioni sanitarie intramoenia - Altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0740',ltrim('A.4.D.7)  Ricavi per prestazioni sanitarie intramoenia - Altro (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0750',ltrim('A.5) Concorsi, recuperi e rimborsi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0760',ltrim('A.5.A) Rimborsi assicurativi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0770',ltrim('A.5.B) Concorsi, recuperi e rimborsi da Regione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0780',ltrim('A.5.B.1) Rimborso degli oneri stipendiali del personale dell''azienda in posizione di comando presso la Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0790',ltrim('A.5.B.2) Altri concorsi, recuperi e rimborsi da parte della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0800',ltrim('A.5.C) Concorsi, recuperi e rimborsi da Aziende sanitarie pubbliche della Regione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0810',ltrim('A.5.C.1) Rimborso degli oneri stipendiali del personale dipendente dell''azienda in posizione di comando presso Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0820',ltrim('A.5.C.2) Rimborsi per acquisto beni da parte di Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0830',ltrim('A.5.C.3) Altri concorsi, recuperi e rimborsi da parte di Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0840',ltrim('A.5.D) Concorsi, recuperi e rimborsi da altri soggetti pubblici'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0850',ltrim('A.5.D.1) Rimborso degli oneri stipendiali del personale dipendente dell''azienda in posizione di comando presso altri soggetti pubblici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0860',ltrim('A.5.D.2) Rimborsi per acquisto beni da parte di altri soggetti pubblici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0870',ltrim('A.5.D.3) Altri concorsi, recuperi e rimborsi da parte di altri soggetti pubblici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0880',ltrim('A.5.E) Concorsi, recuperi e rimborsi da privati'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0890',ltrim('A.5.E.1) Rimborso da aziende farmaceutiche per Pay back'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0900',ltrim('A.5.E.1.1) Pay-back per il superamento del tetto della spesa farmaceutica territoriale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0910',ltrim('A.5.E.1.2) Pay-back per superamento del tetto della spesa farmaceutica ospedaliera'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0920',ltrim('A.5.E.1.3) Ulteriore Pay-back'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0930',ltrim('A.5.E.2) Altri concorsi, recuperi e rimborsi da privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0940',ltrim('A.6)  Compartecipazione alla spesa per prestazioni sanitarie (Ticket)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0950',ltrim('A.6.A)  Compartecipazione alla spesa per prestazioni sanitarie - Ticket sulle prestazioni di specialistica ambulatoriale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0960',ltrim('A.6.B)  Compartecipazione alla spesa per prestazioni sanitarie - Ticket sul pronto soccorso'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0970',ltrim('A.6.C)  Compartecipazione alla spesa per prestazioni sanitarie (Ticket) - Altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0980',ltrim('A.7)  Quota contributi c/capitale imputata all''esercizio'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA0990',ltrim('A.7.A) Quota imputata all''esercizio dei finanziamenti per investimenti dallo Stato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1000',ltrim('A.7.B)  Quota imputata all''esercizio dei finanziamenti per investimenti da Regione '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1010',ltrim('A.7.C)  Quota imputata all''esercizio dei finanziamenti per beni di prima dotazione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1020',ltrim('A.7.D) Quota imputata all''esercizio dei contributi in c/ esercizio FSR destinati ad investimenti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1030',ltrim('A.7.E) Quota imputata all''esercizio degli altri contributi in c/ esercizio destinati ad investimenti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1040',ltrim('A.7.F) Quota imputata all''esercizio di altre poste del patrimonio netto'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1050',ltrim('A.8)  Incrementi delle immobilizzazioni per lavori interni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1060',ltrim('A.9) Altri ricavi e proventi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1070',ltrim('A.9.A) Ricavi per prestazioni non sanitarie'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1080',ltrim('A.9.B) Fitti attivi ed altri proventi da attività immobiliari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAA1090',ltrim('A.9.C) Altri proventi diversi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EAZ9999',ltrim('Totale valore della produzione (A)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0000',ltrim('B)  Costi della produzione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0010',ltrim('B.1)  Acquisti di beni'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0020',ltrim('B.1.A)  Acquisti di beni sanitari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0030',ltrim('B.1.A.1)  Prodotti farmaceutici ed emoderivati'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0040',ltrim('B.1.A.1.1) Medicinali con AIC, ad eccezione di vaccini ed emoderivati di produzione regionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0050',ltrim('B.1.A.1.2) Medicinali senza AIC'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0060',ltrim('B.1.A.1.3) Emoderivati di produzione regionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0070',ltrim('B.1.A.2)  Sangue ed emocomponenti'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0080',ltrim('B.1.A.2.1) da pubblico (Aziende sanitarie pubbliche della Regione) – Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0090',ltrim('B.1.A.2.2) da pubblico (Aziende sanitarie pubbliche extra Regione) – Mobilità extraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0100',ltrim('B.1.A.2.3) da altri soggetti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0210',ltrim('B.1.A.3) Dispositivi medici'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0220',ltrim('B.1.A.3.1)  Dispositivi medici '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0230',ltrim('B.1.A.3.2)  Dispositivi medici impiantabili attivi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0240',ltrim('B.1.A.3.3)  Dispositivi medico diagnostici in vitro (IVD)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0250',ltrim('B.1.A.4)  Prodotti dietetici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0260',ltrim('B.1.A.5)  Materiali per la profilassi (vaccini)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0270',ltrim('B.1.A.6)  Prodotti chimici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0280',ltrim('B.1.A.7)  Materiali e prodotti per uso veterinario'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0290',ltrim('B.1.A.8)  Altri beni e prodotti sanitari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0300',ltrim('B.1.A.9)  Beni e prodotti sanitari da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0310',ltrim('B.1.B)  Acquisti di beni non sanitari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0320',ltrim('B.1.B.1)  Prodotti alimentari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0330',ltrim('B.1.B.2)  Materiali di guardaroba, di pulizia e di convivenza in genere'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0340',ltrim('B.1.B.3)  Combustibili, carburanti e lubrificanti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0350',ltrim('B.1.B.4)  Supporti informatici e cancelleria'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0360',ltrim('B.1.B.5)  Materiale per la manutenzione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0370',ltrim('B.1.B.6)  Altri beni e prodotti non sanitari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0380',ltrim('B.1.B.7)  Beni e prodotti non sanitari da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0390',ltrim('B.2)  Acquisti di servizi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0400',ltrim('B.2.A)   Acquisti servizi sanitari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0410',ltrim('B.2.A.1)   Acquisti servizi sanitari per medicina di base'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0420',ltrim('B.2.A.1.1) - da convenzione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0430',ltrim('B.2.A.1.1.A) Costi per assistenza MMG'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0440',ltrim('B.2.A.1.1.B) Costi per assistenza PLS'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0450',ltrim('B.2.A.1.1.C) Costi per assistenza Continuità assistenziale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0460',ltrim('B.2.A.1.1.D) Altro (medicina dei servizi, psicologi, medici 118, ecc)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0470',ltrim('B.2.A.1.2) - da pubblico (Aziende sanitarie pubbliche della Regione) - Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0480',ltrim('B.2.A.1.3) - da pubblico (Aziende sanitarie pubbliche Extraregione) - Mobilità extraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0490',ltrim('B.2.A.2)   Acquisti servizi sanitari per farmaceutica'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0500',ltrim('B.2.A.2.1) - da convenzione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0510',ltrim('B.2.A.2.2) - da pubblico (Aziende sanitarie pubbliche della Regione)- Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0520',ltrim('B.2.A.2.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0530',ltrim('B.2.A.3)   Acquisti servizi sanitari per assistenza specialistica ambulatoriale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0540',ltrim('B.2.A.3.1) - da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0550',ltrim('B.2.A.3.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0560',ltrim('B.2.A.3.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0570',ltrim('B.2.A.3.4) - da privato - Medici SUMAI'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0580',ltrim('B.2.A.3.5) - da privato'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0590',ltrim('B.2.A.3.5.A) Servizi sanitari per assistenza specialistica da IRCCS privati e Policlinici privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0600',ltrim('B.2.A.3.5.B) Servizi sanitari per assistenza specialistica da Ospedali Classificati privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0610',ltrim('B.2.A.3.5.C) Servizi sanitari per assistenza specialistica da Case di Cura private'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0620',ltrim('B.2.A.3.5.D) Servizi sanitari per assistenza specialistica da altri privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0630',ltrim('B.2.A.3.6) - da privato per cittadini non residenti - Extraregione (mobilità attiva in compensazione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0640',ltrim('B.2.A.4)   Acquisti servizi sanitari per assistenza riabilitativa'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0650',ltrim('B.2.A.4.1) - da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0660',ltrim('B.2.A.4.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0670',ltrim('B.2.A.4.3) - da pubblico (Extraregione) non soggetti a compensazione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0680',ltrim('B.2.A.4.4) - da privato (intraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0690',ltrim('B.2.A.4.5) - da privato (extraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0700',ltrim('B.2.A.5)   Acquisti servizi sanitari per assistenza integrativa'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0710',ltrim('B.2.A.5.1) - da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0720',ltrim('B.2.A.5.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0730',ltrim('B.2.A.5.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0740',ltrim('B.2.A.5.4) - da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0750',ltrim('B.2.A.6)   Acquisti servizi sanitari per assistenza protesica'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0760',ltrim('B.2.A.6.1) - da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0770',ltrim('B.2.A.6.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0780',ltrim('B.2.A.6.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0790',ltrim('B.2.A.6.4) - da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0800',ltrim('B.2.A.7)   Acquisti servizi sanitari per assistenza ospedaliera'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0810',ltrim('B.2.A.7.1) - da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0820',ltrim('B.2.A.7.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0830',ltrim('B.2.A.7.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0840',ltrim('B.2.A.7.4) - da privato'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0850',ltrim('B.2.A.7.4.A) Servizi sanitari per assistenza ospedaliera da IRCCS privati e Policlinici privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0860',ltrim('B.2.A.7.4.B) Servizi sanitari per assistenza ospedaliera da Ospedali Classificati privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0870',ltrim('B.2.A.7.4.C) Servizi sanitari per assistenza ospedaliera da Case di Cura private'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0880',ltrim('B.2.A.7.4.D) Servizi sanitari per assistenza ospedaliera da altri privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0890',ltrim('B.2.A.7.5) - da privato per cittadini non residenti - Extraregione (mobilità attiva in compensazione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0900',ltrim('B.2.A.8)   Acquisto prestazioni di psichiatria residenziale e semiresidenziale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0910',ltrim('B.2.A.8.1) - da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0920',ltrim('B.2.A.8.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0930',ltrim('B.2.A.8.3) - da pubblico (Extraregione) - non soggette a compensazione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0940',ltrim('B.2.A.8.4) - da privato (intraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0950',ltrim('B.2.A.8.5) - da privato (extraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0960',ltrim('B.2.A.9)   Acquisto prestazioni di distribuzione farmaci File F'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0970',ltrim('B.2.A.9.1) - da pubblico (Aziende sanitarie pubbliche della Regione) - Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0980',ltrim('B.2.A.9.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA0990',ltrim('B.2.A.9.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1000',ltrim('B.2.A.9.4) - da privato (intraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1010',ltrim('B.2.A.9.5) - da privato (extraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1020',ltrim('B.2.A.9.6) - da privato per cittadini non residenti - Extraregione (mobilità attiva in compensazione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1030',ltrim('B.2.A.10)   Acquisto prestazioni termali in convenzione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1040',ltrim('B.2.A.10.1) - da pubblico (Aziende sanitarie pubbliche della Regione) - Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1050',ltrim('B.2.A.10.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1060',ltrim('B.2.A.10.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1070',ltrim('B.2.A.10.4) - da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1080',ltrim('B.2.A.10.5) - da privato per cittadini non residenti - Extraregione (mobilità attiva in compensazione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1090',ltrim('B.2.A.11)   Acquisto prestazioni di trasporto sanitario'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1100',ltrim('B.2.A.11.1) - da pubblico (Aziende sanitarie pubbliche della Regione) - Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1110',ltrim('B.2.A.11.2) - da pubblico (altri soggetti pubbl. della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1120',ltrim('B.2.A.11.3) - da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1130',ltrim('B.2.A.11.4) - da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1140',ltrim('B.2.A.12)   Acquisto prestazioni Socio-Sanitarie a rilevanza sanitaria'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1150',ltrim('B.2.A.12.1) - da pubblico (Aziende sanitarie pubbliche della Regione) - Mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1160',ltrim('B.2.A.12.2) - da pubblico (altri soggetti pubblici della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1170',ltrim('B.2.A.12.3) - da pubblico (Extraregione) non soggette a compensazione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1180',ltrim('B.2.A.12.4) - da privato (intraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1190',ltrim('B.2.A.12.5) - da privato (extraregionale)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1200',ltrim('B.2.A.13)  Compartecipazione al personale per att. libero-prof. (intramoenia)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1210',ltrim('B.2.A.13.1)  Compartecipazione al personale per att. libero professionale intramoenia - Area ospedaliera'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1220',ltrim('B.2.A.13.2)  Compartecipazione al personale per att. libero professionale intramoenia- Area specialistica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1230',ltrim('B.2.A.13.3)  Compartecipazione al personale per att. libero professionale intramoenia - Area sanità pubblica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1240',ltrim('B.2.A.13.4)  Compartecipazione al personale per att. libero professionale intramoenia - Consulenze (ex art. 55 c.1 lett. c), d) ed ex Art. 57-58)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1250',ltrim('B.2.A.13.5)  Compartecipazione al personale per att. libero professionale intramoenia - Consulenze (ex art. 55 c.1 lett. c), d) ed ex Art. 57-58) (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1260',ltrim('B.2.A.13.6)  Compartecipazione al personale per att. libero professionale intramoenia - Altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1270',ltrim('B.2.A.13.7)  Compartecipazione al personale per att. libero  professionale intramoenia - Altro (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1280',ltrim('B.2.A.14)  Rimborsi, assegni e contributi sanitari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1290',ltrim('B.2.A.14.1)  Contributi ad associazioni di volontariato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1300',ltrim('B.2.A.14.2)  Rimborsi per cure all''estero'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1310',ltrim('B.2.A.14.3)  Contributi a società partecipate e/o enti dipendenti della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1320',ltrim('B.2.A.14.4)  Contributo Legge 210/92'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1330',ltrim('B.2.A.14.5)  Altri rimborsi, assegni e contributi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1340',ltrim('B.2.A.14.6)  Rimborsi, assegni e contributi v/Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1350',ltrim('B.2.A.15)  Consulenze, Collaborazioni,  Interinale e altre prestazioni di lavoro sanitarie e sociosanitarie'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1360',ltrim('B.2.A.15.1) Consulenze sanitarie e sociosan. da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1370',ltrim('B.2.A.15.2) Consulenze sanitarie e sociosanit. da terzi - Altri soggetti pubblici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1380',ltrim('B.2.A.15.3) Consulenze, Collaborazioni,  Interinale e altre prestazioni di lavoro sanitarie e socios. da privato'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1390',ltrim('B.2.A.15.3.A) Consulenze sanitarie da privato - articolo 55, comma 2, CCNL 8 giugno 2000'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1400',ltrim('B.2.A.15.3.B) Altre consulenze sanitarie e sociosanitarie da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1410',ltrim('B.2.A.15.3.C) Collaborazioni coordinate e continuative sanitarie e socios. da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1420',ltrim('B.2.A.15.3.D) Indennità a personale universitario - area sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1430',ltrim('B.2.A.15.3.E) Lavoro interinale - area sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1440',ltrim('B.2.A.15.3.F) Altre collaborazioni e prestazioni di lavoro - area sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1450',ltrim('B.2.A.15.4) Rimborso oneri stipendiali del personale sanitario in comando'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1460',ltrim('B.2.A.15.4.A) Rimborso oneri stipendiali personale sanitario in comando da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1470',ltrim('B.2.A.15.4.B) Rimborso oneri stipendiali personale sanitario in comando da Regioni, soggetti pubblici e da Università'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1480',ltrim('B.2.A.15.4.C) Rimborso oneri stipendiali personale sanitario in comando da aziende di altre Regioni (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1490',ltrim('B.2.A.16) Altri servizi sanitari e sociosanitari a rilevanza sanitaria'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1500',ltrim('B.2.A.16.1)  Altri servizi sanitari e sociosanitari a rilevanza sanitaria da pubblico - Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1510',ltrim('B.2.A.16.2)  Altri servizi sanitari e sociosanitari  a rilevanza sanitaria da pubblico - Altri soggetti pubblici della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1520',ltrim('B.2.A.16.3) Altri servizi sanitari e sociosanitari a rilevanza sanitaria da pubblico (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1530',ltrim('B.2.A.16.4)  Altri servizi sanitari da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1540',ltrim('B.2.A.16.5)  Costi per servizi sanitari - Mobilità internazionale passiva'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1550',ltrim('B.2.A.17) Costi per differenziale tariffe TUC'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1560',ltrim('B.2.B) Acquisti di servizi non sanitari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1570',ltrim('B.2.B.1) Servizi non sanitari '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1580',ltrim('B.2.B.1.1)   Lavanderia'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1590',ltrim('B.2.B.1.2)   Pulizia'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1600',ltrim('B.2.B.1.3)   Mensa'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1610',ltrim('B.2.B.1.4)   Riscaldamento'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1620',ltrim('B.2.B.1.5)   Servizi di assistenza informatica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1630',ltrim('B.2.B.1.6)   Servizi trasporti (non sanitari)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1640',ltrim('B.2.B.1.7)   Smaltimento rifiuti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1650',ltrim('B.2.B.1.8)   Utenze telefoniche'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1660',ltrim('B.2.B.1.9)   Utenze elettricità'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1670',ltrim('B.2.B.1.10)   Altre utenze'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1680',ltrim('B.2.B.1.11)  Premi di assicurazione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1690',ltrim('B.2.B.1.11.A)  Premi di assicurazione - R.C. Professionale '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1700',ltrim('B.2.B.1.11.B)  Premi di assicurazione - Altri premi assicurativi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1710',ltrim('B.2.B.1.12) Altri servizi non sanitari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1720',ltrim('B.2.B.1.12.A) Altri servizi non sanitari da pubblico (Aziende sanitarie pubbliche della Regione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1730',ltrim('B.2.B.1.12.B) Altri servizi non sanitari da altri soggetti pubblici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1740',ltrim('B.2.B.1.12.C) Altri servizi non sanitari da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1750',ltrim('B.2.B.2)  Consulenze, Collaborazioni, Interinale e altre prestazioni di lavoro non sanitarie'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1760',ltrim('B.2.B.2.1) Consulenze non sanitarie da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1770',ltrim('B.2.B.2.2) Consulenze non sanitarie da Terzi - Altri soggetti pubblici'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1780',ltrim('B.2.B.2.3) Consulenze, Collaborazioni, Interinale e altre prestazioni di lavoro non sanitarie da privato'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1790',ltrim('B.2.B.2.3.A) Consulenze non sanitarie da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1800',ltrim('B.2.B.2.3.B) Collaborazioni coordinate e continuative non sanitarie da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1810',ltrim('B.2.B.2.3.C) Indennità a personale universitario - area non sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1820',ltrim('B.2.B.2.3.D) Lavoro interinale - area non sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1830',ltrim('B.2.B.2.3.E) Altre collaborazioni e prestazioni di lavoro - area non sanitaria '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1840',ltrim('B.2.B.2.4) Rimborso oneri stipendiali del personale non sanitario in comando'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1850',ltrim('B.2.B.2.4.A) Rimborso oneri stipendiali personale non sanitario in comando da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1860',ltrim('B.2.B.2.4.B) Rimborso oneri stipendiali personale non sanitario in comando da Regione, soggetti pubblici e da Università'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1870',ltrim('B.2.B.2.4.C) Rimborso oneri stipendiali personale non sanitario in comando da aziende di altre Regioni (Extraregione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1880',ltrim('B.2.B.3) Formazione (esternalizzata e non)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1890',ltrim('B.2.B.3.1) Formazione (esternalizzata e non) da pubblico'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1900',ltrim('B.2.B.3.2) Formazione (esternalizzata e non) da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1910',ltrim('B.3)  Manutenzione e riparazione (ordinaria esternalizzata)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1920',ltrim('B.3.A)  Manutenzione e riparazione ai fabbricati e loro pertinenze'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1930',ltrim('B.3.B)  Manutenzione e riparazione agli impianti e macchinari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1940',ltrim('B.3.C)  Manutenzione e riparazione alle attrezzature sanitarie e scientifiche'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1950',ltrim('B.3.D)  Manutenzione e riparazione ai mobili e arredi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1960',ltrim('B.3.E)  Manutenzione e riparazione agli automezzi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1970',ltrim('B.3.F)  Altre manutenzioni e riparazioni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1980',ltrim('B.3.G)  Manutenzioni e riparazioni da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA1990',ltrim('B.4)   Godimento di beni di terzi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2000',ltrim('B.4.A)  Fitti passivi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2010',ltrim('B.4.B)  Canoni di noleggio'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2020',ltrim('B.4.B.1) Canoni di noleggio - area sanitaria'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2030',ltrim('B.4.B.2) Canoni di noleggio - area non sanitaria'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2040',ltrim('B.4.C)  Canoni di leasing'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2050',ltrim('B.4.C.1) Canoni di leasing - area sanitaria'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2060',ltrim('B.4.C.2) Canoni di leasing - area non sanitaria'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2070',ltrim('B.4.D)  Locazioni e noleggi da Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2080',ltrim('Totale Costo del personale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2090',ltrim('B.5)   Personale del ruolo sanitario'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2100',ltrim('B.5.A) Costo del personale dirigente ruolo sanitario'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2110',ltrim('B.5.A.1) Costo del personale dirigente medico'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2120',ltrim('B.5.A.1.1) Costo del personale dirigente medico - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2130',ltrim('B.5.A.1.2) Costo del personale dirigente medico - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2140',ltrim('B.5.A.1.3) Costo del personale dirigente medico - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2150',ltrim('B.5.A.2) Costo del personale dirigente non medico'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2160',ltrim('B.5.A.2.1) Costo del personale dirigente non medico - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2170',ltrim('B.5.A.2.2) Costo del personale dirigente non medico - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2180',ltrim('B.5.A.2.3) Costo del personale dirigente non medico - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2190',ltrim('B.5.B) Costo del personale comparto ruolo sanitario'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2200',ltrim('B.5.B.1) Costo del personale comparto ruolo sanitario - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2210',ltrim('B.5.B.2) Costo del personale comparto ruolo sanitario - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2220',ltrim('B.5.B.3) Costo del personale comparto ruolo sanitario - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2230',ltrim('B.6)   Personale del ruolo professionale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2240',ltrim('B.6.A) Costo del personale dirigente ruolo professionale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2250',ltrim('B.6.A.1) Costo del personale dirigente ruolo professionale - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2260',ltrim('B.6.A.2) Costo del personale dirigente ruolo professionale - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2270',ltrim('B.6.A.3) Costo del personale dirigente ruolo professionale - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2280',ltrim('B.6.B) Costo del personale comparto ruolo professionale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2290',ltrim('B.6.B.1) Costo del personale comparto ruolo professionale - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2300',ltrim('B.6.B.2) Costo del personale comparto ruolo professionale - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2310',ltrim('B.6.B.3) Costo del personale comparto ruolo professionale - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2320',ltrim('B.7)   Personale del ruolo tecnico'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2330',ltrim('B.7.A) Costo del personale dirigente ruolo tecnico'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2340',ltrim('B.7.A.1) Costo del personale dirigente ruolo tecnico - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2350',ltrim('B.7.A.2) Costo del personale dirigente ruolo tecnico - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2360',ltrim('B.7.A.3) Costo del personale dirigente ruolo tecnico - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2370',ltrim('B.7.B) Costo del personale comparto ruolo tecnico'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2380',ltrim('B.7.B.1) Costo del personale comparto ruolo tecnico - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2390',ltrim('B.7.B.2) Costo del personale comparto ruolo tecnico - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2400',ltrim('B.7.B.3) Costo del personale comparto ruolo tecnico - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2410',ltrim('B.8)   Personale del ruolo amministrativo'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2420',ltrim('B.8.A) Costo del personale dirigente ruolo amministrativo'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2430',ltrim('B.8.A.1) Costo del personale dirigente ruolo amministrativo - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2440',ltrim('B.8.A.2) Costo del personale dirigente ruolo amministrativo - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2450',ltrim('B.8.A.3) Costo del personale dirigente ruolo amministrativo - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2460',ltrim('B.8.B) Costo del personale comparto ruolo amministrativo'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2470',ltrim('B.8.B.1) Costo del personale comparto ruolo amministrativo - tempo indeterminato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2480',ltrim('B.8.B.2) Costo del personale comparto ruolo amministrativo - tempo determinato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2490',ltrim('B.8.B.3) Costo del personale comparto ruolo amministrativo - altro'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2500',ltrim('B.9)   Oneri diversi di gestione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2510',ltrim('B.9.A)  Imposte e tasse (escluso IRAP e IRES)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2520',ltrim('B.9.B)  Perdite su crediti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2530',ltrim('B.9.C) Altri oneri diversi di gestione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2540',ltrim('B.9.C.1)  Indennità, rimborso spese e oneri sociali per gli Organi Direttivi e Collegio Sindacale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2550',ltrim('B.9.C.2)  Altri oneri diversi di gestione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2560',ltrim('Totale Ammortamenti'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2570',ltrim('B.10) Ammortamenti delle immobilizzazioni immateriali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2580',ltrim('B.11) Ammortamenti delle immobilizzazioni materiali'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2590',ltrim('B.12) Ammortamento dei fabbricati'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2600',ltrim('B.12.A) Ammortamenti fabbricati non strumentali (disponibili)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2610',ltrim('B.12.B) Ammortamenti fabbricati strumentali (indisponibili)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2620',ltrim('B.13) Ammortamenti delle altre immobilizzazioni materiali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2630',ltrim('B.14) Svalutazione delle immobilizzazioni e dei crediti'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2640',ltrim('B.14.A) Svalutazione delle immobilizzazioni immateriali e materiali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2650',ltrim('B.14.B) Svalutazione dei crediti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2660',ltrim('B.15) Variazione delle rimanenze'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2670',ltrim('B.15.A) Variazione rimanenze sanitarie'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2680',ltrim('B.15.B) Variazione rimanenze non sanitarie'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2690',ltrim('B.16) Accantonamenti dell’esercizio'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2700',ltrim('B.16.A) Accantonamenti per rischi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2710',ltrim('B.16.A.1)  Accantonamenti per cause civili ed oneri processuali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2720',ltrim('B.16.A.2)  Accantonamenti per contenzioso personale dipendente'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2730',ltrim('B.16.A.3)  Accantonamenti per rischi connessi all''acquisto di prestazioni sanitarie da privato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2740',ltrim('B.16.A.4)  Accantonamenti per copertura diretta dei rischi (autoassicurazione)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2750',ltrim('B.16.A.5)  Altri accantonamenti per rischi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2760',ltrim('B.16.B) Accantonamenti per premio di operosità (SUMAI)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2770',ltrim('B.16.C) Accantonamenti per quote inutilizzate di contributi vincolati'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2780',ltrim('B.16.C.1)  Accantonamenti per quote inutilizzate contributi da Regione e Prov. Aut. per quota F.S. vincolato'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2790',ltrim('B.16.C.2)  Accantonamenti per quote inutilizzate contributi da soggetti pubblici (extra fondo) vincolati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2800',ltrim('B.16.C.3)  Accantonamenti per quote inutilizzate contributi da soggetti pubblici per ricerca'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2810',ltrim('B.16.C.4)  Accantonamenti per quote inutilizzate contributi vincolati da privati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2820',ltrim('B.16.D) Altri accantonamenti'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2830',ltrim('B.16.D.1)  Accantonamenti per interessi di mora'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2840',ltrim('B.16.D.2)  Acc. Rinnovi convenzioni MMG/PLS/MCA'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2850',ltrim('B.16.D.3)  Acc. Rinnovi convenzioni Medici Sumai'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2860',ltrim('B.16.D.4)  Acc. Rinnovi contratt.: dirigenza medica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2870',ltrim('B.16.D.5)  Acc. Rinnovi contratt.: dirigenza non medica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2880',ltrim('B.16.D.6)  Acc. Rinnovi contratt.: comparto'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBA2890',ltrim('B.16.D.7) Altri accantonamenti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EBZ9999',ltrim('Totale costi della produzione (B)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0000',ltrim('C)  Proventi e oneri finanziari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0010',ltrim('C.1) Interessi attivi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0020',ltrim('C.1.A) Interessi attivi su c/tesoreria unica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0030',ltrim('C.1.B) Interessi attivi su c/c postali e bancari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0040',ltrim('C.1.C) Altri interessi attivi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0050',ltrim('C.2) Altri proventi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0060',ltrim('C.2.A) Proventi da partecipazioni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0070',ltrim('C.2.B) Proventi finanziari da crediti iscritti nelle immobilizzazioni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0080',ltrim('C.2.C) Proventi finanziari da titoli iscritti nelle immobilizzazioni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0090',ltrim('C.2.D) Altri proventi finanziari diversi dai precedenti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0100',ltrim('C.2.E) Utili su cambi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0110',ltrim('C.3)  Interessi passivi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0120',ltrim('C.3.A) Interessi passivi su anticipazioni di cassa'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0130',ltrim('C.3.B) Interessi passivi su mutui'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0140',ltrim('C.3.C) Altri interessi passivi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0150',ltrim('C.4) Altri oneri'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0160',ltrim('C.4.A) Altri oneri finanziari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECA0170',ltrim('C.4.B) Perdite su cambi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('ECZ9999',ltrim('Totale proventi e oneri finanziari (C)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EDA0000',ltrim('D)  Rettifiche di valore di attività finanziarie'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EDA0010',ltrim('D.1)  Rivalutazioni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EDA0020',ltrim('D.2)  Svalutazioni'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EDZ9999',ltrim('Totale rettifiche di valore di attività finanziarie (D)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0000',ltrim('E)  Proventi e oneri straordinari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0010',ltrim('E.1) Proventi straordinari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0020',ltrim('E.1.A) Plusvalenze'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0030',ltrim('E.1.B) Altri proventi straordinari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0040',ltrim('E.1.B.1) Proventi da donazioni e liberalità diverse'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0050',ltrim('E.1.B.2) Sopravvenienze attive'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0060',ltrim('E.1.B.2.1) Sopravvenienze attive v/Aziende sanitarie pubbliche della Regione '),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0070',ltrim('E.1.B.2.2) Sopravvenienze attive v/terzi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0080',ltrim('E.1.B.2.2.A) Sopravvenienze attive v/terzi relative alla mobilità extraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0090',ltrim('E.1.B.2.2.B) Sopravvenienze attive v/terzi relative al personale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0100',ltrim('E.1.B.2.2.C) Sopravvenienze attive v/terzi relative alle convenzioni con medici di base'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0110',ltrim('E.1.B.2.2.D) Sopravvenienze attive v/terzi relative alle convenzioni per la specialistica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0120',ltrim('E.1.B.2.2.E) Sopravvenienze attive v/terzi relative all''acquisto prestaz. sanitarie da operatori accreditati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0130',ltrim('E.1.B.2.2.F) Sopravvenienze attive v/terzi relative all''acquisto di beni e servizi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0140',ltrim('E.1.B.2.2.G) Altre sopravvenienze attive v/terzi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0150',ltrim('E.1.B.3) Insussistenze attive '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0160',ltrim('E.1.B.3.1) Insussistenze attive v/Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0170',ltrim('E.1.B.3.2) Insussistenze attive v/terzi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0180',ltrim('E.1.B.3.2.A) Insussistenze attive v/terzi relative alla mobilità extraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0190',ltrim('E.1.B.3.2.B) Insussistenze attive v/terzi relative al personale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0200',ltrim('E.1.B.3.2.C) Insussistenze attive v/terzi relative alle convenzioni con medici di base'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0210',ltrim('E.1.B.3.2.D) Insussistenze attive v/terzi relative alle convenzioni per la specialistica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0220',ltrim('E.1.B.3.2.E) Insussistenze attive v/terzi relative all''acquisto prestaz. sanitarie da operatori accreditati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0230',ltrim('E.1.B.3.2.F) Insussistenze attive v/terzi relative all''acquisto di beni e servizi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0240',ltrim('E.1.B.3.2.G) Altre insussistenze attive v/terzi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0250',ltrim('E.1.B.4) Altri proventi straordinari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0260',ltrim('E.2) Oneri straordinari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0270',ltrim('E.2.A) Minusvalenze'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0280',ltrim('E.2.B) Altri oneri straordinari'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0290',ltrim('E.2.B.1) Oneri tributari da esercizi precedenti'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0300',ltrim('E.2.B.2) Oneri da cause civili ed oneri processuali'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0310',ltrim('E.2.B.3) Sopravvenienze passive'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0320',ltrim('E.2.B.3.1) Sopravvenienze passive v/Aziende sanitarie pubbliche della Regione'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0330',ltrim('E.2.B.3.1.A) Sopravvenienze passive v/Aziende sanitarie pubbliche relative alla mobilità intraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0340',ltrim('E.2.B.3.1.B) Altre sopravvenienze passive v/Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0350',ltrim('E.2.B.3.2) Sopravvenienze passive v/terzi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0360',ltrim('E.2.B.3.2.A) Sopravvenienze passive v/terzi relative alla mobilità extraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0370',ltrim('E.2.B.3.2.B) Sopravvenienze passive v/terzi relative al personale'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0380',ltrim('E.2.B.3.2.B.1) Soprav. passive v/terzi relative al personale - dirigenza medica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0390',ltrim('E.2.B.3.2.B.2) Soprav. passive v/terzi relative al personale - dirigenza non medica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0400',ltrim('E.2.B.3.2.B.3) Soprav. passive v/terzi relative al personale - comparto'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0410',ltrim('E.2.B.3.2.C) Sopravvenienze passive v/terzi relative alle convenzioni con medici di base'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0420',ltrim('E.2.B.3.2.D) Sopravvenienze passive v/terzi relative alle convenzioni per la specialistica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0430',ltrim('E.2.B.3.2.E) Sopravvenienze passive v/terzi relative all''acquisto prestaz. sanitarie da operatori accreditati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0440',ltrim('E.2.B.3.2.F) Sopravvenienze passive v/terzi relative all''acquisto di beni e servizi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0450',ltrim('E.2.B.3.2.G) Altre sopravvenienze passive v/terzi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0460',ltrim('E.2.B.4) Insussistenze passive'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0470',ltrim('E.2.B.4.1) Insussistenze passive v/Aziende sanitarie pubbliche della Regione'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0480',ltrim('E.2.B.4.2) Insussistenze passive v/terzi'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0490',ltrim('E.2.B.4.2.A) Insussistenze passive v/terzi relative alla mobilità extraregionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0500',ltrim('E.2.B.4.2.B) Insussistenze passive v/terzi relative al personale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0510',ltrim('E.2.B.4.2.C) Insussistenze passive v/terzi relative alle convenzioni con medici di base'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0520',ltrim('E.2.B.4.2.D) Insussistenze passive v/terzi relative alle convenzioni per la specialistica'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0530',ltrim('E.2.B.4.2.E) Insussistenze passive v/terzi relative all''acquisto prestaz. sanitarie da operatori accreditati'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0540',ltrim('E.2.B.4.2.F) Insussistenze passive v/terzi relative all''acquisto di beni e servizi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0550',ltrim('E.2.B.4.2.G) Altre insussistenze passive v/terzi'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEA0560',ltrim('E.2.B.5) Altri oneri straordinari'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EEZ9999',ltrim('Totale proventi e oneri straordinari (E)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EXA0000',ltrim('Risultato prima delle imposte (A - B +/- C +/- D +/- E)'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0000',ltrim('Imposte e tasse '),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0010',ltrim('Y.1) IRAP'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0020',ltrim('Y.1.A) IRAP relativa a personale dipendente'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0030',ltrim('Y.1.B) IRAP relativa a collaboratori e personale assimilato a lavoro dipendente'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0040',ltrim('Y.1.C) IRAP relativa ad attività di libera professione (intramoenia)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0050',ltrim('Y.1.D) IRAP relativa ad attività commerciale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0060',ltrim('Y.2) IRES'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0070',ltrim('Y.2.A) IRES su attività istituzionale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0080',ltrim('Y.2.B) IRES su attività commerciale'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYA0090',ltrim('Y.3) Accantonamento a F.do Imposte (Accertamenti, condoni, ecc.)'),'S','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EYZ9999',ltrim('Totale imposte e tasse'),'N','CE_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('EZZ9999',ltrim('RISULTATO DI ESERCIZIO'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAZ999',ltrim('A)  PATRIMONIO NETTO'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA000',ltrim('     A.I) FONDO DI DOTAZIONE'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA010',ltrim('     A.II) FINANZIAMENTI PER INVESTIMENTI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA020',ltrim('            A.II.1) Finanziamenti per beni di prima dotazione'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA030',ltrim('            A.II.2) Finanziamenti da Stato per investimenti'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA040',ltrim('                       A.II.2.a) Finanziamenti da Stato per investimenti - ex art. 20 legge 67/88'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA050',ltrim('                       A.II.2.b) Finanziamenti da Stato per investimenti - ricerca'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA060',ltrim('                       A.II.2.c) Finanziamenti da Stato per investimenti - altro'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA070',ltrim('            A.II.3) Finanziamenti da Regione per investimenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA080',ltrim('            A.II.4) Finanziamenti da altri soggetti pubblici per investimenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA090',ltrim('            A.II.5) Finanziamenti per investimenti da rettifica contributi in conto esercizio'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA100',ltrim('     A.III) RISERVE DA DONAZIONI E LASCITI VINCOLATI AD INVESTIMENTI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA110',ltrim('     A.IV) ALTRE RISERVE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA120',ltrim('            A.IV.1) Riserve da rivalutazioni'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA130',ltrim('            A.IV.2) Riserve da plusvalenze da reinvestire'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA140',ltrim('            A.IV.3) Contributi da reinvestire'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA150',ltrim('            A.IV.4) Riserve da utili di esercizio destinati ad investimenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA160',ltrim('            A.IV.5) Riserve diverse'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA170',ltrim('     A.V) CONTRIBUTI PER RIPIANO PERDITE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA180',ltrim('            A.V.1) Contributi per copertura debiti al 31/12/2005'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA190',ltrim('            A.V.2) Contributi per ricostituzione risorse da investimenti esercizi precedenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA200',ltrim('            A.V.3) Altro'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA210',ltrim('     A.VI) UTILI (PERDITE) PORTATI A NUOVO'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PAA220',ltrim('     A.VII) UTILE (PERDITA) D''ESERCIZIO'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBZ999',ltrim('B)  FONDI PER RISCHI E ONERI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA000',ltrim('     B.I)  FONDI PER IMPOSTE, ANCHE DIFFERITE'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA010',ltrim('     B.II)  FONDI PER RISCHI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA020',ltrim('           B.II.1) Fondo rischi per cause civili ed oneri processuali'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA030',ltrim('           B.II.2) Fondo rischi per contenzioso personale dipendente'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA040',ltrim('           B.II.3) Fondo rischi connessi all''acquisto di prestazioni sanitarie da privato'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA050',ltrim('           B.II.4) Fondo rischi per copertura diretta dei rischi (autoassicurazione)'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA060',ltrim('           B.II.5) Altri fondi rischi'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA070',ltrim('     B.III) FONDI DA DISTRIBUIRE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA080',ltrim('           B.III.1) FSR indistinto da distribuire'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA090',ltrim('           B.III.2) FSR vincolato da distribuire'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA100',ltrim('           B.III.3) Fondo per ripiano disavanzi pregressi'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA110',ltrim('           B.III.4) Fondo finanziamento sanitario aggiuntivo corrente LEA'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA120',ltrim('           B.III.5) Fondo finanziamento sanitario aggiuntivo corrente extra LEA'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA130',ltrim('           B.III.6) Fondo finanziamento per ricerca'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA140',ltrim('           B.III.7) Fondo finanziamento per investimenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA150',ltrim('     B.IV) QUOTE INUTILIZZATE CONTRIBUTI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA160',ltrim('           B.IV.1) Quote inutilizzate contributi da Regione o Prov. Aut. per quota F.S. vincolato'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA170',ltrim('           B.IV.2) Quote inutilizzate contributi vincolati da soggetti pubblici (extra fondo)'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA180',ltrim('           B.IV.3) Quote inutilizzate contributi per ricerca'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA190',ltrim('           B.IV.4) Quote inutilizzate contributi vincolati da privati'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA200',ltrim('     B.V)  ALTRI FONDI PER ONERI E SPESE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA210',ltrim('           B.V.1) Fondi integrativi pensione'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA220',ltrim('           B.V.2) Fondi rinnovi contrattuali'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA230',ltrim('                       B.V.2.a) Fondo rinnovi contrattuali personale dipendente '),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA240',ltrim('                       B.V.2.b) Fondo rinnovi convenzioni MMG/PLS/MCA'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA250',ltrim('                       B.V.2.c) Fondo rinnovi convenzioni medici Sumai'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PBA260',ltrim('           B.V.3) Altri fondi per oneri e spese'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PCZ999',ltrim('C)  TRATTAMENTO FINE RAPPORTO'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PCA000',ltrim('     C.I)  FONDO PER PREMI OPEROSITA'' MEDICI SUMAI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PCA010',ltrim('     C.II)  FONDO PER TRATTAMENTO DI FINE RAPPORTO DIPENDENTI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDZ999',ltrim('D)  DEBITI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA000',ltrim('     D.I) DEBITI PER MUTUI PASSIVI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA010',ltrim('     D.II) DEBITI V/STATO'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA020',ltrim('           D.II.1) Debiti v/Stato per mobilità passiva extraregionale'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA030',ltrim('           D.II.2) Debiti v/Stato per mobilità passiva internazionale'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA040',ltrim('           D.II.3) Acconto quota FSR v/Stato'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA050',ltrim('           D.II.4) Debiti v/Stato per restituzione finanziamenti - per ricerca'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA060',ltrim('           D.II.5) Altri debiti v/Stato'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA070',ltrim('     D.III) DEBITI V/REGIONE O PROVINCIA AUTONOMA'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA080',ltrim('           D.III.1) Debiti v/Regione o Provincia Autonoma per finanziamenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA090',ltrim('           D.III.2) Debiti v/Regione o Provincia Autonoma per mobilità passiva intraregionale'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA100',ltrim('           D.III.3) Debiti v/Regione o Provincia Autonoma per mobilità passiva extraregionale'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA110',ltrim('           D.III.4) Acconto quota FSR da Regione o Provincia Autonoma'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA120',ltrim('           D.III.5) Altri debiti v/Regione o Provincia Autonoma'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA130',ltrim('     D.IV) DEBITI V/COMUNI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA140',ltrim('     D.V) DEBITI V/AZIENDE SANITARIE PUBBLICHE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA150',ltrim('           D.V.1) Debiti v/Aziende sanitarie pubbliche della Regione'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA160',ltrim('                       D.V.1.a) Debiti v/Aziende sanitarie pubbliche della Regione - per quota FSR'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA170',ltrim('                       D.V.1.b) Debiti v/Aziende sanitarie pubbliche della Regione - per finanziamento sanitario aggiuntivo corrente LEA'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA180',ltrim('                       D.V.1.c) Debiti v/Aziende sanitarie pubbliche della Regione - per finanziamento sanitario aggiuntivo corrente extra LEA'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA190',ltrim('                       D.V.1.d) Debiti v/Aziende sanitarie pubbliche della Regione - per mobilità in compensazione'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA200',ltrim('                       D.V.1.e) Debiti v/Aziende sanitarie pubbliche della Regione - per mobilità non in compensazione'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA210',ltrim('                       D.V.1.f) Debiti v/Aziende sanitarie pubbliche della Regione - per altre prestazioni'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA220',ltrim('           D.V.2) Debiti v/Aziende sanitarie pubbliche Extraregione '),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA230',ltrim('           D.V.3) Debiti v/Aziende sanitarie pubbliche della Regione per versamenti c/patrimonio netto'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA240',ltrim('     D.VI) DEBITI V/ SOCIETA'' PARTECIPATE E/O ENTI DIPENDENTI DELLA REGIONE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA250',ltrim('            D.VI.1) Debiti v/enti regionali'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA260',ltrim('            D.VI.2) Debiti v/sperimentazioni gestionali'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA270',ltrim('            D.VI.3) Debiti v/altre partecipate'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA280',ltrim('     D.VII) DEBITI V/FORNITORI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA290',ltrim('            D.VII.1) Debiti verso erogatori (privati accreditati e convenzionati) di prestazioni sanitarie '),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA300',ltrim('            D.VII.2) Debiti verso altri fornitori'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA310',ltrim('     D.VIII) DEBITI V/ISTITUTO TESORIERE'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA320',ltrim('     D.IX) DEBITI TRIBUTARI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA330',ltrim('     D.X) DEBITI V/ISTITUTI PREVIDENZIALI, ASSISTENZIALI E SICUREZZA SOCIALE'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA340',ltrim('     D.XI)  DEBITI V/ALTRI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA350',ltrim('           D.XI.1) Debiti v/altri finanziatori'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA360',ltrim('           D.XI.2) Debiti v/dipendenti'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA370',ltrim('           D.XI.3) Debiti v/gestioni liquidatorie'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PDA380',ltrim('           D.XI.4) Altri debiti diversi'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEZ999',ltrim('E)  RATEI E RISCONTI PASSIVI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEA000',ltrim('     E.I) RATEI PASSIVI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEA010',ltrim('            E.I.1) Ratei passivi'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEA020',ltrim('            E.I.2) Ratei passivi v/Aziende sanitarie pubbliche della Regione'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEA030',ltrim('     E.II) RISCONTI PASSIVI'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEA040',ltrim('           E.II.1) Risconti passivi'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PEA050',ltrim('           E.II.2) Risconti passivi v/Aziende sanitarie pubbliche della Regione'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PFZ999',ltrim('F)  CONTI D''ORDINE'),'N','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PFA000',ltrim('     F.I) CANONI DI LEASING ANCORA DA PAGARE'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PFA010',ltrim('     F.II) DEPOSITI CAUZIONALI'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PFA020',ltrim('     F.III) BENI IN COMODATO'),'S','SPP_CODBIL_GSA',null,null,null);
insert into caricamento_contibil_gsa (code,descr,flsuconti,tipo,livello,codepadre,codedadescr) values('PFA030',ltrim('     F.IV) ALTRI CONTI D''ORDINE'),'S','SPP_CODBIL_GSA',null,null,null);

update caricamento_contibil_gsa set codedadescr = 
substring(descr from 1 for strpos(descr, ')'));

update caricamento_contibil_gsa set livello = (LENGTH(codedadescr) - LENGTH(REPLACE(codedadescr, '.', ''))) 
    / LENGTH('.')+1;
    


update caricamento_contibil_gsa set codepadre = subquery.codepadre from (
select tb.* from (
with figlio as (
select 
codbil_id,
code codefiglio, 
codedadescr, 
tipo,
--substring(codedadescr from 1 for strpos(codedadescr, ')')-3)||')'
 reverse (substring (reverse(codedadescr) from position('.' in reverse(codedadescr))+1 )
) ||')'
 descpadre from caricamento_contibil_gsa
where 
livello >1 and 
code not in (select code from caricamento_contibil_gsa a where not 
exists (select 1 from caricamento_contibil_gsa z where z.descr like '%)%' and z.code=a.code
)))
, padre as (
select code codepadre, codedadescr descpadre,tipo from caricamento_contibil_gsa where 
code not in (select code from caricamento_contibil_gsa a where not 
exists (select 1 from caricamento_contibil_gsa z where z.descr like '%)%' and z.code=a.code
))
)
select * from figlio
left join padre on 
figlio.descpadre=padre.descpadre
and 
figlio.tipo=padre.tipo
) as tb where tb.codepadre is not null
) as subquery where subquery.codbil_id=caricamento_contibil_gsa.codbil_id;
  

update caricamento_contibil_gsa set livello=1 where codepadre is null and livello>1;

INSERT INTO 
  siac.siac_d_class_fam
(
  classif_fam_code,
  classif_fam_desc,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select '00024', 'conto economico (codice di bilancio) gsa', to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id
,'admin' from siac_t_ente_proprietario a
where not exists (select 1 from siac_d_class_fam z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_fam_code='00024');



INSERT INTO 
  siac.siac_d_class_fam
(
  classif_fam_code,
  classif_fam_desc,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select '00025', 'stato patrimoniale passivo (codice di bilancio) gsa', to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id
,'admin' from siac_t_ente_proprietario a
where not exists (select 1 from siac_d_class_fam z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_fam_code='00025');


INSERT INTO 
  siac.siac_d_class_fam
(
  classif_fam_code,
  classif_fam_desc,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select '00026', 'stato patrimoniale attivo (codice di bilancio) gsa', to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id
,'admin' from siac_t_ente_proprietario a
where not exists (select 1 from siac_d_class_fam z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_fam_code='00026');






INSERT INTO 
  siac.siac_d_class_tipo
(
  classif_tipo_code,
  classif_tipo_desc,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 'SPA_CODBIL_GSA', 'SPA_CODBIL_GSA', to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id
,'admin' from siac_t_ente_proprietario a
where not exists (select 1 from siac_d_class_tipo z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_tipo_code='SPA_CODBIL_GSA');



INSERT INTO 
  siac.siac_d_class_tipo
(
  classif_tipo_code,
  classif_tipo_desc,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 'CE_CODBIL_GSA', 'CE_CODBIL_GSA', to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id
,'admin' from siac_t_ente_proprietario a
where not exists (select 1 from siac_d_class_tipo z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_tipo_code='CE_CODBIL_GSA');


INSERT INTO 
  siac.siac_d_class_tipo
(
  classif_tipo_code,
  classif_tipo_desc,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 'SPP_CODBIL_GSA', 'SPP_CODBIL_GSA', to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id
,'admin' from siac_t_ente_proprietario a
where not exists (select 1 from siac_d_class_tipo z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_tipo_code='SPP_CODBIL_GSA');


INSERT INTO 
  siac.siac_t_class
(
  classif_code,
  classif_desc,
  classif_tipo_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.code,b.descr, a.classif_tipo_id,to_timestamp('01/01/2015','dd/mm/yyyy'),
a.ente_proprietario_id, 'admin'
 from siac_d_class_tipo a, caricamento_contibil_gsa b
where b.tipo=a.classif_tipo_code
and a.classif_tipo_code='CE_CODBIL_GSA'
and not exists (select 1 from siac_t_class z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_code=b.code and z.classif_tipo_id=a.classif_tipo_id)
order by 
a.ente_proprietario_id,
b.codbil_id;



INSERT INTO 
  siac.siac_t_class
(
  classif_code,
  classif_desc,
  classif_tipo_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.code,b.descr, a.classif_tipo_id,to_timestamp('01/01/2015','dd/mm/yyyy'),
a.ente_proprietario_id, 'admin'
 from siac_d_class_tipo a, caricamento_contibil_gsa b
where b.tipo=a.classif_tipo_code
and a.classif_tipo_code='SPA_CODBIL_GSA'
and not exists (select 1 from siac_t_class z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_code=b.code and z.classif_tipo_id=a.classif_tipo_id)
order by 
a.ente_proprietario_id,
b.codbil_id;


INSERT INTO 
  siac.siac_t_class
(
  classif_code,
  classif_desc,
  classif_tipo_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.code,b.descr, a.classif_tipo_id,to_timestamp('01/01/2015','dd/mm/yyyy'),
a.ente_proprietario_id, 'admin'
 from siac_d_class_tipo a, caricamento_contibil_gsa b
where b.tipo=a.classif_tipo_code
and a.classif_tipo_code='SPP_CODBIL_GSA'
and  not exists (select 1 from siac_t_class z where z.ente_proprietario_id=a.ente_proprietario_id
and z.classif_code=b.code and z.classif_tipo_id=a.classif_tipo_id)
order by 
a.ente_proprietario_id,
b.codbil_id;

--inserimento testate alberi
INSERT INTO 
  siac.siac_t_class_fam_tree
(
  class_fam_code,
  class_fam_desc,
  classif_fam_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
a.classif_fam_desc,a.classif_fam_desc,a.classif_fam_id,a.validita_inizio,
a.ente_proprietario_id,a.login_operazione
 from siac_d_class_fam a where a.classif_fam_desc in ('conto economico (codice di bilancio) gsa',
'stato patrimoniale passivo (codice di bilancio) gsa','stato patrimoniale attivo (codice di bilancio) gsa')
and not exists (select 1 from siac_t_class_fam_tree z
where z.ente_proprietario_id=A.ente_proprietario_id
and a.classif_fam_code=z.class_fam_code
and z.validita_fine is null);

--inserire gli alberi
--prima i livelli a senza padre

INSERT INTO 
  siac.siac_r_class_fam_tree
(
  classif_fam_tree_id,
  classif_id,
  classif_id_padre,
  ordine,
  livello,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.classif_fam_tree_id,
c.classif_id, null,
a.codedadescr,
a.livello,
to_timestamp('01/01/2015','dd/mm/yyyy'),
b.ente_proprietario_id,
'admin'
 From caricamento_contibil_gsa a, siac_t_class_fam_tree b,siac_t_class c,siac_d_class_tipo d
where 
d.classif_tipo_code=a.tipo
and c.classif_tipo_id=d.classif_tipo_id and
c.classif_code=a.code and
b.class_fam_code='conto economico (codice di bilancio) gsa'
and a.tipo='CE_CODBIL_GSA'
and b.ente_proprietario_id=c.ente_proprietario_id
and a.codepadre is null
order by b.ente_proprietario_id, a.codbil_id;

INSERT INTO 
  siac.siac_r_class_fam_tree
(
  classif_fam_tree_id,
  classif_id,
  classif_id_padre,
  ordine,
  livello,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.classif_fam_tree_id,
c.classif_id, c2.classif_id,
a.codedadescr,
a.livello,
to_timestamp('01/01/2015','dd/mm/yyyy'),
b.ente_proprietario_id,
'admin'
 From caricamento_contibil_gsa a, siac_t_class_fam_tree b,siac_t_class c,siac_d_class_tipo d,
 siac_t_class c2 --padre
where 
d.classif_tipo_code=a.tipo
and c.classif_tipo_id=d.classif_tipo_id and
c.classif_code=a.code and
b.class_fam_code='conto economico (codice di bilancio) gsa'
and a.tipo='CE_CODBIL_GSA'
and b.ente_proprietario_id=c.ente_proprietario_id
and a.codepadre is not null
and c2.classif_code=a.codepadre
and c2.ente_proprietario_id=c.ente_proprietario_id
order by b.ente_proprietario_id, a.codbil_id;


INSERT INTO 
  siac.siac_r_class_fam_tree
(
  classif_fam_tree_id,
  classif_id,
  classif_id_padre,
  ordine,
  livello,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.classif_fam_tree_id,
c.classif_id, null,
a.codedadescr,
a.livello,
to_timestamp('01/01/2015','dd/mm/yyyy'),
b.ente_proprietario_id,
'admin'
 From caricamento_contibil_gsa a, siac_t_class_fam_tree b,siac_t_class c,siac_d_class_tipo d
where 
d.classif_tipo_code=a.tipo
and c.classif_tipo_id=d.classif_tipo_id and
c.classif_code=a.code and
b.class_fam_code='stato patrimoniale attivo (codice di bilancio) gsa'
and a.tipo='SPA_CODBIL_GSA'
and b.ente_proprietario_id=c.ente_proprietario_id
and a.codepadre is null
order by b.ente_proprietario_id, a.codbil_id;

INSERT INTO 
  siac.siac_r_class_fam_tree
(
  classif_fam_tree_id,
  classif_id,
  classif_id_padre,
  ordine,
  livello,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.classif_fam_tree_id,
c.classif_id, c2.classif_id,
a.codedadescr,
a.livello,
to_timestamp('01/01/2015','dd/mm/yyyy'),
b.ente_proprietario_id,
'admin'
 From caricamento_contibil_gsa a, siac_t_class_fam_tree b,siac_t_class c,siac_d_class_tipo d,
 siac_t_class c2 --padre
where 
d.classif_tipo_code=a.tipo
and c.classif_tipo_id=d.classif_tipo_id and
c.classif_code=a.code and
b.class_fam_code='stato patrimoniale attivo (codice di bilancio) gsa'
and a.tipo='SPA_CODBIL_GSA'
and b.ente_proprietario_id=c.ente_proprietario_id
and a.codepadre is not null
and c2.classif_code=a.codepadre
and c2.ente_proprietario_id=c.ente_proprietario_id
order by b.ente_proprietario_id, a.codbil_id;

INSERT INTO 
  siac.siac_r_class_fam_tree
(
  classif_fam_tree_id,
  classif_id,
  classif_id_padre,
  ordine,
  livello,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.classif_fam_tree_id,
c.classif_id, null,
a.codedadescr,
a.livello,
to_timestamp('01/01/2015','dd/mm/yyyy'),
b.ente_proprietario_id,
'admin'
 From caricamento_contibil_gsa a, siac_t_class_fam_tree b,siac_t_class c,siac_d_class_tipo d
where 
d.classif_tipo_code=a.tipo
and c.classif_tipo_id=d.classif_tipo_id and
c.classif_code=a.code and
b.class_fam_code='stato patrimoniale passivo (codice di bilancio) gsa'
and a.tipo='SPP_CODBIL_GSA'
and b.ente_proprietario_id=c.ente_proprietario_id
and a.codepadre is null
order by b.ente_proprietario_id, a.codbil_id;

INSERT INTO 
  siac.siac_r_class_fam_tree
(
  classif_fam_tree_id,
  classif_id,
  classif_id_padre,
  ordine,
  livello,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.classif_fam_tree_id,
c.classif_id, c2.classif_id,
a.codedadescr,
a.livello,
to_timestamp('01/01/2015','dd/mm/yyyy'),
b.ente_proprietario_id,
'admin'
 From caricamento_contibil_gsa a, siac_t_class_fam_tree b,siac_t_class c,siac_d_class_tipo d,
 siac_t_class c2 --padre
where 
d.classif_tipo_code=a.tipo
and c.classif_tipo_id=d.classif_tipo_id and
c.classif_code=a.code and
b.class_fam_code='stato patrimoniale passivo (codice di bilancio) gsa'
and a.tipo='SPP_CODBIL_GSA'
and b.ente_proprietario_id=c.ente_proprietario_id
and a.codepadre is not null
and c2.classif_code=a.codepadre
and c2.ente_proprietario_id=c.ente_proprietario_id
order by b.ente_proprietario_id, a.codbil_id;

--


CREATE OR REPLACE VIEW siac.siac_v_bko_conto_economico_cod_bil_gsa(
    classif_classif_fam_tree_id,
    classif_fam_tree_id,
    classif_code,
    classif_desc,
    classif_tipo_desc,
    classif_id,
    classif_id_padre,
    ente_proprietario_id,
    ordine,
    level)
AS
  SELECT tb.classif_classif_fam_tree_id,
         tb.classif_fam_tree_id,
         t1.classif_code,
         t1.classif_desc,
         ti1.classif_tipo_desc,
         tb.classif_id,
         tb.classif_id_padre,
         tb.ente_proprietario_id,
         tb.ordine,
         tb.level
  FROM (WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level,
    arrhierarchy) AS (
                       SELECT rt1.classif_classif_fam_tree_id,
                              rt1.classif_fam_tree_id,
                              rt1.classif_id,
                              rt1.classif_id_padre,
                              rt1.ente_proprietario_id,
                              rt1.ordine,
                              rt1.livello,
                              1,
                              ARRAY [ COALESCE(rt1.classif_id, 0) ] AS "array"
                       FROM siac_r_class_fam_tree rt1,
                            siac_t_class_fam_tree tt1,
                            siac_d_class_fam cf
                       WHERE cf.classif_fam_id = tt1.classif_fam_id AND
                             tt1.classif_fam_tree_id = rt1.classif_fam_tree_id
  AND
                             rt1.classif_id_padre IS NULL AND
                             cf.classif_fam_code::text = '00024'::text AND
                             tt1.ente_proprietario_id = rt1.ente_proprietario_id
  AND
                             date_trunc('day'::text, now()) >
                               rt1.validita_inizio AND
                             (date_trunc('day'::text, now()) < rt1.validita_fine
  OR
                             tt1.validita_fine IS NULL)
                       UNION ALL
                       SELECT tn.classif_classif_fam_tree_id,
                              tn.classif_fam_tree_id,
                              tn.classif_id,
                              tn.classif_id_padre,
                              tn.ente_proprietario_id,
                              tn.ordine,
                              tn.livello,
                              tp.level + 1,
                              tp.arrhierarchy || tn.classif_id
                       FROM rqname tp,
                            siac_r_class_fam_tree tn
                       WHERE tp.classif_id = tn.classif_id_padre AND
                             tn.ente_proprietario_id = tp.ente_proprietario_id
  AND
                             now() >= tn.validita_inizio AND
                             now() <= COALESCE(tn.validita_fine::timestamp with
                               time zone, now())
       )
  SELECT rqname.classif_classif_fam_tree_id, rqname.classif_fam_tree_id,
    rqname.classif_id, rqname.classif_id_padre, rqname.ente_proprietario_id,
    rqname.ordine, rqname.livello, rqname.level
  FROM rqname
  ORDER BY rqname.arrhierarchy) tb,
           siac_t_class t1,
           siac_d_class_tipo ti1
  WHERE t1.classif_id = tb.classif_id AND
        ti1.classif_tipo_id = t1.classif_tipo_id AND
        t1.ente_proprietario_id = tb.ente_proprietario_id AND
        ti1.ente_proprietario_id = t1.ente_proprietario_id;
        
CREATE OR REPLACE VIEW siac.siac_v_bko_stato_patrimoniale_attivo_cod_bil_gsa(
    classif_classif_fam_tree_id,
    classif_fam_tree_id,
    classif_code,
    classif_desc,
    classif_tipo_desc,
    classif_id,
    classif_id_padre,
    ente_proprietario_id,
    ordine,
    level)
AS
  SELECT tb.classif_classif_fam_tree_id,
         tb.classif_fam_tree_id,
         t1.classif_code,
         t1.classif_desc,
         ti1.classif_tipo_desc,
         tb.classif_id,
         tb.classif_id_padre,
         tb.ente_proprietario_id,
         tb.ordine,
         tb.level
  FROM (WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level,
    arrhierarchy) AS (
                       SELECT rt1.classif_classif_fam_tree_id,
                              rt1.classif_fam_tree_id,
                              rt1.classif_id,
                              rt1.classif_id_padre,
                              rt1.ente_proprietario_id,
                              rt1.ordine,
                              rt1.livello,
                              1,
                              ARRAY [ COALESCE(rt1.classif_id, 0) ] AS "array"
                       FROM siac_r_class_fam_tree rt1,
                            siac_t_class_fam_tree tt1,
                            siac_d_class_fam cf
                       WHERE cf.classif_fam_id = tt1.classif_fam_id AND
                             tt1.classif_fam_tree_id = rt1.classif_fam_tree_id
  AND
                             rt1.classif_id_padre IS NULL AND
                             cf.classif_fam_code::text = '00026'::text AND
                             tt1.ente_proprietario_id = rt1.ente_proprietario_id
  AND
                             date_trunc('day'::text, now()) >
                               rt1.validita_inizio AND
                             (date_trunc('day'::text, now()) < rt1.validita_fine
  OR
                             tt1.validita_fine IS NULL)
                       UNION ALL
                       SELECT tn.classif_classif_fam_tree_id,
                              tn.classif_fam_tree_id,
                              tn.classif_id,
                              tn.classif_id_padre,
                              tn.ente_proprietario_id,
                              tn.ordine,
                              tn.livello,
                              tp.level + 1,
                              tp.arrhierarchy || tn.classif_id
                       FROM rqname tp,
                            siac_r_class_fam_tree tn
                       WHERE tp.classif_id = tn.classif_id_padre AND
                             tn.ente_proprietario_id = tp.ente_proprietario_id
  AND
                             now() >= tn.validita_inizio AND
                             now() <= COALESCE(tn.validita_fine::timestamp with
                               time zone, now())
       )
  SELECT rqname.classif_classif_fam_tree_id, rqname.classif_fam_tree_id,
    rqname.classif_id, rqname.classif_id_padre, rqname.ente_proprietario_id,
    rqname.ordine, rqname.livello, rqname.level
  FROM rqname
  ORDER BY rqname.arrhierarchy) tb,
           siac_t_class t1,
           siac_d_class_tipo ti1
  WHERE t1.classif_id = tb.classif_id AND
        ti1.classif_tipo_id = t1.classif_tipo_id AND
        t1.ente_proprietario_id = tb.ente_proprietario_id AND
        ti1.ente_proprietario_id = t1.ente_proprietario_id;        
        
CREATE OR REPLACE VIEW siac.siac_v_bko_stato_patrimoniale_passivo_cod_bil_gsa(
    classif_classif_fam_tree_id,
    classif_fam_tree_id,
    classif_code,
    classif_desc,
    classif_tipo_desc,
    classif_id,
    classif_id_padre,
    ente_proprietario_id,
    ordine,
    level)
AS
  SELECT tb.classif_classif_fam_tree_id,
         tb.classif_fam_tree_id,
         t1.classif_code,
         t1.classif_desc,
         ti1.classif_tipo_desc,
         tb.classif_id,
         tb.classif_id_padre,
         tb.ente_proprietario_id,
         tb.ordine,
         tb.level
  FROM (WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level,
    arrhierarchy) AS (
                       SELECT rt1.classif_classif_fam_tree_id,
                              rt1.classif_fam_tree_id,
                              rt1.classif_id,
                              rt1.classif_id_padre,
                              rt1.ente_proprietario_id,
                              rt1.ordine,
                              rt1.livello,
                              1,
                              ARRAY [ COALESCE(rt1.classif_id, 0) ] AS "array"
                       FROM siac_r_class_fam_tree rt1,
                            siac_t_class_fam_tree tt1,
                            siac_d_class_fam cf
                       WHERE cf.classif_fam_id = tt1.classif_fam_id AND
                             tt1.classif_fam_tree_id = rt1.classif_fam_tree_id
  AND
                             rt1.classif_id_padre IS NULL AND
                             cf.classif_fam_code::text = '00025'::text AND
                             tt1.ente_proprietario_id = rt1.ente_proprietario_id
  AND
                             date_trunc('day'::text, now()) >
                               rt1.validita_inizio AND
                             (date_trunc('day'::text, now()) < rt1.validita_fine
  OR
                             tt1.validita_fine IS NULL)
                       UNION ALL
                       SELECT tn.classif_classif_fam_tree_id,
                              tn.classif_fam_tree_id,
                              tn.classif_id,
                              tn.classif_id_padre,
                              tn.ente_proprietario_id,
                              tn.ordine,
                              tn.livello,
                              tp.level + 1,
                              tp.arrhierarchy || tn.classif_id
                       FROM rqname tp,
                            siac_r_class_fam_tree tn
                       WHERE tp.classif_id = tn.classif_id_padre AND
                             tn.ente_proprietario_id = tp.ente_proprietario_id
  AND
                             now() >= tn.validita_inizio AND
                             now() <= COALESCE(tn.validita_fine::timestamp with
                               time zone, now())
       )
  SELECT rqname.classif_classif_fam_tree_id, rqname.classif_fam_tree_id,
    rqname.classif_id, rqname.classif_id_padre, rqname.ente_proprietario_id,
    rqname.ordine, rqname.livello, rqname.level
  FROM rqname
  ORDER BY rqname.arrhierarchy) tb,
           siac_t_class t1,
           siac_d_class_tipo ti1
  WHERE t1.classif_id = tb.classif_id AND
        ti1.classif_tipo_id = t1.classif_tipo_id AND
        t1.ente_proprietario_id = tb.ente_proprietario_id AND
        ti1.ente_proprietario_id = t1.ente_proprietario_id;        
        



INSERT INTO 
  siac.siac_r_pdce_fam_class_tipo
(
  pdce_fam_id,
  classif_tipo_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.pdce_fam_id,a.classif_tipo_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin'
 From siac_d_class_tipo a,siac_d_pdce_fam b,siac_d_ambito c where a.classif_tipo_code ='CE_CODBIL_GSA'
and b.ente_proprietario_id=A.ente_proprietario_id
and b.pdce_fam_code in ('CE','RE')
and c.ambito_id=b.ambito_id
and c.ambito_code='AMBITO_GSA'
and not exists (select 1 from siac_r_pdce_fam_class_tipo z where z.classif_tipo_id=a.classif_tipo_id
and z.pdce_fam_id=b.pdce_fam_id
)
;



INSERT INTO 
  siac.siac_r_pdce_fam_class_tipo
(
  pdce_fam_id,
  classif_tipo_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.pdce_fam_id,a.classif_tipo_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin'
 From siac_d_class_tipo a,siac_d_pdce_fam b,siac_d_ambito c where a.classif_tipo_code ='SPA_CODBIL_GSA'
and b.ente_proprietario_id=A.ente_proprietario_id
and b.pdce_fam_code in ('AP','OA')
and c.ambito_id=b.ambito_id
and c.ambito_code='AMBITO_GSA'
and not exists (select 1 from siac_r_pdce_fam_class_tipo z where z.classif_tipo_id=a.classif_tipo_id
and z.pdce_fam_id=b.pdce_fam_id
);



INSERT INTO 
  siac.siac_r_pdce_fam_class_tipo
(
  pdce_fam_id,
  classif_tipo_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select 
b.pdce_fam_id,a.classif_tipo_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin'
 From siac_d_class_tipo a,siac_d_pdce_fam b,siac_d_ambito c where a.classif_tipo_code ='SPP_CODBIL_GSA'
and b.ente_proprietario_id=A.ente_proprietario_id
and b.pdce_fam_code in ('PP','OP')
and c.ambito_id=b.ambito_id
and c.ambito_code='AMBITO_GSA'
and not exists (select 1 from siac_r_pdce_fam_class_tipo z where z.classif_tipo_id=a.classif_tipo_id
and z.pdce_fam_id=b.pdce_fam_id
);


---------------
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.26' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.29' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.68' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.50' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.47' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.42' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.65' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0150'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.58' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.62' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.86.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.86.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.86.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.86.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.02.68' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.02.69' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0460'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.12.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0460'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.13.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0460'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.13.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.02.87' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0560'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.50.03.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EAA0920'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA0290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.01.44' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA0300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.70' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA0350'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.21.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA0520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.03.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA0830'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.03.86' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.04.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.03.75' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.78' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.75' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.81' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.03.76' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.03.89' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.11.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.11.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.11.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.11.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.11.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.11.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1620'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.17.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.17.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.76' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.04.51' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.82' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.15.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1790'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.04.70' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1800'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.04.58' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA1900'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2550'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.10.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2550'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.16.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.16.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2750'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.16.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2780'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.16.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2790'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.16.25' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2810'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.10.16.30' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EBA2890'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.70.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EEA0140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='4.70.03.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EEA0240'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.25.04.32' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EEA0340'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.25.04.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EEA0430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.25.04.34' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EEA0440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='3.25.04.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='EEA0550'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='CE_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);

INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA050'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA050'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.03.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.05.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.06.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.11.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA360'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA360'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA360'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.02.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.03.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA420'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.04.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.05.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.06.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.07.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.08.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA540'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.09.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.09.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.12.09.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA680'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA680'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA730'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA750'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.14.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA760'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA050'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.24' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.25' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.26' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.27' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.28' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.29' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.40' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.41' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.42' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.43' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.44' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.01.45' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.30' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.32' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.33' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.34' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.35' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.36' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.37' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA150'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.38' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.02.39' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.03.50' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.03.51' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.03.53' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.03.54' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.03.55' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.04.70' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA150'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.21.04.71' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.24' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA390'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.25' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.26' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA490'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.27' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.28' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.29' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.30' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA510'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.32' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.33' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.34' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.35' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.36' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA490'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.37' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.38' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.39' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.40' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA500'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.41' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.01.42' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA520'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.02.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.03.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.03.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.03.43' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.03.45' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.03.47' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.03.48' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.04.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA650'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.26' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.27' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.29' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.30' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.32' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.41' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.42' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA680'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.43' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.44' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.45' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.46' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA340'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.47' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.48' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.49' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.50' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.51' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA680'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.05.52' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA340'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA620'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.06.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA620'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA640'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA640'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.07.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA630'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.07.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA640'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.07.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA640'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.07.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA630'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.08.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.08.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.08.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.08.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA240'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.08.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.08.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA250'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.09.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA250'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.09.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.09.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.10.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA370'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.10.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA380'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.11.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.11.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.11.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.11.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.11.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.12.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.12.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.12.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.12.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.12.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA440'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.13.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA580'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.14.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.14.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.14.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.15.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA480'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.16.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.16.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.16.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.16.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.16.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.16.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA280'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.17.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.22.18.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA590'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.23.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA740'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.23.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA730'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.23.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA730'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.23.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA730'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA760'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA760'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA760'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.28' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.29' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.30' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.32' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.33' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.34' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.35' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.36' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.37' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.38' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.39' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.40' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.41' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.42' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.43' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.02.44' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA790'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA780'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA770'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.24.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA780'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.30.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ACA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.30.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ACA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.30.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ACA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.40.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.41.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.51.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ADA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA110'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA150'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.55.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA190'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA340'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA370'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA400'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA400'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.03.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA430'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA460'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.04.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA460'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA490'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA490'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.06.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA400'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.60.07.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='AAA400'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA340'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA340'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA450'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA530'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA710'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA670'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA690'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.66.01.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='ABA600'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPA_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);

INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='1.10.06.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA070'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.03.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.03.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.04.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.04.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.04.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA200'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.07.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.07.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.07.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.08.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.08.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.08.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.09.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.11.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.12.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA190'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.12.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA190'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.13.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.14.' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.14.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.15.' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.50.15.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PAA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA050'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PCA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA240'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.65.03.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA250'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.67.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.67.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.67.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.67.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA190'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.70.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PCA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA080'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA100'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA110'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA140'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.71.08.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PBA090'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.02.24' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.03.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.03.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.03.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA130'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.03.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA120'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.04.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.04.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.04.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.04.43' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.04.45' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA220'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.30' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.40' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.52' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.53' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.05.54' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA300'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.06.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.06.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.06.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA310'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.07.32' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA320'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.08.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA330'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.09.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA350'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.09.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA350'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA360'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA380'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA380'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA290'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA380'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA380'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.31' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA060'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.41' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA380'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.42' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA370'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.10.43' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.11.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA250'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.11.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA250'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.12.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.12.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.12.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.12.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.12.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA270'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.75.12.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA260'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.01.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.02.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.03.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA170'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.04.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.05.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.06.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.07.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.08.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.09.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.10.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.11.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.76.12.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA210'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.77.01.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.01.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.02.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.03.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA160'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.04.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA230'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.13' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.15' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.16' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.17' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.18' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.19' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.20' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.21' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.22' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.78.05.23' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA180'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.79.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PDA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.11' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.12' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.80.01.14' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PEA040'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA000'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.02.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.02.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA010'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.03.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.03.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.04.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.85.05.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA020'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.87.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.88.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.02' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.03' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.04' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.05' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.06' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.07' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.08' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.09' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='2.89.01.10' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);
INSERT INTO siac_r_pdce_conto_class(pdce_conto_id,classif_id,validita_inizio,ente_proprietario_id,login_operazione) select a.pdce_conto_id,c.classif_id,to_timestamp('01/01/2015','dd/mm/yyyy'),a.ente_proprietario_id,'admin' From siac_t_pdce_conto a, siac_d_ambito b,siac_t_class c,siac_d_class_tipo d where a.ambito_id=b.ambito_id and b.ambito_code='AMBITO_GSA' and a.pdce_conto_code='8.01.01.01' and c.ente_proprietario_id=a.ente_proprietario_id and c.classif_code='PFA030'and d.classif_tipo_id=c.classif_tipo_id and d.classif_tipo_code='SPP_CODBIL_GSA' and not EXISTS (select 1 from siac_r_pdce_conto_class z where z.classif_id=c.classif_id and z.pdce_conto_id=a.pdce_conto_id);


-- SIAC-5551 FINE

-- SIAC-5279 INIZIO

DROP FUNCTION IF EXISTS fnc_siac_cons_entita_indirizzo_from_soggetto(INTEGER, INTEGER, INTEGER);

CREATE OR REPLACE FUNCTION fnc_siac_cons_entita_indirizzo_from_soggetto (
	_uid_soggetto INTEGER,
	_limit INTEGER,
	_page INTEGER
)
RETURNS TABLE (
	toponimo VARCHAR,
	zip_code VARCHAR,
	principale CHAR,
	avviso CHAR,
	indirizzo_tipo_desc VARCHAR,
	comune_desc VARCHAR,
	sigla_automobilistica VARCHAR,
	via_tipo_desc VARCHAR
) AS
$body$
DECLARE
	_offset INTEGER := (_page) * _limit;
BEGIN


	RETURN QUERY
	
	WITH provincia AS (
		SELECT
			siac_r_comune_provincia.comune_id,
			siac_t_provincia.sigla_automobilistica
			-- La relazione tra provincia e regione non e' popolata
		FROM
			siac_r_comune_provincia,
			siac_t_provincia
			--siac_r_provincia_regione
			--siac_t_regione
		WHERE siac_r_comune_provincia.provincia_id = siac_t_provincia.provincia_id
		--AND siac_t_provincia.provincia_id = siac_r_provincia_regione.provincia_id
		--AND siac_r_provincia_regione.regione_id = siac_t_regione.regione_id
		AND siac_r_comune_provincia.data_cancellazione IS NULL
		AND siac_t_provincia.data_cancellazione IS NULL
		--AND siac_r_provincia_regione.data_cancellazione IS NULL
		--AND siac_t_regione.data_cancellazione IS NULL
	)
	SELECT
		siac_t_indirizzo_soggetto.toponimo,
		siac_t_indirizzo_soggetto.zip_code,
		siac_t_indirizzo_soggetto.principale,
		siac_t_indirizzo_soggetto.avviso,
		siac_d_indirizzo_tipo.indirizzo_tipo_desc,
		siac_t_comune.comune_desc,
		provincia.sigla_automobilistica,
		siac_d_via_tipo.via_tipo_desc
	FROM siac_t_indirizzo_soggetto
	CROSS JOIN siac_r_indirizzo_soggetto_tipo
	CROSS JOIN siac_d_indirizzo_tipo
	CROSS JOIN siac_t_comune
	LEFT OUTER JOIN siac_d_via_tipo ON (siac_t_indirizzo_soggetto.via_tipo_id = siac_d_via_tipo.via_tipo_id AND siac_d_via_tipo.data_cancellazione IS NULL)
	LEFT OUTER JOIN provincia ON (provincia.comune_id = siac_t_comune.comune_id)
	WHERE siac_t_indirizzo_soggetto.soggetto_id = _uid_soggetto
	AND siac_t_indirizzo_soggetto.indirizzo_id = siac_r_indirizzo_soggetto_tipo.indirizzo_id
	AND siac_r_indirizzo_soggetto_tipo.indirizzo_tipo_id = siac_d_indirizzo_tipo.indirizzo_tipo_id
	AND siac_t_indirizzo_soggetto.comune_id = siac_t_comune.comune_id
	AND siac_t_indirizzo_soggetto.data_cancellazione IS NULL
	AND siac_r_indirizzo_soggetto_tipo.data_cancellazione IS NULL
	AND siac_d_indirizzo_tipo.data_cancellazione IS NULL
	AND siac_t_comune.data_cancellazione IS NULL
	ORDER BY
		siac_t_comune.comune_desc,
		siac_t_indirizzo_soggetto.principale,
		siac_t_indirizzo_soggetto.toponimo
	LIMIT _limit
	OFFSET _offset;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100 ROWS 1000;

DROP FUNCTION IF EXISTS fnc_siac_cons_entita_indirizzo_from_soggetto_total(INTEGER);

CREATE OR REPLACE FUNCTION fnc_siac_cons_entita_indirizzo_from_soggetto_total (
	_uid_soggetto INTEGER
)
RETURNS BIGINT AS
$body$
DECLARE
	total BIGINT;
BEGIN
	
	SELECT COALESCE(COUNT(tmp.*), 0)
	INTO total
	FROM (
		SELECT 1
		FROM siac_t_indirizzo_soggetto
		CROSS JOIN siac_r_indirizzo_soggetto_tipo
		CROSS JOIN siac_d_indirizzo_tipo
		CROSS JOIN siac_t_comune
		WHERE siac_t_indirizzo_soggetto.soggetto_id = _uid_soggetto
		AND siac_t_indirizzo_soggetto.indirizzo_id = siac_r_indirizzo_soggetto_tipo.indirizzo_id
		AND siac_r_indirizzo_soggetto_tipo.indirizzo_tipo_id = siac_d_indirizzo_tipo.indirizzo_tipo_id
		AND siac_t_indirizzo_soggetto.comune_id = siac_t_comune.comune_id
		AND siac_t_indirizzo_soggetto.data_cancellazione IS NULL
		AND siac_r_indirizzo_soggetto_tipo.data_cancellazione IS NULL
		AND siac_d_indirizzo_tipo.data_cancellazione IS NULL
		AND siac_t_comune.data_cancellazione IS NULL
	) tmp;
	
RETURN total;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

DROP FUNCTION IF EXISTS fnc_siac_cons_entita_modalita_pagamento_from_soggetto(INTEGER, INTEGER, INTEGER);

CREATE OR REPLACE FUNCTION fnc_siac_cons_entita_modalita_pagamento_from_soggetto (
	_uid_soggetto INTEGER,
	_limit INTEGER,
	_page INTEGER
)
RETURNS TABLE (
	ordine INTEGER,
	modpag_stato_code VARCHAR,
	modpag_stato_desc VARCHAR,
	associato_a VARCHAR,
	descr_arricchita VARCHAR,
	is_cessione BOOLEAN
) AS
$body$
DECLARE
	_offset INTEGER := (_page) * _limit;
	rec RECORD;
BEGIN

	FOR rec IN
	SELECT *
	FROM (
		SELECT
			--Codice (numero d'ordine)
			rModpagOrdine.ordine,
			--Descrizione (campo derivato Descrizione della modalita' di pagamento)
			sog1.soggetto_code,
			sog1.soggetto_desc,
			modpag.quietanziante,
			modpag.quietanziante_codice_fiscale,
			modpag.quietanzante_nascita_data,
			modpag.quietanziante_nascita_luogo,
			modpag.quietanziante_nascita_stato,
			modpag.bic,
			modpag.contocorrente,
			modpag.contocorrente_intestazione,
			modpag.iban,
			modpag.banca_denominazione,
			--Associato a (soggetto o <Denominazione> della sede)
			sog_ordine.soggetto_code soggetto_code_ordine,
			sog_ordine.soggetto_desc soggetto_desc_ordine,
			--Stato
			dModpagStato.modpag_stato_code,
			dModpagStato.modpag_stato_desc,
			dAccreditoTipo.accredito_tipo_code mod_pag_tipo_code,
			dAccreditoTipo.accredito_tipo_desc mod_pag_tipo_desc,
			CASE
				WHEN sog1.soggetto_desc = sog_ordine.soggetto_desc THEN 'Soggetto'
				ELSE sog1.soggetto_desc
			END associato_a,
			false is_cessione
		FROM
			siac_t_soggetto sog1,
			siac_t_modpag modpag,
			siac_r_modpag_stato rModpagStato,
			siac_d_modpag_stato dModpagStato,
			siac_r_modpag_ordine rModpagOrdine,
			siac_t_soggetto sog_ordine,
			siac_d_accredito_tipo dAccreditoTipo
		WHERE sog_ordine.soggetto_id = _uid_soggetto
		AND sog1.soggetto_id = modpag.soggetto_id
		AND modpag.modpag_id = rModpagStato.modpag_id
		AND rModpagStato.modpag_stato_id = dModpagStato.modpag_stato_id
		AND modpag.modpag_id = rModpagOrdine.modpag_id
		AND rModpagOrdine.soggetto_id = sog_ordine.soggetto_id
		AND dAccreditoTipo.accredito_tipo_id = modpag.accredito_tipo_id
		AND sog1.data_cancellazione IS NULL
		AND modpag.data_cancellazione IS NULL
		AND rModpagStato.data_cancellazione IS NULL
		AND dModpagStato.data_cancellazione IS NULL
		AND rModpagOrdine.data_cancellazione IS NULL
		AND sog_ordine.data_cancellazione IS NULL
		AND dAccreditoTipo.data_cancellazione IS NULL
		-- Union effettuata con l'all in quanto non vi e' possibilita' di record duplicati
		UNION ALL
		--cessioni
		SELECT
			rModpagOrdine.ordine,
			sog2.soggetto_code,
			sog2.soggetto_desc,
			modpag.quietanziante,
			modpag.quietanziante_codice_fiscale,
			modpag.quietanzante_nascita_data,
			modpag.quietanziante_nascita_luogo,
			modpag.quietanziante_nascita_stato,
			modpag.bic,
			modpag.contocorrente,
			modpag.contocorrente_intestazione,
			modpag.iban,
			modpag.banca_denominazione,
			sog_ordine.soggetto_code soggetto_code_ordine,
			sog_ordine.soggetto_desc soggetto_desc_ordine,
			dModpagStato.modpag_stato_code,
			dModpagStato.modpag_stato_desc,
			dRelazTipo.relaz_tipo_code mod_pag_tipo_code,
			dRelazTipo.relaz_tipo_desc mod_pag_tipo_desc,
			-- TODO: verificare l'associato_a nel caso di cessione
			'Soggetto' associato_a,
			true is_cessione
		FROM
			siac_t_soggetto sog1,
			siac_r_soggetto_relaz soggettorelaz,
			siac_r_soggrel_modpag rsoggrelmodpag,
			siac_t_modpag modpag,
			siac_t_soggetto sog2,
			siac_r_modpag_stato rModpagStato,
			siac_d_modpag_stato dModpagStato,
			siac_r_modpag_ordine rModpagOrdine,
			siac_t_soggetto sog_ordine,
			siac_d_relaz_tipo dRelazTipo
		WHERE sog_ordine.soggetto_id = _uid_soggetto
		AND sog1.soggetto_id = soggettorelaz.soggetto_id_da
		AND soggettorelaz.soggetto_relaz_id = rsoggrelmodpag.soggetto_relaz_id
		AND rsoggrelmodpag.modpag_id = modpag.modpag_id
		AND modpag.modpag_id = rModpagStato.modpag_id
		AND rModpagStato.modpag_stato_id = dModpagStato.modpag_stato_id
		AND modpag.soggetto_id = sog2.soggetto_id
		AND rsoggrelmodpag.soggrelmpag_id = rModpagOrdine.soggrelmpag_id
		AND rModpagOrdine.soggetto_id = sog_ordine.soggetto_id
		AND dRelazTipo.relaz_tipo_id = soggettorelaz.relaz_tipo_id
		AND sog1.data_cancellazione IS NULL
		AND soggettorelaz.data_cancellazione IS NULL
		AND rsoggrelmodpag.data_cancellazione IS NULL
		AND modpag.data_cancellazione IS NULL
		AND sog2.data_cancellazione IS NULL
		AND rModpagStato.data_cancellazione IS NULL
		AND dModpagStato.data_cancellazione IS NULL
		AND rModpagOrdine.data_cancellazione IS NULL
		AND sog_ordine.data_cancellazione IS NULL
		AND dRelazTipo.data_cancellazione IS NULL
	) AS tmp
	ORDER BY tmp.ordine
	LIMIT _limit
	OFFSET _offset
	LOOP
		ordine := rec.ordine;
		modpag_stato_code := rec.modpag_stato_code;
		modpag_stato_desc := rec.modpag_stato_desc;
		associato_a := rec.associato_a;
		is_cessione := rec.is_cessione;
		
		-- Calcolo della descrizione arricchita
		-- Pulizia del campo
		descr_arricchita := '';
		
		-- Soggetto ricevente
		IF rec.is_cessione THEN
			descr_arricchita := descr_arricchita || 'Soggetto ricevente: ' || rec.soggetto_code;
			IF rec.soggetto_desc IS NOT NULL AND (rec.soggetto_desc <> '') THEN
				descr_arricchita := descr_arricchita || ' - ' || rec.soggetto_desc;
			END IF;
		END IF;
		
		-- Tipo di accredito
		IF rec.mod_pag_tipo_code IS NOT NULL AND (rec.mod_pag_tipo_code <> '') THEN
			IF (descr_arricchita <> '') THEN
				descr_arricchita := descr_arricchita || ' - ';
			END IF;
			descr_arricchita := descr_arricchita || 'Tipo accredito: ' || rec.mod_pag_tipo_code;
			
			IF rec.mod_pag_tipo_desc IS NOT NULL AND (rec.mod_pag_tipo_desc <> '') THEN
				descr_arricchita := descr_arricchita || ' - ' || rec.mod_pag_tipo_desc;
			END IF;
		END IF;
		
		-- IBAN
		IF rec.iban IS NOT NULL AND (rec.iban <> '') THEN
			IF (descr_arricchita <> '') THEN
				descr_arricchita := descr_arricchita || ' - ';
			END IF;
			descr_arricchita := descr_arricchita || 'IBAN: ' || rec.iban;
		END IF;
		
		-- BIC
		IF rec.bic IS NOT NULL AND (rec.bic <> '') THEN
			IF (descr_arricchita <> '') THEN
				descr_arricchita := descr_arricchita || ' - ';
			END IF;
			descr_arricchita := descr_arricchita || 'BIC: ' || rec.bic;
		END IF;
		
		-- CONTO CORRENTE
		IF rec.contocorrente IS NOT NULL AND (rec.contocorrente <> '') THEN
			IF (descr_arricchita <> '') THEN
				descr_arricchita := descr_arricchita || ' - ';
			END IF;
			descr_arricchita := descr_arricchita || 'Conto: ' || rec.contocorrente;
			
			IF rec.contocorrente_intestazione IS NOT NULL AND (rec.contocorrente_intestazione <> '') THEN
				descr_arricchita := descr_arricchita || ' intestato a ' || rec.contocorrente_intestazione;
			END IF;
		END IF;
		
		-- QUIETANZANTE
		IF rec.quietanziante IS NOT NULL AND (rec.quietanziante <> '') THEN
			IF (descr_arricchita <> '') THEN
				descr_arricchita := descr_arricchita || ' - ';
			END IF;
			descr_arricchita := descr_arricchita || 'Quietanzante: ' || rec.quietanziante;
			
			IF rec.quietanziante_codice_fiscale IS NOT NULL AND (rec.quietanziante_codice_fiscale <> '') THEN
				descr_arricchita := descr_arricchita || ' (CF: ' || rec.quietanziante_codice_fiscale || ')';
			END IF;
			
			IF rec.quietanzante_nascita_data IS NOT NULL THEN
				descr_arricchita := descr_arricchita || ', nato il ' || rec.quietanzante_nascita_data;
			END IF;
			
			IF rec.quietanziante_nascita_luogo IS NOT NULL AND (rec.quietanziante_nascita_luogo <> '') THEN
				descr_arricchita := descr_arricchita || ' a ' || rec.quietanziante_nascita_luogo;
			END IF;
			
			IF rec.quietanziante_nascita_stato IS NOT NULL AND (rec.quietanziante_nascita_stato <> '') THEN
				descr_arricchita := descr_arricchita || ', ' || rec.quietanziante_nascita_stato;
			END IF;
		END IF;
		
		RETURN NEXT;
	END LOOP;
	RETURN;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100 ROWS 1000;

DROP FUNCTION IF EXISTS fnc_siac_cons_entita_modalita_pagamento_from_soggetto_total(INTEGER);

CREATE OR REPLACE FUNCTION fnc_siac_cons_entita_modalita_pagamento_from_soggetto_total (
	_uid_soggetto INTEGER
)
RETURNS bigint AS
$body$
DECLARE
	total bigint;
BEGIN

	SELECT COALESCE(COUNT(*), 0)
	INTO total
	FROM (
		SELECT
			1
		FROM
			siac_t_soggetto sog1,
			siac_t_modpag modpag,
			siac_r_modpag_stato rModpagStato,
			siac_d_modpag_stato dModpagStato,
			siac_r_modpag_ordine rModpagOrdine,
			siac_t_soggetto sog_ordine,
			siac_d_accredito_tipo dAccreditoTipo
		WHERE sog_ordine.soggetto_id = _uid_soggetto
		AND sog1.soggetto_id = modpag.soggetto_id
		AND modpag.modpag_id = rModpagStato.modpag_id
		AND rModpagStato.modpag_stato_id = dModpagStato.modpag_stato_id
		AND modpag.modpag_id = rModpagOrdine.modpag_id
		AND rModpagOrdine.soggetto_id = sog_ordine.soggetto_id
		AND dAccreditoTipo.accredito_tipo_id = modpag.accredito_tipo_id
		AND sog1.data_cancellazione IS NULL
		AND modpag.data_cancellazione IS NULL
		AND rModpagStato.data_cancellazione IS NULL
		AND dModpagStato.data_cancellazione IS NULL
		AND rModpagOrdine.data_cancellazione IS NULL
		AND sog_ordine.data_cancellazione IS NULL
		AND dAccreditoTipo.data_cancellazione IS NULL
		-- Union effettuata con l'all in quanto non vi e' possibilita' di record duplicati
		UNION ALL
		--cessioni
		SELECT
			1
		FROM
			siac_t_soggetto sog1,
			siac_r_soggetto_relaz soggettorelaz,
			siac_r_soggrel_modpag rsoggrelmodpag,
			siac_t_modpag modpag,
			siac_t_soggetto sog2,
			siac_r_modpag_stato rModpagStato,
			siac_d_modpag_stato dModpagStato,
			siac_r_modpag_ordine rModpagOrdine,
			siac_t_soggetto sog_ordine,
			siac_d_relaz_tipo dRelazTipo
		where sog_ordine.soggetto_id = _uid_soggetto
		AND sog1.soggetto_id = soggettorelaz.soggetto_id_da
		AND soggettorelaz.soggetto_relaz_id = rsoggrelmodpag.soggetto_relaz_id
		AND rsoggrelmodpag.modpag_id = modpag.modpag_id
		AND modpag.modpag_id = rModpagStato.modpag_id
		AND rModpagStato.modpag_stato_id = dModpagStato.modpag_stato_id
		AND modpag.soggetto_id = sog2.soggetto_id
		AND rsoggrelmodpag.soggrelmpag_id = rModpagOrdine.soggrelmpag_id
		AND rModpagOrdine.soggetto_id = sog_ordine.soggetto_id
		AND dRelazTipo.relaz_tipo_id = soggettorelaz.relaz_tipo_id
		AND sog1.data_cancellazione IS NULL
		AND soggettorelaz.data_cancellazione IS NULL
		AND rsoggrelmodpag.data_cancellazione IS NULL
		AND modpag.data_cancellazione IS NULL
		AND sog2.data_cancellazione IS NULL
		AND rModpagStato.data_cancellazione IS NULL
		AND dModpagStato.data_cancellazione IS NULL
		AND rModpagOrdine.data_cancellazione IS NULL
		AND sog_ordine.data_cancellazione IS NULL
		AND dRelazTipo.data_cancellazione IS NULL
	) AS tmp;

RETURN total;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

DROP FUNCTION IF EXISTS fnc_siac_cons_entita_sede_secondaria_from_soggetto(INTEGER, INTEGER, INTEGER);

CREATE OR REPLACE FUNCTION siac.fnc_siac_cons_entita_sede_secondaria_from_soggetto (
	_uid_soggetto INTEGER,
	_limit INTEGER,
	_page INTEGER
)
RETURNS TABLE (
	toponimo VARCHAR,
	zip_code VARCHAR,
	comune_desc VARCHAR,
	sigla_automobilistica VARCHAR,
	via_tipo_desc VARCHAR,
	soggetto_desc VARCHAR,
	soggetto_stato_code VARCHAR,
	soggetto_stato_desc VARCHAR
) AS
$body$
DECLARE
	_offset INTEGER := (_page) * _limit;
BEGIN

	RETURN QUERY
	
	WITH provincia AS (
		SELECT
			siac_r_comune_provincia.comune_id,
			siac_t_provincia.sigla_automobilistica
			-- La relazione tra provincia e regione non e' popolata
		FROM
			siac_r_comune_provincia,
			siac_t_provincia
			--siac_r_provincia_regione
			--siac_t_regione
		WHERE siac_r_comune_provincia.provincia_id = siac_t_provincia.provincia_id
		--AND siac_t_provincia.provincia_id = siac_r_provincia_regione.provincia_id
		--AND siac_r_provincia_regione.regione_id = siac_t_regione.regione_id
		AND siac_r_comune_provincia.data_cancellazione IS NULL
		AND siac_t_provincia.data_cancellazione IS NULL
		--AND siac_r_provincia_regione.data_cancellazione IS NULL
		--AND siac_t_regione.data_cancellazione IS NULL
	),
	sede_sec AS (
		SELECT
			sog2.soggetto_id sede_sec_id,
			sog1.soggetto_id,
			sog2.soggetto_desc,
			dSogStato.soggetto_stato_code,
			dSogStato.soggetto_stato_desc
		FROM
			siac_t_soggetto sog1,
			siac_r_soggetto_relaz rSogRelaz,
			siac_d_relaz_tipo dRelTipo,
			siac_t_soggetto sog2,
			siac_r_soggetto_stato rSogStato,
			siac_d_soggetto_stato dSogStato
		WHERE sog1.soggetto_id = rSogRelaz.soggetto_id_da
		AND rSogRelaz.relaz_tipo_id = dRelTipo.relaz_tipo_id
		AND dRelTipo.relaz_tipo_code = 'SEDE_SECONDARIA'
		AND rSogRelaz.soggetto_id_a = sog2.soggetto_id
		AND sog2.soggetto_id = rSogStato.soggetto_id
		AND rSogStato.soggetto_stato_id = dSogStato.soggetto_stato_id
		AND sog1.data_cancellazione IS NULL
		AND rSogRelaz.data_cancellazione IS NULL
		AND dRelTipo.data_cancellazione IS NULL
		AND sog2.data_cancellazione IS NULL
		AND rSogStato.data_cancellazione IS NULL
		AND dSogStato.data_cancellazione IS NULL
	)
	SELECT
		siac_t_indirizzo_soggetto.toponimo,
		siac_t_indirizzo_soggetto.zip_code,
		siac_t_comune.comune_desc,
		provincia.sigla_automobilistica,
		siac_d_via_tipo.via_tipo_desc,
		sede_sec.soggetto_desc,
		sede_sec.soggetto_stato_code,
		sede_sec.soggetto_stato_desc
	FROM siac_t_indirizzo_soggetto
	CROSS JOIN siac_t_comune
	CROSS JOIN sede_sec
	LEFT OUTER JOIN siac_d_via_tipo ON (siac_t_indirizzo_soggetto.via_tipo_id = siac_d_via_tipo.via_tipo_id AND siac_d_via_tipo.data_cancellazione IS NULL)
	LEFT OUTER JOIN provincia ON (provincia.comune_id = siac_t_comune.comune_id)
	WHERE sede_sec.soggetto_id = _uid_soggetto
	AND siac_t_indirizzo_soggetto.soggetto_id = sede_sec.sede_sec_id
	AND siac_t_indirizzo_soggetto.comune_id = siac_t_comune.comune_id
	AND siac_t_indirizzo_soggetto.data_cancellazione IS NULL
	AND siac_t_comune.data_cancellazione IS NULL
	ORDER BY sede_sec.soggetto_desc
	LIMIT _limit
	OFFSET _offset;

END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100 ROWS 1000;

DROP FUNCTION IF EXISTS fnc_siac_cons_entita_sede_secondaria_from_soggetto_total(INTEGER);

CREATE OR REPLACE FUNCTION siac.fnc_siac_cons_entita_sede_secondaria_from_soggetto_total (
	_uid_soggetto INTEGER
)
RETURNS BIGINT AS
$body$
DECLARE
	total BIGINT;
BEGIN

	WITH sede_sec AS (
		SELECT
			sog2.soggetto_id sede_sec_id,
			sog1.soggetto_id
		FROM
			siac_t_soggetto sog1,
			siac_r_soggetto_relaz rSogRelaz,
			siac_d_relaz_tipo dRelTipo,
			siac_t_soggetto sog2,
			siac_r_soggetto_stato rSogStato,
			siac_d_soggetto_stato dSogStato
		WHERE sog1.soggetto_id = rSogRelaz.soggetto_id_da
		AND rSogRelaz.relaz_tipo_id = dRelTipo.relaz_tipo_id
		AND dRelTipo.relaz_tipo_code = 'SEDE_SECONDARIA'
		AND rSogRelaz.soggetto_id_a = sog2.soggetto_id
		AND sog2.soggetto_id = rSogStato.soggetto_id
		AND rSogStato.soggetto_stato_id = dSogStato.soggetto_stato_id
		AND sog1.data_cancellazione IS NULL
		AND rSogRelaz.data_cancellazione IS NULL
		AND dRelTipo.data_cancellazione IS NULL
		AND sog2.data_cancellazione IS NULL
		AND rSogStato.data_cancellazione IS NULL
		AND dSogStato.data_cancellazione IS NULL
	)
	SELECT COALESCE(COUNT(*), 0)
	INTO total
	FROM siac_t_indirizzo_soggetto
	CROSS JOIN siac_t_comune
	CROSS JOIN sede_sec
	WHERE sede_sec.soggetto_id = _uid_soggetto
	AND siac_t_indirizzo_soggetto.soggetto_id = sede_sec.sede_sec_id
	AND siac_t_indirizzo_soggetto.comune_id = siac_t_comune.comune_id
	AND siac_t_indirizzo_soggetto.data_cancellazione IS NULL
	AND siac_t_comune.data_cancellazione IS NULL;

RETURN total;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY INVOKER
COST 100;

-- SIAC-5279 FINE
--correzioni SIAC-5551
insert into  siac_r_pdce_fam_class_fam (
  pdce_fam_id,
  classif_fam_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select
f.pdce_fam_id,
cf.classif_fam_id,
now(),
f.ente_proprietario_id,
f.login_operazione
from siac_d_pdce_fam f, siac_d_ambito a, siac_d_class_fam cf
where f.ambito_id=a.ambito_id
and a.ambito_code='AMBITO_GSA'
and f.pdce_fam_code in ('CE','RE')
and cf.ente_proprietario_id=f.ente_proprietario_id
and cf.classif_fam_code='00024'
and not exists (select 1 from siac_r_pdce_fam_class_fam z where z.pdce_fam_id=f.pdce_fam_id
and z.classif_fam_id=cf.classif_fam_id and z.data_cancellazione is null)
;



insert into  siac_r_pdce_fam_class_fam (
  pdce_fam_id,
  classif_fam_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select
f.pdce_fam_id,
cf.classif_fam_id,
now(),
f.ente_proprietario_id,
f.login_operazione
from siac_d_pdce_fam f, siac_d_ambito a, siac_d_class_fam cf
where f.ambito_id=a.ambito_id
and a.ambito_code='AMBITO_GSA'
and f.pdce_fam_code in ('AP','OA')
and cf.ente_proprietario_id=f.ente_proprietario_id
and cf.classif_fam_code='00026'
and not exists (select 1 from siac_r_pdce_fam_class_fam z where z.pdce_fam_id=f.pdce_fam_id
and z.classif_fam_id=cf.classif_fam_id and z.data_cancellazione is null)
;




insert into  siac_r_pdce_fam_class_fam (
  pdce_fam_id,
  classif_fam_id,
  validita_inizio,
  ente_proprietario_id,
  login_operazione
)
select
f.pdce_fam_id,
cf.classif_fam_id,
now(),
f.ente_proprietario_id,
f.login_operazione
from siac_d_pdce_fam f, siac_d_ambito a, siac_d_class_fam cf
where f.ambito_id=a.ambito_id
and a.ambito_code='AMBITO_GSA'
and f.pdce_fam_code in ('PP','OP')
and cf.ente_proprietario_id=f.ente_proprietario_id
and cf.classif_fam_code='00025'
and not exists (select 1 from siac_r_pdce_fam_class_fam z where z.pdce_fam_id=f.pdce_fam_id
and z.classif_fam_id=cf.classif_fam_id and z.data_cancellazione is null)
;
-- fine correzioni SIAC-5551


-- SIAC-5551 INIZIO Di Panfilo
CREATE OR REPLACE VIEW siac.siac_v_dwh_codifiche_econpatr (
    ente_proprietario_id,
    tipo_codifica,
    codice_codifica,
    descrizione_codifica,
    codice_codifica_albero,
    livello_codifica,
    classif_id,
    classif_id_padre)
AS
SELECT zz.ente_proprietario_id, zz.classif_tipo_desc AS tipo_codifica,
    zz.classif_code AS codice_codifica, zz.classif_desc AS descrizione_codifica,
    zz.ordine AS codice_codifica_albero, zz.level AS livello_codifica,
    zz.classif_id, zz.classif_id_padre
FROM(        (        (        (        (        (
    SELECT tb.classif_classif_fam_tree_id,
                                    tb.classif_fam_tree_id, t1.classif_code,
                                    t1.classif_desc, ti1.classif_tipo_desc,
                                    tb.classif_id, tb.classif_id_padre,
                                    tb.ente_proprietario_id, tb.ordine,
                                    tb.level
    FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id,
        classif_fam_tree_id, classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
        SELECT rt1.classif_classif_fam_tree_id,
                                                            rt1.classif_fam_tree_id,
                                                            rt1.classif_id,
                                                            rt1.classif_id_padre,
                                                            rt1.ente_proprietario_id,
                                                            rt1.ordine,
                                                            rt1.livello, 1,
                                                            ARRAY[COALESCE(rt1.classif_id,
                                                                0)] AS "array"
        FROM siac_r_class_fam_tree rt1,
                                                            siac_t_class_fam_tree tt1,
                                                            siac_d_class_fam cf
        WHERE cf.classif_fam_id = tt1.classif_fam_id AND
            tt1.classif_fam_tree_id = rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00020'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
        UNION ALL
        SELECT tn.classif_classif_fam_tree_id,
                                                            tn.classif_fam_tree_id,
                                                            tn.classif_id,
                                                            tn.classif_id_padre,
                                                            tn.ente_proprietario_id,
                                                            tn.ordine,
                                                            tn.livello,
                                                            tp.level + 1,
                                                            tp.arrhierarchy ||
                                                                tn.classif_id
        FROM rqname tp,
                                                            siac_r_class_fam_tree tn
        WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
            tp.ente_proprietario_id
        )
        SELECT rqname.classif_classif_fam_tree_id,
                                            rqname.classif_fam_tree_id,
                                            rqname.classif_id,
                                            rqname.classif_id_padre,
                                            rqname.ente_proprietario_id,
                                            rqname.ordine, rqname.livello,
                                            rqname.level
        FROM rqname
        ORDER BY rqname.arrhierarchy
        ) tb,
                                    siac_t_class t1, siac_d_class_tipo ti1
    WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
        t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id
    UNION
    SELECT tb.classif_classif_fam_tree_id,
                                    tb.classif_fam_tree_id, t1.classif_code,
                                    t1.classif_desc, ti1.classif_tipo_desc,
                                    tb.classif_id, tb.classif_id_padre,
                                    tb.ente_proprietario_id, tb.ordine,
                                    tb.level
    FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id,
        classif_fam_tree_id, classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
        SELECT rt1.classif_classif_fam_tree_id,
                                                            rt1.classif_fam_tree_id,
                                                            rt1.classif_id,
                                                            rt1.classif_id_padre,
                                                            rt1.ente_proprietario_id,
                                                            rt1.ordine,
                                                            rt1.livello, 1,
                                                            ARRAY[COALESCE(rt1.classif_id,
                                                                0)] AS "array"
        FROM siac_r_class_fam_tree rt1,
                                                            siac_t_class_fam_tree tt1,
                                                            siac_d_class_fam cf
        WHERE cf.classif_fam_id = tt1.classif_fam_id AND
            tt1.classif_fam_tree_id = rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00021'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
        UNION ALL
        SELECT tn.classif_classif_fam_tree_id,
                                                            tn.classif_fam_tree_id,
                                                            tn.classif_id,
                                                            tn.classif_id_padre,
                                                            tn.ente_proprietario_id,
                                                            tn.ordine,
                                                            tn.livello,
                                                            tp.level + 1,
                                                            tp.arrhierarchy ||
                                                                tn.classif_id
        FROM rqname tp,
                                                            siac_r_class_fam_tree tn
        WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
            tp.ente_proprietario_id
        )
        SELECT rqname.classif_classif_fam_tree_id,
                                            rqname.classif_fam_tree_id,
                                            rqname.classif_id,
                                            rqname.classif_id_padre,
                                            rqname.ente_proprietario_id,
                                            rqname.ordine, rqname.livello,
                                            rqname.level
        FROM rqname
        ORDER BY rqname.arrhierarchy
        ) tb,
                                    siac_t_class t1, siac_d_class_tipo ti1
    WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
        t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id
    )
UNION
SELECT tb.classif_classif_fam_tree_id,
                            tb.classif_fam_tree_id, t1.classif_code,
                            t1.classif_desc, ti1.classif_tipo_desc,
                            tb.classif_id, tb.classif_id_padre,
                            tb.ente_proprietario_id, tb.ordine, tb.level
FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
    SELECT rt1.classif_classif_fam_tree_id,
                                                    rt1.classif_fam_tree_id,
                                                    rt1.classif_id,
                                                    rt1.classif_id_padre,
                                                    rt1.ente_proprietario_id,
                                                    rt1.ordine, rt1.livello, 1,
                                                    ARRAY[COALESCE(rt1.classif_id,
                                                        0)] AS "array"
    FROM siac_r_class_fam_tree rt1,
                                                    siac_t_class_fam_tree tt1,
                                                    siac_d_class_fam cf
    WHERE cf.classif_fam_id = tt1.classif_fam_id AND tt1.classif_fam_tree_id =
        rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00022'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
    UNION ALL
    SELECT tn.classif_classif_fam_tree_id,
                                                    tn.classif_fam_tree_id,
                                                    tn.classif_id,
                                                    tn.classif_id_padre,
                                                    tn.ente_proprietario_id,
                                                    tn.ordine, tn.livello,
                                                    tp.level + 1,
                                                    tp.arrhierarchy || tn.classif_id
    FROM rqname tp,
                                                    siac_r_class_fam_tree tn
    WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
        tp.ente_proprietario_id
    )
    SELECT rqname.classif_classif_fam_tree_id,
                                    rqname.classif_fam_tree_id,
                                    rqname.classif_id, rqname.classif_id_padre,
                                    rqname.ente_proprietario_id, rqname.ordine,
                                    rqname.livello, rqname.level
    FROM rqname
    ORDER BY rqname.arrhierarchy
    ) tb,
                            siac_t_class t1, siac_d_class_tipo ti1
WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
    t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id
    )
UNION
SELECT tb.classif_classif_fam_tree_id, tb.classif_fam_tree_id,
                    t1.classif_code, t1.classif_desc, ti1.classif_tipo_desc,
                    tb.classif_id, tb.classif_id_padre, tb.ente_proprietario_id,
                    tb.ordine, tb.level
FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
    SELECT rt1.classif_classif_fam_tree_id,
                                            rt1.classif_fam_tree_id,
                                            rt1.classif_id,
                                            rt1.classif_id_padre,
                                            rt1.ente_proprietario_id,
                                            rt1.ordine, rt1.livello, 1,
                                            ARRAY[COALESCE(rt1.classif_id, 0)]
                                                AS "array"
    FROM siac_r_class_fam_tree rt1,
                                            siac_t_class_fam_tree tt1,
                                            siac_d_class_fam cf
    WHERE cf.classif_fam_id = tt1.classif_fam_id AND tt1.classif_fam_tree_id =
        rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00023'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
    UNION ALL
    SELECT tn.classif_classif_fam_tree_id,
                                            tn.classif_fam_tree_id,
                                            tn.classif_id, tn.classif_id_padre,
                                            tn.ente_proprietario_id, tn.ordine,
                                            tn.livello, tp.level + 1,
                                            tp.arrhierarchy || tn.classif_id
    FROM rqname tp,
                                            siac_r_class_fam_tree tn
    WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
        tp.ente_proprietario_id
    )
    SELECT rqname.classif_classif_fam_tree_id,
                            rqname.classif_fam_tree_id, rqname.classif_id,
                            rqname.classif_id_padre,
                            rqname.ente_proprietario_id, rqname.ordine,
                            rqname.livello, rqname.level
    FROM rqname
    ORDER BY rqname.arrhierarchy
    ) tb, siac_t_class t1,
                    siac_d_class_tipo ti1
WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
    t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id
)
UNION 
SELECT tb.classif_classif_fam_tree_id, tb.classif_fam_tree_id,
                    t1.classif_code, t1.classif_desc, ti1.classif_tipo_desc,
                    tb.classif_id, tb.classif_id_padre, tb.ente_proprietario_id,
                    tb.ordine, tb.level
FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
    SELECT rt1.classif_classif_fam_tree_id,
                                            rt1.classif_fam_tree_id,
                                            rt1.classif_id,
                                            rt1.classif_id_padre,
                                            rt1.ente_proprietario_id,
                                            rt1.ordine, rt1.livello, 1,
                                            ARRAY[COALESCE(rt1.classif_id, 0)]
                                                AS "array"
    FROM siac_r_class_fam_tree rt1,
                                            siac_t_class_fam_tree tt1,
                                            siac_d_class_fam cf
    WHERE cf.classif_fam_id = tt1.classif_fam_id AND tt1.classif_fam_tree_id =
        rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00024'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
    UNION ALL
    SELECT tn.classif_classif_fam_tree_id,
                                            tn.classif_fam_tree_id,
                                            tn.classif_id, tn.classif_id_padre,
                                            tn.ente_proprietario_id, tn.ordine,
                                            tn.livello, tp.level + 1,
                                            tp.arrhierarchy || tn.classif_id
    FROM rqname tp,
                                            siac_r_class_fam_tree tn
    WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
        tp.ente_proprietario_id
    )
    SELECT rqname.classif_classif_fam_tree_id,
                            rqname.classif_fam_tree_id, rqname.classif_id,
                            rqname.classif_id_padre,
                            rqname.ente_proprietario_id, rqname.ordine,
                            rqname.livello, rqname.level
    FROM rqname
    ORDER BY rqname.arrhierarchy
    ) tb, siac_t_class t1,
                    siac_d_class_tipo ti1
WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
    t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id
)
UNION
SELECT tb.classif_classif_fam_tree_id, tb.classif_fam_tree_id,
                    t1.classif_code, t1.classif_desc, ti1.classif_tipo_desc,
                    tb.classif_id, tb.classif_id_padre, tb.ente_proprietario_id,
                    tb.ordine, tb.level
FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
    SELECT rt1.classif_classif_fam_tree_id,
                                            rt1.classif_fam_tree_id,
                                            rt1.classif_id,
                                            rt1.classif_id_padre,
                                            rt1.ente_proprietario_id,
                                            rt1.ordine, rt1.livello, 1,
                                            ARRAY[COALESCE(rt1.classif_id, 0)]
                                                AS "array"
    FROM siac_r_class_fam_tree rt1,
                                            siac_t_class_fam_tree tt1,
                                            siac_d_class_fam cf
    WHERE cf.classif_fam_id = tt1.classif_fam_id AND tt1.classif_fam_tree_id =
        rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00025'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
    UNION ALL
    SELECT tn.classif_classif_fam_tree_id,
                                            tn.classif_fam_tree_id,
                                            tn.classif_id, tn.classif_id_padre,
                                            tn.ente_proprietario_id, tn.ordine,
                                            tn.livello, tp.level + 1,
                                            tp.arrhierarchy || tn.classif_id
    FROM rqname tp,
                                            siac_r_class_fam_tree tn
    WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
        tp.ente_proprietario_id
    )
    SELECT rqname.classif_classif_fam_tree_id,
                            rqname.classif_fam_tree_id, rqname.classif_id,
                            rqname.classif_id_padre,
                            rqname.ente_proprietario_id, rqname.ordine,
                            rqname.livello, rqname.level
    FROM rqname
    ORDER BY rqname.arrhierarchy
    ) tb, siac_t_class t1,
                    siac_d_class_tipo ti1
WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
    t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id
   )
   UNION
SELECT tb.classif_classif_fam_tree_id, tb.classif_fam_tree_id,
                    t1.classif_code, t1.classif_desc, ti1.classif_tipo_desc,
                    tb.classif_id, tb.classif_id_padre, tb.ente_proprietario_id,
                    tb.ordine, tb.level
FROM ( WITH RECURSIVE rqname(classif_classif_fam_tree_id, classif_fam_tree_id,
    classif_id, classif_id_padre, ente_proprietario_id, ordine, livello, level, arrhierarchy) AS (
    SELECT rt1.classif_classif_fam_tree_id,
                                            rt1.classif_fam_tree_id,
                                            rt1.classif_id,
                                            rt1.classif_id_padre,
                                            rt1.ente_proprietario_id,
                                            rt1.ordine, rt1.livello, 1,
                                            ARRAY[COALESCE(rt1.classif_id, 0)]
                                                AS "array"
    FROM siac_r_class_fam_tree rt1,
                                            siac_t_class_fam_tree tt1,
                                            siac_d_class_fam cf
    WHERE cf.classif_fam_id = tt1.classif_fam_id AND tt1.classif_fam_tree_id =
        rt1.classif_fam_tree_id AND rt1.classif_id_padre IS NULL AND cf.classif_fam_code::text = '00026'::text AND tt1.ente_proprietario_id = rt1.ente_proprietario_id AND date_trunc('day'::text, now()) > tt1.validita_inizio AND (date_trunc('day'::text, now()) < tt1.validita_fine OR tt1.validita_fine IS NULL)
    UNION ALL
    SELECT tn.classif_classif_fam_tree_id,
                                            tn.classif_fam_tree_id,
                                            tn.classif_id, tn.classif_id_padre,
                                            tn.ente_proprietario_id, tn.ordine,
                                            tn.livello, tp.level + 1,
                                            tp.arrhierarchy || tn.classif_id
    FROM rqname tp,
                                            siac_r_class_fam_tree tn
    WHERE tp.classif_id = tn.classif_id_padre AND tn.ente_proprietario_id =
        tp.ente_proprietario_id
    )
    SELECT rqname.classif_classif_fam_tree_id,
                            rqname.classif_fam_tree_id, rqname.classif_id,
                            rqname.classif_id_padre,
                            rqname.ente_proprietario_id, rqname.ordine,
                            rqname.livello, rqname.level
    FROM rqname
    ORDER BY rqname.arrhierarchy
    ) tb, siac_t_class t1,
                    siac_d_class_tipo ti1
WHERE t1.classif_id = tb.classif_id AND ti1.classif_tipo_id =
    t1.classif_tipo_id AND t1.ente_proprietario_id = tb.ente_proprietario_id AND ti1.ente_proprietario_id = t1.ente_proprietario_id            
    ) zz
ORDER BY zz.ente_proprietario_id,
        CASE
            WHEN zz.classif_tipo_desc::text =
                'conti d''ordine (codice di bilancio)'::text THEN 4
            WHEN zz.classif_tipo_desc::text =
                'conto economico (codice di bilancio)'::text THEN 1
            WHEN zz.classif_tipo_desc::text =
                'stato patrimoniale attivo (codice di bilancio)'::text THEN 2
            WHEN zz.classif_tipo_desc::text =
                'stato patrimoniale passivo (codice di bilancio)'::text THEN 3
            WHEN zz.classif_tipo_desc::text =
                'CE_CODBIL_GSA'::text THEN 5
            WHEN zz.classif_tipo_desc::text =
                'SPA_CODBIL_GSA'::text THEN 6        
            WHEN zz.classif_tipo_desc::text =
                'SPP_CODBIL_GSA'::text THEN 7                                        
            ELSE NULL::integer
        END, zz.ordine; 
		
CREATE OR REPLACE FUNCTION siac.fnc_siac_dwh_contabilita_generale (
  p_anno_bilancio varchar,
  p_ente_proprietario_id integer,
  p_data timestamp
)
RETURNS TABLE (
  esito varchar
) AS
$body$
DECLARE
/*
pdc        record;  

impegni record; 
documenti record; 
liquidazioni_doc record; 
liquidazioni_imp record; 
ordinativi record; 
ordinativi_imp record;

prima_nota record;
movimenti  record;
causale    record;
class      record;*/

BEGIN

IF p_ente_proprietario_id IS NULL THEN
   RAISE EXCEPTION 'Errore: Parametro Ente Propietario nullo';
   RETURN;
END IF;

IF p_anno_bilancio IS NULL THEN
   RAISE EXCEPTION 'Errore: Parametro Anno di bilancio nullo';
   RETURN;
END IF;

IF p_data IS NULL THEN
   --IF p_anno_bilancio::integer < to_char(now(),'YYYY')::integer THEN
      --p_data = to_timestamp('31/12/'||p_anno_bilancio, 'dd/mm/yyyy');
   --ELSE
      p_data := now();
   --END IF;   
END IF;

esito:= 'Inizio funzione carico dati contabilita_generale (FNC_SIAC_DWH_CONTABILITA_GENERALE) - '||clock_timestamp();
RETURN NEXT;

esito:= '  Inizio eliminazione dati pregressi - '||clock_timestamp();
RETURN NEXT;
DELETE FROM siac.siac_dwh_contabilita_generale
WHERE ente_proprietario_id = p_ente_proprietario_id
AND   bil_anno = p_anno_bilancio;
esito:= '  Fine eliminazione dati pregressi - '||clock_timestamp();
RETURN NEXT;

insert into 
siac_dwh_contabilita_generale
select 
tb.ente_proprietario_id,
tb.ente_denominazione,
tb.bil_anno, 
tb.desc_prima_nota,
tb.num_provvisorio_prima_nota,  
tb.num_definitivo_prima_nota,
tb.data_registrazione_prima_nota,
tb.cod_stato_prima_nota,
tb.desc_stato_prima_nota,
tb.cod_mov_ep,
tb.desc_mov_ep,  
tb.cod_mov_ep_dettaglio,
tb.desc_mov_ep_dettaglio,
tb.importo_mov_ep,
tb.segno_mov_ep,
tb.cod_piano_dei_conti,
tb.desc_piano_dei_conti,
tb.livello_piano_dei_conti,
tb.ordine_piano_dei_conti,
tb.cod_pdce_fam,
tb.desc_pdce_fam,
tb.cod_ambito, 
tb.desc_ambito,  
tb.cod_causale,
tb.desc_causale,
tb.cod_tipo_causale,
tb.desc_tipo_causale,
tb.cod_stato_causale,
tb.desc_stato_causale,
tb.cod_evento,
tb.desc_evento,
tb.cod_tipo_mov_finanziario,
tb.desc_tipo_mov_finanziario,
tb.cod_piano_finanziario,
tb.desc_piano_finanziario,
tb.anno_movimento,
tb.numero_movimento,
tb.cod_submovimento,
anno_ordinativo,
num_ordinativo,
num_subordinativo,
anno_liquidazione,
num_liquidazione,
anno_doc,
num_doc,
cod_tipo_doc,
data_emissione_doc,
cod_sogg_doc,
num_subdoc,
modifica_impegno,
entrate_uscite,
tb.cod_bilancio,
p_data data_elaborazione,
numero_ricecon
from (
select tbdoc.* from 
(
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and 
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('SE','SS') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id= p_ente_proprietario_id 
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
  then 'CE' 
  when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
  when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
  when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
  when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
  when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
  when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
  else ''::varchar end as tipo_codifica,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id= p_ente_proprietario_id 
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null
        )
  select aa.*, 
bb.tipo_codifica||'.'||  bb.codice_codifica_albero cod_bilancio
   from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
  doc as (with aa as (
select a.doc_id,
b.subdoc_id, b.subdoc_numero  num_subdoc,
a.doc_anno anno_doc,
a.doc_numero num_doc, 
a.doc_data_emissione data_emissione_doc ,
c.doc_tipo_code cod_tipo_doc
 from siac_t_doc a,siac_t_subdoc b,siac_d_doc_tipo c
where b.doc_id=a.doc_id and a.ente_proprietario_id=p_ente_proprietario_id
and c.doc_tipo_id=a.doc_tipo_id
and a.data_cancellazione is null
and b.data_cancellazione is null
and c.data_cancellazione is NULL)
, bb as (SELECT 
  a.doc_id,
  b.soggetto_code v_soggetto_code
      FROM   siac_r_doc_sog a, siac_t_soggetto b
      WHERE a.soggetto_id = b.soggetto_id
      and a.ente_proprietario_id=p_ente_proprietario_id 
      and a.data_cancellazione is null
and b.data_cancellazione is null
and a.validita_fine is null)
select * From 
aa left join bb ON
aa.doc_id=bb.doc_id),
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario,
   null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
doc.anno_doc,
doc.num_doc,
doc.cod_tipo_doc,
doc.data_emissione_doc,
doc.v_soggetto_code cod_sogg_doc,
doc.num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
    from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
     left join doc
  on movep.campo_pk_id=doc.subdoc_id 
  left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id) as tbdoc 
UNION
select tbimp.* from (
-- imp
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
     i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND  p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('A','I') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) 
  ,imp as (
  select a.movgest_id,a.movgest_anno anno_movimento,a.movgest_numero numero_movimento from siac_t_movgest a where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null)
  , pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.*,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario,
   imp.anno_movimento,imp.numero_movimento,
   null::varchar cod_submovimento 
   ,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
   from 
   movep left join 
  	movepdet on movep.movep_id=movepdet.movep_id
left join imp
  on movep.campo_pk_id=imp.movgest_id  left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id) as tbimp
UNION
--subimp acc  
select tbimp.* from (
-- imp
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND 
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('SA','SI') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) 
  ,subimp as (
  select a.movgest_id,a.movgest_anno anno_movimento,a.movgest_numero numero_movimento,
  b.movgest_ts_id,b.movgest_ts_code cod_submovimento
  from siac_t_movgest a,siac_T_movgest_ts b where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and b.movgest_id=a.movgest_id
  )
  , pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario, subimp.anno_movimento,
   subimp.numero_movimento,
   subimp.cod_submovimento
   ,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
left join subimp
  on movep.campo_pk_id=subimp.movgest_ts_id    left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id ) as tbimp  
union
select tbord.* from (
-- ord
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('OI', 'OP') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as (/* SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*,bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
   ord as (select a.ord_id,a.ord_anno anno_ordinativo,a.ord_numero num_ordinativo
   from siac_t_ordinativo a where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null)
  ,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
/*  ,liq as (select a.liq_id,a.liq_anno anno_liquidazione,a.liq_numero num_liquidazione from siac_t_liquidazione a where a.ente_proprietario_id=3
and a.data_cancellazione is null)  */
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario, 
   null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,ord.anno_ordinativo,
ord.num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
   left join ord
  on movep.campo_pk_id=ord.ord_id
      left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id
  ) as tbord
UNION
-- liq
select tbliq.* from (
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and 
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code ='L'
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,liq as (select a.liq_id,a.liq_anno anno_liquidazione,a.liq_numero num_liquidazione from siac_t_liquidazione a where a.ente_proprietario_id=p_ente_proprietario_id
and a.data_cancellazione is null)
,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario
   , null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
liq.anno_liquidazione,
liq.num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon   
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
  left join liq
  on movep.campo_pk_id=liq.liq_id
      left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id
) as tbliq
union
--richiesta econ
select tbricecon.* from (
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code ='RE'
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( /*SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null        
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
  ricecon as (select a.ricecon_id, a.ricecon_numero numero_ricecon from siac_t_richiesta_econ a where a.ente_proprietario_id=p_ente_proprietario_id
  and a.data_cancellazione is null
)       ,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )
   select movep.*,movepdet.* ,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario
   , null::integer anno_movimento,null::numeric numero_movimento,null::varchar cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
ricecon.numero_ricecon   
   from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
  left join ricecon 
  on movep.campo_pk_id=ricecon.ricecon_id   left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id) as tbricecon
   union
-- mod
select tbmod.* from (
with movep as (
  select    distinct 
  a.ente_proprietario_id,p.ente_denominazione,i.anno AS bil_anno, 
      m.pnota_desc desc_prima_nota,  m.pnota_numero num_provvisorio_prima_nota,  
      m.pnota_progressivogiornale num_definitivo_prima_nota,
  m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
  o.pnota_stato_code cod_stato_prima_nota,
  o.pnota_stato_desc desc_stato_prima_nota,
  l.movep_id, --da non visualizzare
  l.movep_code cod_mov_ep,
  l.movep_desc desc_mov_ep,  
  q.causale_ep_code cod_causale,
  q.causale_ep_desc desc_causale,
  r.causale_ep_tipo_code cod_tipo_causale,
  r.causale_ep_tipo_desc desc_tipo_causale,
  t.causale_ep_stato_code cod_stato_causale,
  t.causale_ep_stato_desc desc_stato_causale,
           c.evento_code cod_evento,
           c.evento_desc desc_evento,
           d.collegamento_tipo_code cod_tipo_mov_finanziario,
           d.collegamento_tipo_desc desc_tipo_mov_finanziario,
           b.campo_pk_id ,
           q.causale_ep_id
    FROM siac_t_reg_movfin a,
         siac_r_evento_reg_movfin b,
         siac_d_evento c,
         siac_d_collegamento_tipo d,
         siac_r_reg_movfin_stato e,
         siac_d_reg_movfin_stato f,
         siac_d_evento_tipo g,
         siac_t_bil h,
         siac_t_periodo i,
         siac_t_mov_ep l,
         siac_t_prima_nota m,
         siac_r_prima_nota_stato n,
         siac_d_prima_nota_stato o,
         siac_t_ente_proprietario p,
         siac_t_causale_ep q,
         siac_d_causale_ep_tipo r,
         siac_r_causale_ep_stato s,
         siac_d_causale_ep_stato t 
    WHERE 
    a.ente_proprietario_id=p_ente_proprietario_id and
    i.anno=p_anno_bilancio and
    a.regmovfin_id = b.regmovfin_id and
          c.evento_id = b.evento_id AND
          d.collegamento_tipo_id = c.collegamento_tipo_id AND
          g.evento_tipo_id = c.evento_tipo_id AND
          e.regmovfin_id = a.regmovfin_id AND
          f.regmovfin_stato_id = e.regmovfin_stato_id AND
          p_data BETWEEN b.validita_inizio and COALESCE(b.validita_fine, p_data) and
          p_data BETWEEN e.validita_inizio and COALESCE(e.validita_fine, p_data) and
          --p_data >= b.validita_inizio AND p_data <= COALESCE(b.validita_fine::timestamp with time zone, p_data) AND
          --p_data >= e.validita_inizio AND p_data <= COALESCE(e.validita_fine::timestamp with time zone, p_data) AND
          h.bil_id = a.bil_id AND
          i.periodo_id = h.periodo_id AND
          l.regmovfin_id = a.regmovfin_id AND
          l.regep_id = m.pnota_id AND
          m.pnota_id = n.pnota_id AND
          o.pnota_stato_id = n.pnota_stato_id AND
          p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
          --p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
          p.ente_proprietario_id=a.ente_proprietario_id and 
          q.causale_ep_id=l.causale_ep_id AND 
          r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
          s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
          o.pnota_stato_code <> 'A' and 
          a.data_cancellazione IS NULL AND
          b.data_cancellazione IS NULL AND
          c.data_cancellazione IS NULL AND
          d.data_cancellazione IS NULL AND
          e.data_cancellazione IS NULL AND
          f.data_cancellazione IS NULL AND
          g.data_cancellazione IS NULL AND
          h.data_cancellazione IS NULL AND
          i.data_cancellazione IS NULL AND
          l.data_cancellazione IS NULL AND
          m.data_cancellazione IS NULL AND
          n.data_cancellazione IS NULL AND
          o.data_cancellazione IS NULL AND
          p.data_cancellazione IS NULL AND
          q.data_cancellazione IS NULL AND
          r.data_cancellazione IS NULL AND
          s.data_cancellazione IS NULL AND
          t.data_cancellazione IS NULL 
          and d.collegamento_tipo_code in ('MMGE','MMGS') 
          )
  , movepdet as (
with aa as (
  select a.movep_id, b.pdce_conto_id,
     a.movep_det_code cod_mov_ep_dettaglio,a.movep_det_desc desc_mov_ep_dettaglio,
     a.movep_det_importo importo_mov_ep,a.movep_det_segno segno_mov_ep,
  b.pdce_conto_code cod_piano_dei_conti,
  b.pdce_conto_desc desc_piano_dei_conti,
  b.livello livello_piano_dei_conti,
  b.ordine ordine_piano_dei_conti,
  d.pdce_fam_code cod_pdce_fam,
  d.pdce_fam_desc desc_pdce_fam,
  e.ambito_code cod_ambito, e.ambito_desc desc_ambito
      From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
      ,siac_d_pdce_fam d,siac_d_ambito e
       where a.ente_proprietario_id=p_ente_proprietario_id
      and b.pdce_conto_id=a.pdce_conto_id
      and c.pdce_fam_tree_id=b.pdce_fam_tree_id
      and d.pdce_fam_id=c.pdce_fam_id
      and c.validita_fine is null
      and e.ambito_id=a.ambito_id
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  and c.data_cancellazione is null
  and d.data_cancellazione is null
  and e.data_cancellazione is null)
  , bb as ( 
/*  
SELECT c.pdce_conto_id,
         a.codice_codifica_albero
  FROM siac_v_dwh_codifiche_econpatr a,
       siac_r_pdce_conto_class b,
       siac_t_pdce_conto c
  WHERE b.classif_id = a.classif_id AND
        c.pdce_conto_id = b.pdce_conto_id
        and c.ente_proprietario_id=p_ente_proprietario_id
        and c.data_cancellazione is null
        and b.data_cancellazione is NULL
        and b.validita_fine is null*/
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null
        )
  select aa.*, bb.tipo_codifica||'.'||bb.codice_codifica_albero cod_bilancio from aa left join 
  bb on aa.pdce_conto_id=bb.pdce_conto_id
  ) ,
  mod as (
select d.mod_id,
c.movgest_anno v_movgest_anno, c.movgest_numero v_movgest_numero,
b.movgest_ts_code cod_submovimento
          FROM   siac_t_movgest_ts_det_mod a,siac_T_movgest_ts b, siac_t_movgest c,
           siac_t_modifica d, siac_r_modifica_stato e, siac_d_modifica_stato f
          WHERE  a.ente_proprietario_id = p_ente_proprietario_id
and a.mod_stato_r_id=e.mod_stato_r_id
and e.mod_id=d.mod_id
and f.mod_stato_id=e.mod_stato_id
and a.movgest_ts_id=b.movgest_ts_id
and b.movgest_id=c.movgest_id
AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
AND    p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
          AND    a.data_cancellazione IS NULL
          AND    b.data_cancellazione IS NULL
          AND    c.data_cancellazione IS NULL
          AND    d.data_cancellazione IS NULL
          AND    e.data_cancellazione IS NULL
          AND    f.data_cancellazione IS NULL            
UNION
select d.mod_id,
c.movgest_anno v_movgest_anno, c.movgest_numero v_movgest_numero,
b.movgest_ts_code cod_submovimento
          FROM   siac_r_movgest_ts_sog_mod a,siac_T_movgest_ts b, siac_t_movgest c,
           siac_t_modifica d, siac_r_modifica_stato e, siac_d_modifica_stato f
          WHERE  a.ente_proprietario_id = p_ente_proprietario_id
and a.mod_stato_r_id=e.mod_stato_r_id
and e.mod_id=d.mod_id
and f.mod_stato_id=e.mod_stato_id
and a.movgest_ts_id=b.movgest_ts_id
and b.movgest_id=c.movgest_id
AND    p_data BETWEEN a.validita_inizio AND COALESCE(a.validita_fine, p_data)
AND    p_data BETWEEN e.validita_inizio AND COALESCE(e.validita_fine, p_data)
          AND    a.data_cancellazione IS NULL
          AND    b.data_cancellazione IS NULL
          AND    c.data_cancellazione IS NULL
          AND    d.data_cancellazione IS NULL
          AND    e.data_cancellazione IS NULL
          AND    f.data_cancellazione IS NULL   )
,
pdc as (select a.classif_code cod_piano_finanziario,a.classif_desc desc_piano_finanziario,
  b.causale_ep_id,SUBSTRING(a.classif_code from 1 for 1) entrate_uscite
   from siac_t_class a,siac_r_causale_ep_class b where a.ente_proprietario_id=p_ente_proprietario_id
  and b.classif_id=a.classif_id and 
  b.validita_fine is null
  and a.data_cancellazione is null
  and b.data_cancellazione is null
  )          
   select movep.*,movepdet.*--, case when mod.mod_id is not null then 'S' else 'N' end modifica_impegno
,pdc.cod_piano_finanziario,pdc.desc_piano_finanziario
   , mod.v_movgest_anno anno_movimento,mod.v_movgest_numero numero_movimento,
   mod.cod_submovimento
,null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
case when mod.mod_id is not null then 'S' else 'N' end modifica_impegno,
pdc.entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon   
     from movep left join 
  movepdet on movep.movep_id=movepdet.movep_id
  left join mod on 
  movep.campo_pk_id=  mod.mod_id
      left join pdc
  on movep.causale_ep_id=pdc.causale_ep_id
) as tbmod   
--lib
union
select lib.* from (
with movep as (
select distinct 
m.ente_proprietario_id,
p.ente_denominazione,
i.anno AS bil_anno, 
m.pnota_desc desc_prima_nota,  
m.pnota_numero num_provvisorio_prima_nota,  
m.pnota_progressivogiornale num_definitivo_prima_nota,
m.pnota_dataregistrazionegiornale data_registrazione_prima_nota,
o.pnota_stato_code cod_stato_prima_nota,
o.pnota_stato_desc desc_stato_prima_nota,
l.movep_id,
l.movep_code cod_mov_ep,
l.movep_desc desc_mov_ep,  
q.causale_ep_code cod_causale,
q.causale_ep_desc desc_causale,
r.causale_ep_tipo_code cod_tipo_causale,
r.causale_ep_tipo_desc desc_tipo_causale,
t.causale_ep_stato_code cod_stato_causale,
t.causale_ep_stato_desc desc_stato_causale,
NULL::varchar cod_evento,
NULL::varchar desc_evento,
NULL::varchar cod_tipo_mov_finanziario,
NULL::varchar desc_tipo_mov_finanziario,
NULL::integer campo_pk_id ,
q.causale_ep_id
FROM 
siac_t_prima_nota m,siac_d_causale_ep_tipo r,
siac_t_bil h,
siac_t_periodo i,
siac_t_mov_ep l,
siac_r_prima_nota_stato n,
siac_d_prima_nota_stato o,
siac_t_ente_proprietario p,
siac_t_causale_ep q,
siac_r_causale_ep_stato s,
siac_d_causale_ep_stato t 
WHERE 
m.ente_proprietario_id=p_ente_proprietario_id 
and r.causale_ep_tipo_code='LIB' and 
i.anno=p_anno_bilancio 
and
h.bil_id = m.bil_id AND
i.periodo_id = h.periodo_id AND
l.regep_id = m.pnota_id AND
m.pnota_id = n.pnota_id AND
o.pnota_stato_id = n.pnota_stato_id AND
--p_data >= n.validita_inizio AND p_data <= COALESCE(n.validita_fine::timestamp with time zone, p_data) AND
p_data BETWEEN n.validita_inizio and COALESCE(n.validita_fine, p_data) and
p.ente_proprietario_id=m.ente_proprietario_id and 
q.causale_ep_id=l.causale_ep_id AND 
r.causale_ep_tipo_id=q.causale_ep_tipo_id and s.causale_ep_id=q.causale_ep_id AND
s.causale_ep_stato_id=t.causale_ep_stato_id and s.validita_fine is NULL and
o.pnota_stato_code <> 'A' and 
h.data_cancellazione IS NULL AND
i.data_cancellazione IS NULL AND
l.data_cancellazione IS NULL AND
m.data_cancellazione IS NULL AND
n.data_cancellazione IS NULL AND
o.data_cancellazione IS NULL AND
p.data_cancellazione IS NULL AND
q.data_cancellazione IS NULL AND
r.data_cancellazione IS NULL AND
s.data_cancellazione IS NULL AND
t.data_cancellazione IS NULL 
)
,
movepdet as (
with aa as 
(
select a.movep_id, b.pdce_conto_id,
a.movep_det_code cod_mov_ep_dettaglio,
a.movep_det_desc desc_mov_ep_dettaglio,
a.movep_det_importo importo_mov_ep,
a.movep_det_segno segno_mov_ep,
b.pdce_conto_code cod_piano_dei_conti,
b.pdce_conto_desc desc_piano_dei_conti,
b.livello livello_piano_dei_conti,
b.ordine ordine_piano_dei_conti,
d.pdce_fam_code cod_pdce_fam,
d.pdce_fam_desc desc_pdce_fam,
e.ambito_code cod_ambito, 
e.ambito_desc desc_ambito
From siac_t_mov_ep_det a,siac_t_pdce_conto b,siac_t_pdce_fam_tree c
,siac_d_pdce_fam d,siac_d_ambito e
where a.ente_proprietario_id= p_ente_proprietario_id 
and b.pdce_conto_id=a.pdce_conto_id
and c.pdce_fam_tree_id=b.pdce_fam_tree_id
and d.pdce_fam_id=c.pdce_fam_id
and c.validita_fine is null
and e.ambito_id=a.ambito_id
and a.data_cancellazione is null
and b.data_cancellazione is null
and c.data_cancellazione is null
and d.data_cancellazione is null
and e.data_cancellazione is null
)
, 
bb as 
( 
SELECT c.pdce_conto_id,case when a.tipo_codifica = 'conto economico (codice di bilancio)'
then 'CE' 
when a.tipo_codifica = 'conti d''ordine (codice di bilancio)' then 'CO'
when a.tipo_codifica = 'stato patrimoniale attivo (codice di bilancio)' then 'SPA'
when a.tipo_codifica = 'stato patrimoniale passivo (codice di bilancio)' then 'SPP'
when a.tipo_codifica = 'CE_CODBIL_GSA' then 'CE'     -- SIAC-5551-5579
when a.tipo_codifica = 'SPA_CODBIL_GSA' then 'SPA'   -- SIAC-5551-5579
when a.tipo_codifica = 'SPP_CODBIL_GSA' then 'SPP'   -- SIAC-5551-5579 
else ''::varchar end as tipo_codifica,
a.codice_codifica_albero
FROM siac_v_dwh_codifiche_econpatr a,
siac_r_pdce_conto_class b,
siac_t_pdce_conto c
WHERE b.classif_id = a.classif_id AND
c.pdce_conto_id = b.pdce_conto_id
and c.ente_proprietario_id=p_ente_proprietario_id 
and c.data_cancellazione is null
and b.data_cancellazione is NULL
and b.validita_fine is null
)
select aa.*, 
bb.tipo_codifica||'.'||  bb.codice_codifica_albero cod_bilancio
from aa left join 
bb on aa.pdce_conto_id=bb.pdce_conto_id
) 
select movep.*,movepdet.*,
null::varchar cod_piano_finanziario,
null::varchar desc_piano_finanziario,
null::integer anno_movimento,
null::numeric numero_movimento,
null::varchar cod_submovimento,
null::integer anno_ordinativo,
null::numeric num_ordinativo,
null::varchar num_subordinativo,
null::integer anno_liquidazione,
null::numeric num_liquidazione,
null::integer anno_doc,
null::varchar num_doc,
null::varchar cod_tipo_doc,
null::timestamp data_emissione_doc,
null::varchar cod_sogg_doc,
null::integer num_subdoc,
null::varchar modifica_impegno,
null::varchar entrate_uscite,
p_data data_elaborazione,
null::integer numero_ricecon
from movep left join 
movepdet on movep.movep_id=movepdet.movep_id
) as lib
) as tb;
               
esito:= 'Fine funzione carico contabilita_generale (FNC_SIAC_DWH_CONTABILITA_GENERALE) - '||clock_timestamp();
RETURN NEXT;

EXCEPTION
WHEN others THEN
  esito:='Funzione carico contabilita_generale (FNC_SIAC_DWH_CONTABILITA_GENERALE) terminata con errori';
  RAISE EXCEPTION '%-%.',SQLSTATE,SQLERRM;
RETURN;
END;
$body$
LANGUAGE 'plpgsql'
VOLATILE
CALLED ON NULL INPUT
SECURITY DEFINER
COST 100 ROWS 1000;		
-- SIAC-5551 FINE Di Panfilo